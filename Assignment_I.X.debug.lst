

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Tue Jan 23 11:36:50 2018

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    34  0000                     
    35                           ; Version 1.43
    36                           ; Generated 25/07/2017 GMT
    37                           ; 
    38                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F45K20 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     
    70                           	psect	mediumconst
    71  007EB8                     __pmediumconst:
    72                           	opt stack 0
    73  007EB8  00                 	db	0
    74  007EB9                     _dpowers:
    75                           	opt stack 0
    76  007EB9  0001               	dw	1
    77  007EBB  0000               	dw	0
    78  007EBD  000A               	dw	10
    79  007EBF  0000               	dw	0
    80  007EC1  0064               	dw	100
    81  007EC3  0000               	dw	0
    82  007EC5  03E8               	dw	1000
    83  007EC7  0000               	dw	0
    84  007EC9  2710               	dw	10000
    85  007ECB  0000               	dw	0
    86  007ECD  86A0               	dw	34464
    87  007ECF  0001               	dw	1
    88  007ED1  4240               	dw	16960
    89  007ED3  000F               	dw	15
    90  007ED5  9680               	dw	38528
    91  007ED7  0098               	dw	152
    92  007ED9  E100               	dw	57600
    93  007EDB  05F5               	dw	1525
    94  007EDD  CA00               	dw	51712
    95  007EDF  3B9A               	dw	15258
    96  007EE1                     __end_of_dpowers:
    97                           	opt stack 0
    98  007EE1                     __powers_:
    99                           	opt stack 0
   100  007EE1  00                 	db	0
   101  007EE2  80                 	db	128
   102  007EE3  3F                 	db	63
   103  007EE4  00                 	db	0
   104  007EE5  20                 	db	32
   105  007EE6  41                 	db	65
   106  007EE7  00                 	db	0
   107  007EE8  C8                 	db	200
   108  007EE9  42                 	db	66
   109  007EEA  00                 	db	0
   110  007EEB  7A                 	db	122
   111  007EEC  44                 	db	68
   112  007EED  40                 	db	64
   113  007EEE  1C                 	db	28
   114  007EEF  46                 	db	70
   115  007EF0  50                 	db	80
   116  007EF1  C3                 	db	195
   117  007EF2  47                 	db	71
   118  007EF3  24                 	db	36
   119  007EF4  74                 	db	116
   120  007EF5  49                 	db	73
   121  007EF6  97                 	db	151
   122  007EF7  18                 	db	24
   123  007EF8  4B                 	db	75
   124  007EF9  BC                 	db	188
   125  007EFA  BE                 	db	190
   126  007EFB  4C                 	db	76
   127  007EFC  6B                 	db	107
   128  007EFD  6E                 	db	110
   129  007EFE  4E                 	db	78
   130  007EFF  03                 	db	3
   131  007F00  15                 	db	21
   132  007F01  50                 	db	80
   133  007F02  79                 	db	121
   134  007F03  AD                 	db	173
   135  007F04  60                 	db	96
   136  007F05  F3                 	db	243
   137  007F06  49                 	db	73
   138  007F07  71                 	db	113
   139  007F08                     __end_of__powers_:
   140                           	opt stack 0
   141  007F08                     __npowers_:
   142                           	opt stack 0
   143  007F08  00                 	db	0
   144  007F09  80                 	db	128
   145  007F0A  3F                 	db	63
   146  007F0B  CD                 	db	205
   147  007F0C  CC                 	db	204
   148  007F0D  3D                 	db	61
   149  007F0E  D7                 	db	215
   150  007F0F  23                 	db	35
   151  007F10  3C                 	db	60
   152  007F11  12                 	db	18
   153  007F12  83                 	db	131
   154  007F13  3A                 	db	58
   155  007F14  B7                 	db	183
   156  007F15  D1                 	db	209
   157  007F16  38                 	db	56
   158  007F17  C6                 	db	198
   159  007F18  27                 	db	39
   160  007F19  37                 	db	55
   161  007F1A  38                 	db	56
   162  007F1B  86                 	db	134
   163  007F1C  35                 	db	53
   164  007F1D  C0                 	db	192
   165  007F1E  D6                 	db	214
   166  007F1F  33                 	db	51
   167  007F20  CC                 	db	204
   168  007F21  2B                 	db	43
   169  007F22  32                 	db	50
   170  007F23  70                 	db	112
   171  007F24  89                 	db	137
   172  007F25  30                 	db	48
   173  007F26  E7                 	db	231
   174  007F27  DB                 	db	219
   175  007F28  2E                 	db	46
   176  007F29  E5                 	db	229
   177  007F2A  3C                 	db	60
   178  007F2B  1E                 	db	30
   179  007F2C  42                 	db	66
   180  007F2D  A2                 	db	162
   181  007F2E  0D                 	db	13
   182  007F2F                     __end_of__npowers_:
   183                           	opt stack 0
   184  0000                     _INTCON	set	4082
   185  0000                     _SPBRG	set	4015
   186  0000                     _RCREG	set	4014
   187  0000                     _TXREG	set	4013
   188  0000                     _CREN	set	32092
   189  0000                     _SPEN	set	32095
   190  0000                     _RX9	set	32094
   191  0000                     _TXEN	set	32101
   192  0000                     _SYNC	set	32100
   193  0000                     _BRG16	set	32195
   194  0000                     _BRGH	set	32098
   195  0000                     _RCIF	set	31989
   196  0000                     _TXIF	set	31988
   197  007F2F                     STR_5:
   198  007F2F  45                 	db	69	;'E'
   199  007F30  45                 	db	69	;'E'
   200  007F31  54                 	db	84	;'T'
   201  007F32  44                 	db	68	;'D'
   202  007F33  20                 	db	32
   203  007F34  34                 	db	52	;'4'
   204  007F35  30                 	db	48	;'0'
   205  007F36  30                 	db	48	;'0'
   206  007F37  31                 	db	49	;'1'
   207  007F38  3A                 	db	58	;':'
   208  007F39  20                 	db	32
   209  007F3A  4D                 	db	77	;'M'
   210  007F3B  69                 	db	105	;'i'
   211  007F3C  63                 	db	99	;'c'
   212  007F3D  72                 	db	114	;'r'
   213  007F3E  6F                 	db	111	;'o'
   214  007F3F  63                 	db	99	;'c'
   215  007F40  6F                 	db	111	;'o'
   216  007F41  6E                 	db	110	;'n'
   217  007F42  74                 	db	116	;'t'
   218  007F43  72                 	db	114	;'r'
   219  007F44  6F                 	db	111	;'o'
   220  007F45  6C                 	db	108	;'l'
   221  007F46  6C                 	db	108	;'l'
   222  007F47  65                 	db	101	;'e'
   223  007F48  72                 	db	114	;'r'
   224  007F49  73                 	db	115	;'s'
   225  007F4A  20                 	db	32
   226  007F4B  26                 	db	38
   227  007F4C  20                 	db	32
   228  007F4D  50                 	db	80	;'P'
   229  007F4E  72                 	db	114	;'r'
   230  007F4F  6F                 	db	111	;'o'
   231  007F50  67                 	db	103	;'g'
   232  007F51  72                 	db	114	;'r'
   233  007F52  61                 	db	97	;'a'
   234  007F53  6D                 	db	109	;'m'
   235  007F54  6D                 	db	109	;'m'
   236  007F55  69                 	db	105	;'i'
   237  007F56  6E                 	db	110	;'n'
   238  007F57  67                 	db	103	;'g'
   239  007F58  2C                 	db	44
   240  007F59  20                 	db	32
   241  007F5A  54                 	db	84	;'T'
   242  007F5B  72                 	db	114	;'r'
   243  007F5C  6F                 	db	111	;'o'
   244  007F5D  79                 	db	121	;'y'
   245  007F5E  20                 	db	32
   246  007F5F  43                 	db	67	;'C'
   247  007F60  6F                 	db	111	;'o'
   248  007F61  6E                 	db	110	;'n'
   249  007F62  72                 	db	114	;'r'
   250  007F63  61                 	db	97	;'a'
   251  007F64  64                 	db	100	;'d'
   252  007F65  00                 	db	0
   253  007F66                     STR_11:
   254  007F66  54                 	db	84	;'T'
   255  007F67  68                 	db	104	;'h'
   256  007F68  65                 	db	101	;'e'
   257  007F69  20                 	db	32
   258  007F6A  61                 	db	97	;'a'
   259  007F6B  72                 	db	114	;'r'
   260  007F6C  65                 	db	101	;'e'
   261  007F6D  61                 	db	97	;'a'
   262  007F6E  20                 	db	32
   263  007F6F  6F                 	db	111	;'o'
   264  007F70  66                 	db	102	;'f'
   265  007F71  20                 	db	32
   266  007F72  74                 	db	116	;'t'
   267  007F73  68                 	db	104	;'h'
   268  007F74  65                 	db	101	;'e'
   269  007F75  20                 	db	32
   270  007F76  72                 	db	114	;'r'
   271  007F77  65                 	db	101	;'e'
   272  007F78  63                 	db	99	;'c'
   273  007F79  74                 	db	116	;'t'
   274  007F7A  61                 	db	97	;'a'
   275  007F7B  6E                 	db	110	;'n'
   276  007F7C  67                 	db	103	;'g'
   277  007F7D  6C                 	db	108	;'l'
   278  007F7E  65                 	db	101	;'e'
   279  007F7F  20                 	db	32
   280  007F80  69                 	db	105	;'i'
   281  007F81  73                 	db	115	;'s'
   282  007F82  20                 	db	32
   283  007F83  25                 	db	37
   284  007F84  64                 	db	100	;'d'
   285  007F85  20                 	db	32
   286  007F86  75                 	db	117	;'u'
   287  007F87  6E                 	db	110	;'n'
   288  007F88  69                 	db	105	;'i'
   289  007F89  74                 	db	116	;'t'
   290  007F8A  73                 	db	115	;'s'
   291  007F8B  20                 	db	32
   292  007F8C  73                 	db	115	;'s'
   293  007F8D  71                 	db	113	;'q'
   294  007F8E  75                 	db	117	;'u'
   295  007F8F  61                 	db	97	;'a'
   296  007F90  72                 	db	114	;'r'
   297  007F91  65                 	db	101	;'e'
   298  007F92  64                 	db	100	;'d'
   299  007F93  2E                 	db	46
   300  007F94  00                 	db	0
   301  007F95                     STR_1:
   302  007F95  41                 	db	65	;'A'
   303  007F96  73                 	db	115	;'s'
   304  007F97  73                 	db	115	;'s'
   305  007F98  69                 	db	105	;'i'
   306  007F99  67                 	db	103	;'g'
   307  007F9A  6E                 	db	110	;'n'
   308  007F9B  6D                 	db	109	;'m'
   309  007F9C  65                 	db	101	;'e'
   310  007F9D  6E                 	db	110	;'n'
   311  007F9E  74                 	db	116	;'t'
   312  007F9F  20                 	db	32
   313  007FA0  49                 	db	73	;'I'
   314  007FA1  3A                 	db	58	;':'
   315  007FA2  20                 	db	32
   316  007FA3  56                 	db	86	;'V'
   317  007FA4  61                 	db	97	;'a'
   318  007FA5  72                 	db	114	;'r'
   319  007FA6  69                 	db	105	;'i'
   320  007FA7  61                 	db	97	;'a'
   321  007FA8  62                 	db	98	;'b'
   322  007FA9  6C                 	db	108	;'l'
   323  007FAA  65                 	db	101	;'e'
   324  007FAB  73                 	db	115	;'s'
   325  007FAC  20                 	db	32
   326  007FAD  61                 	db	97	;'a'
   327  007FAE  6E                 	db	110	;'n'
   328  007FAF  64                 	db	100	;'d'
   329  007FB0  20                 	db	32
   330  007FB1  4F                 	db	79	;'O'
   331  007FB2  70                 	db	112	;'p'
   332  007FB3  65                 	db	101	;'e'
   333  007FB4  72                 	db	114	;'r'
   334  007FB5  61                 	db	97	;'a'
   335  007FB6  74                 	db	116	;'t'
   336  007FB7  6F                 	db	111	;'o'
   337  007FB8  72                 	db	114	;'r'
   338  007FB9  73                 	db	115	;'s'
   339  007FBA  00                 	db	0
   340  007FBB                     STR_14:
   341  007FBB  31                 	db	49	;'1'
   342  007FBC  35                 	db	53	;'5'
   343  007FBD  30                 	db	48	;'0'
   344  007FBE  20                 	db	32
   345  007FBF  56                 	db	86	;'V'
   346  007FC0  70                 	db	112	;'p'
   347  007FC1  20                 	db	32
   348  007FC2  69                 	db	105	;'i'
   349  007FC3  73                 	db	115	;'s'
   350  007FC4  20                 	db	32
   351  007FC5  65                 	db	101	;'e'
   352  007FC6  71                 	db	113	;'q'
   353  007FC7  75                 	db	117	;'u'
   354  007FC8  61                 	db	97	;'a'
   355  007FC9  6C                 	db	108	;'l'
   356  007FCA  20                 	db	32
   357  007FCB  74                 	db	116	;'t'
   358  007FCC  6F                 	db	111	;'o'
   359  007FCD  20                 	db	32
   360  007FCE  25                 	db	37
   361  007FCF  66                 	db	102	;'f'
   362  007FD0  20                 	db	32
   363  007FD1  56                 	db	86	;'V'
   364  007FD2  52                 	db	82	;'R'
   365  007FD3  4D                 	db	77	;'M'
   366  007FD4  53                 	db	83	;'S'
   367  007FD5  2E                 	db	46
   368  007FD6  00                 	db	0
   369  007FD7                     STR_3:
   370  007FD7  47                 	db	71	;'G'
   371  007FD8  72                 	db	114	;'r'
   372  007FD9  61                 	db	97	;'a'
   373  007FDA  63                 	db	99	;'c'
   374  007FDB  65                 	db	101	;'e'
   375  007FDC  20                 	db	32
   376  007FDD  53                 	db	83	;'S'
   377  007FDE  74                 	db	116	;'t'
   378  007FDF  72                 	db	114	;'r'
   379  007FE0  61                 	db	97	;'a'
   380  007FE1  74                 	db	116	;'t'
   381  007FE2  74                 	db	116	;'t'
   382  007FE3  6F                 	db	111	;'o'
   383  007FE4  6E                 	db	110	;'n'
   384  007FE5  2C                 	db	44
   385  007FE6  20                 	db	32
   386  007FE7  77                 	db	119	;'w'
   387  007FE8  30                 	db	48	;'0'
   388  007FE9  34                 	db	52	;'4'
   389  007FEA  30                 	db	48	;'0'
   390  007FEB  31                 	db	49	;'1'
   391  007FEC  39                 	db	57	;'9'
   392  007FED  32                 	db	50	;'2'
   393  007FEE  36                 	db	54	;'6'
   394  007FEF  00                 	db	0
   395  007FF0                     STR_7:
   396  007FF0  32                 	db	50	;'2'
   397  007FF1  39                 	db	57	;'9'
   398  007FF2  20                 	db	32
   399  007FF3  4A                 	db	74	;'J'
   400  007FF4  61                 	db	97	;'a'
   401  007FF5  6E                 	db	110	;'n'
   402  007FF6  20                 	db	32
   403  007FF7  32                 	db	50	;'2'
   404  007FF8  30                 	db	48	;'0'
   405  007FF9  31                 	db	49	;'1'
   406  007FFA  38                 	db	56	;'8'
   407  007FFB  00                 	db	0
   408  007FFC                     STR_2:
   409  007FFC  0A                 	db	10
   410  007FFD  00                 	db	0
   411  0000                     
   412                           ; #config settings
   413  007FFE  00                 	db	0	; dummy byte at the end
   414  0000                     
   415                           	psect	cinit
   416  0056A0                     __pcinit:
   417                           	opt stack 0
   418  0056A0                     start_initialization:
   419                           	opt stack 0
   420  0056A0                     __initialization:
   421                           	opt stack 0
   422  0056A0                     end_of_initialization:
   423                           	opt stack 0
   424  0056A0                     __end_of__initialization:
   425                           	opt stack 0
   426  0056A0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   427  0056A2  6EF8               	movwf	tblptru,c
   428  0056A4  0100               	movlb	0
   429  0056A6  EFE0  F030         	goto	_main	;jump to C main() function
   430                           tblptru	equ	0xFF8
   431                           
   432                           	psect	cstackBANK0
   433  000060                     __pcstackBANK0:
   434                           	opt stack 0
   435  000060                     ?_printf:
   436                           	opt stack 0
   437  000060                     printf@f:
   438                           	opt stack 0
   439                           
   440                           ; 2 bytes @ 0x0
   441  000060                     	ds	7
   442  000067                     ??_printf:
   443                           
   444                           ; 1 bytes @ 0x7
   445  000067                     	ds	6
   446  00006D                     _printf$698:
   447                           	opt stack 0
   448                           
   449                           ; 3 bytes @ 0xD
   450  00006D                     	ds	3
   451  000070                     _printf$131:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x10
   455  000070                     	ds	2
   456  000072                     _printf$134:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x12
   460  000072                     	ds	2
   461  000074                     _printf$135:
   462                           	opt stack 0
   463                           
   464                           ; 2 bytes @ 0x14
   465  000074                     	ds	2
   466  000076                     printf@temp:
   467                           	opt stack 0
   468                           
   469                           ; 3 bytes @ 0x16
   470  000076                     	ds	3
   471  000079                     printf@ap:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x19
   475  000079                     	ds	2
   476  00007B                     printf@tmpval:
   477                           	opt stack 0
   478                           
   479                           ; 4 bytes @ 0x1B
   480  00007B                     	ds	4
   481  00007F                     printf@width:
   482                           	opt stack 0
   483                           
   484                           ; 2 bytes @ 0x1F
   485  00007F                     	ds	2
   486  000081                     printf@exp:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x21
   490  000081                     	ds	2
   491  000083                     printf@val:
   492                           	opt stack 0
   493                           
   494                           ; 4 bytes @ 0x23
   495  000083                     	ds	4
   496  000087                     printf@fval:
   497                           	opt stack 0
   498                           
   499                           ; 3 bytes @ 0x27
   500  000087                     	ds	3
   501  00008A                     printf@prec:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x2A
   505  00008A                     	ds	2
   506  00008C                     printf@flag:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x2C
   510  00008C                     	ds	2
   511  00008E                     printf@c:
   512                           	opt stack 0
   513                           
   514                           ; 1 bytes @ 0x2E
   515  00008E                     	ds	1
   516  00008F                     main@Vp:
   517                           	opt stack 0
   518                           
   519                           ; 3 bytes @ 0x2F
   520  00008F                     	ds	3
   521  000092                     main@l:
   522                           	opt stack 0
   523                           
   524                           ; 3 bytes @ 0x32
   525  000092                     	ds	3
   526  000095                     main@w:
   527                           	opt stack 0
   528                           
   529                           ; 3 bytes @ 0x35
   530  000095                     	ds	3
   531  000098                     main@a:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x38
   535  000098                     	ds	2
   536  00009A                     main@b:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0x3A
   540  00009A                     	ds	2
   541  00009C                     main@res:
   542                           	opt stack 0
   543                           
   544                           ; 3 bytes @ 0x3C
   545  00009C                     	ds	3
   546                           tblptru	equ	0xFF8
   547                           
   548                           	psect	cstackCOMRAM
   549  000001                     __pcstackCOMRAM:
   550                           	opt stack 0
   551  000001                     ??_isdigit:
   552  000001                     ?___awmod:
   553                           	opt stack 0
   554  000001                     ?___ftpack:
   555                           	opt stack 0
   556  000001                     ?__tdiv_to_l_:
   557                           	opt stack 0
   558  000001                     ?__div_to_l_:
   559                           	opt stack 0
   560  000001                     ?___lldiv:
   561                           	opt stack 0
   562  000001                     putch@byte:
   563                           	opt stack 0
   564  000001                     ___awmod@dividend:
   565                           	opt stack 0
   566  000001                     __div_to_l_@f1:
   567                           	opt stack 0
   568  000001                     ___ftpack@arg:
   569                           	opt stack 0
   570  000001                     __tdiv_to_l_@f1:
   571                           	opt stack 0
   572  000001                     ___lldiv@dividend:
   573                           	opt stack 0
   574                           
   575                           ; 4 bytes @ 0x0
   576  000001                     	ds	1
   577  000002                     _isdigit$361:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0x1
   581  000002                     	ds	1
   582  000003                     isdigit@c:
   583                           	opt stack 0
   584  000003                     ___awmod@divisor:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0x2
   588  000003                     	ds	1
   589  000004                     ___ftpack@exp:
   590                           	opt stack 0
   591  000004                     __div_to_l_@f2:
   592                           	opt stack 0
   593  000004                     __tdiv_to_l_@f2:
   594                           	opt stack 0
   595                           
   596                           ; 3 bytes @ 0x3
   597  000004                     	ds	1
   598  000005                     ___awmod@counter:
   599                           	opt stack 0
   600  000005                     ___ftpack@sign:
   601                           	opt stack 0
   602  000005                     ___lldiv@divisor:
   603                           	opt stack 0
   604                           
   605                           ; 4 bytes @ 0x4
   606  000005                     	ds	1
   607  000006                     ??___ftpack:
   608  000006                     ___awmod@sign:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0x5
   612  000006                     	ds	1
   613  000007                     ??__tdiv_to_l_:
   614  000007                     ?___awdiv:
   615                           	opt stack 0
   616  000007                     ___awdiv@dividend:
   617                           	opt stack 0
   618  000007                     __div_to_l_@quot:
   619                           	opt stack 0
   620                           
   621                           ; 4 bytes @ 0x6
   622  000007                     	ds	2
   623  000009                     ___awdiv@divisor:
   624                           	opt stack 0
   625  000009                     ___lldiv@quotient:
   626                           	opt stack 0
   627                           
   628                           ; 4 bytes @ 0x8
   629  000009                     	ds	1
   630  00000A                     __tdiv_to_l_@quot:
   631                           	opt stack 0
   632                           
   633                           ; 4 bytes @ 0x9
   634  00000A                     	ds	1
   635  00000B                     ___awdiv@counter:
   636                           	opt stack 0
   637  00000B                     __div_to_l_@cntr:
   638                           	opt stack 0
   639                           
   640                           ; 1 bytes @ 0xA
   641  00000B                     	ds	1
   642  00000C                     ___awdiv@sign:
   643                           	opt stack 0
   644  00000C                     __div_to_l_@exp1:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0xB
   648  00000C                     	ds	1
   649  00000D                     ___lldiv@counter:
   650                           	opt stack 0
   651  00000D                     ___awdiv@quotient:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0xC
   655  00000D                     	ds	1
   656  00000E                     ?___llmod:
   657                           	opt stack 0
   658  00000E                     __tdiv_to_l_@cntr:
   659                           	opt stack 0
   660  00000E                     ___llmod@dividend:
   661                           	opt stack 0
   662                           
   663                           ; 4 bytes @ 0xD
   664  00000E                     	ds	1
   665  00000F                     ?___wmul:
   666                           	opt stack 0
   667  00000F                     __tdiv_to_l_@exp1:
   668                           	opt stack 0
   669  00000F                     ___wmul@multiplier:
   670                           	opt stack 0
   671                           
   672                           ; 2 bytes @ 0xE
   673  00000F                     	ds	2
   674  000011                     ___wmul@multiplicand:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x10
   678  000011                     	ds	1
   679  000012                     ___llmod@divisor:
   680                           	opt stack 0
   681                           
   682                           ; 4 bytes @ 0x11
   683  000012                     	ds	1
   684  000013                     ___wmul@product:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x12
   688  000013                     	ds	2
   689  000015                     ?___fttol:
   690                           	opt stack 0
   691  000015                     ___fttol@f1:
   692                           	opt stack 0
   693                           
   694                           ; 3 bytes @ 0x14
   695  000015                     	ds	1
   696  000016                     ___llmod@counter:
   697                           	opt stack 0
   698                           
   699                           ; 1 bytes @ 0x15
   700  000016                     	ds	3
   701  000019                     ??___fttol:
   702                           
   703                           ; 1 bytes @ 0x18
   704  000019                     	ds	5
   705  00001E                     ___fttol@sign1:
   706                           	opt stack 0
   707                           
   708                           ; 1 bytes @ 0x1D
   709  00001E                     	ds	1
   710  00001F                     ___fttol@lval:
   711                           	opt stack 0
   712                           
   713                           ; 4 bytes @ 0x1E
   714  00001F                     	ds	4
   715  000023                     ___fttol@exp1:
   716                           	opt stack 0
   717                           
   718                           ; 1 bytes @ 0x22
   719  000023                     	ds	1
   720  000024                     ?___lltoft:
   721                           	opt stack 0
   722  000024                     ___lltoft@c:
   723                           	opt stack 0
   724                           
   725                           ; 4 bytes @ 0x23
   726  000024                     	ds	4
   727  000028                     ??___lltoft:
   728                           
   729                           ; 1 bytes @ 0x27
   730  000028                     	ds	4
   731  00002C                     ___lltoft@exp:
   732                           	opt stack 0
   733                           
   734                           ; 1 bytes @ 0x2B
   735  00002C                     	ds	1
   736  00002D                     ?___ftneg:
   737                           	opt stack 0
   738  00002D                     ___ftneg@f1:
   739                           	opt stack 0
   740                           
   741                           ; 3 bytes @ 0x2C
   742  00002D                     	ds	3
   743  000030                     ?___ftmul:
   744                           	opt stack 0
   745  000030                     ___ftmul@f1:
   746                           	opt stack 0
   747                           
   748                           ; 3 bytes @ 0x2F
   749  000030                     	ds	3
   750  000033                     ___ftmul@f2:
   751                           	opt stack 0
   752                           
   753                           ; 3 bytes @ 0x32
   754  000033                     	ds	3
   755  000036                     ??___ftmul:
   756                           
   757                           ; 1 bytes @ 0x35
   758  000036                     	ds	3
   759  000039                     ___ftmul@exp:
   760                           	opt stack 0
   761                           
   762                           ; 1 bytes @ 0x38
   763  000039                     	ds	1
   764  00003A                     ___ftmul@f3_as_product:
   765                           	opt stack 0
   766                           
   767                           ; 3 bytes @ 0x39
   768  00003A                     	ds	3
   769  00003D                     ___ftmul@cntr:
   770                           	opt stack 0
   771                           
   772                           ; 1 bytes @ 0x3C
   773  00003D                     	ds	1
   774  00003E                     ___ftmul@sign:
   775                           	opt stack 0
   776                           
   777                           ; 1 bytes @ 0x3D
   778  00003E                     	ds	1
   779  00003F                     ?_fround:
   780                           	opt stack 0
   781  00003F                     ?_scale:
   782                           	opt stack 0
   783                           
   784                           ; 3 bytes @ 0x3E
   785  00003F                     	ds	3
   786  000042                     _fround$696:
   787                           	opt stack 0
   788  000042                     _scale$697:
   789                           	opt stack 0
   790                           
   791                           ; 3 bytes @ 0x41
   792  000042                     	ds	3
   793  000045                     scale@scl:
   794                           	opt stack 0
   795  000045                     _fround$695:
   796                           	opt stack 0
   797                           
   798                           ; 3 bytes @ 0x44
   799  000045                     	ds	1
   800  000046                     ?___ftdiv:
   801                           	opt stack 0
   802  000046                     ___ftdiv@f1:
   803                           	opt stack 0
   804                           
   805                           ; 3 bytes @ 0x45
   806  000046                     	ds	2
   807  000048                     fround@prec:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0x47
   811  000048                     	ds	1
   812  000049                     ?___ftadd:
   813                           	opt stack 0
   814  000049                     ___ftadd@f1:
   815                           	opt stack 0
   816  000049                     ___ftdiv@f2:
   817                           	opt stack 0
   818                           
   819                           ; 3 bytes @ 0x48
   820  000049                     	ds	3
   821  00004C                     ??___ftdiv:
   822  00004C                     ___ftadd@f2:
   823                           	opt stack 0
   824                           
   825                           ; 3 bytes @ 0x4B
   826  00004C                     	ds	3
   827  00004F                     ??___ftadd:
   828  00004F                     ___ftdiv@cntr:
   829                           	opt stack 0
   830                           
   831                           ; 1 bytes @ 0x4E
   832  00004F                     	ds	1
   833  000050                     ___ftdiv@f3:
   834                           	opt stack 0
   835                           
   836                           ; 3 bytes @ 0x4F
   837  000050                     	ds	2
   838  000052                     ___ftadd@sign:
   839                           	opt stack 0
   840                           
   841                           ; 1 bytes @ 0x51
   842  000052                     	ds	1
   843  000053                     ___ftadd@exp2:
   844                           	opt stack 0
   845  000053                     ___ftdiv@exp:
   846                           	opt stack 0
   847                           
   848                           ; 1 bytes @ 0x52
   849  000053                     	ds	1
   850  000054                     ___ftadd@exp1:
   851                           	opt stack 0
   852  000054                     ___ftdiv@sign:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0x53
   856  000054                     	ds	1
   857  000055                     ?___ftsub:
   858                           	opt stack 0
   859  000055                     ___ftge@ff1:
   860                           	opt stack 0
   861  000055                     ___ftsub@f1:
   862                           	opt stack 0
   863                           
   864                           ; 3 bytes @ 0x54
   865  000055                     	ds	3
   866  000058                     ___ftge@ff2:
   867                           	opt stack 0
   868  000058                     ___ftsub@f2:
   869                           	opt stack 0
   870                           
   871                           ; 3 bytes @ 0x57
   872  000058                     	ds	3
   873  00005B                     ??___ftge:
   874                           
   875                           ; 1 bytes @ 0x5A
   876  00005B                     	ds	3
   877  00005E                     tblptru	equ	0xFF8
   878                           
   879                           ; 1 bytes @ 0x5D
   880 ;;
   881 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   882 ;;
   883 ;; *************** function _main *****************
   884 ;; Defined at:
   885 ;;		line 23 in file "//nsccdtfs4/students/W0401926/Assignments/Microcontrollers/files/Var_Op.c"
   886 ;; Parameters:    Size  Location     Type
   887 ;;		None
   888 ;; Auto vars:     Size  Location     Type
   889 ;;  res             3   60[BANK0 ] float 
   890 ;;  w               3   53[BANK0 ] float 
   891 ;;  l               3   50[BANK0 ] float 
   892 ;;  Vp              3   47[BANK0 ] float 
   893 ;;  b               2   58[BANK0 ] int 
   894 ;;  a               2   56[BANK0 ] int 
   895 ;; Return value:  Size  Location     Type
   896 ;;                  1    wreg      void 
   897 ;; Registers used:
   898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   899 ;; Tracked objects:
   900 ;;		On entry : 0/0
   901 ;;		On exit  : 0/0
   902 ;;		Unchanged: 0/0
   903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   904 ;;      Params:         0       0       0       0       0       0       0
   905 ;;      Locals:         0      16       0       0       0       0       0
   906 ;;      Temps:          0       0       0       0       0       0       0
   907 ;;      Totals:         0      16       0       0       0       0       0
   908 ;;Total ram usage:       16 bytes
   909 ;; Hardware stack levels required when called:    4
   910 ;; This function calls:
   911 ;;		___ftmul
   912 ;;		___fttol
   913 ;;		_printf
   914 ;;		_setUSART
   915 ;; This function is called by:
   916 ;;		Startup code after reset
   917 ;; This function uses a non-reentrant model
   918 ;;
   919                           
   920                           	psect	text0
   921  0061C0                     __ptext0:
   922                           	opt stack 0
   923  0061C0                     _main:
   924                           	opt stack 27
   925                           
   926                           ;Var_Op.c: 25: setUSART();
   927                           
   928                           ;incstack = 0
   929  0061C0  EC5B  F02B         	call	_setUSART	;wreg free
   930                           
   931                           ;Var_Op.c: 28: printf("Assignment I: Variables and Operators");
   932  0061C4  0E95               	movlw	low STR_1
   933  0061C6  0100               	movlb	0	; () banked
   934  0061C8  6F60               	movwf	printf@f& (0+255),b
   935  0061CA  0E7F               	movlw	high STR_1
   936  0061CC  0100               	movlb	0	; () banked
   937  0061CE  6F61               	movwf	(printf@f+1)& (0+255),b
   938  0061D0  ECE6  F034         	call	_printf	;wreg free
   939                           
   940                           ;Var_Op.c: 29: printf("\n");
   941  0061D4  0EFC               	movlw	low STR_2
   942  0061D6  0100               	movlb	0	; () banked
   943  0061D8  6F60               	movwf	printf@f& (0+255),b
   944  0061DA  0E7F               	movlw	high STR_2
   945  0061DC  0100               	movlb	0	; () banked
   946  0061DE  6F61               	movwf	(printf@f+1)& (0+255),b
   947  0061E0  ECE6  F034         	call	_printf	;wreg free
   948                           
   949                           ;Var_Op.c: 30: printf("Grace Stratton, w0401926");
   950  0061E4  0ED7               	movlw	low STR_3
   951  0061E6  0100               	movlb	0	; () banked
   952  0061E8  6F60               	movwf	printf@f& (0+255),b
   953  0061EA  0E7F               	movlw	high STR_3
   954  0061EC  0100               	movlb	0	; () banked
   955  0061EE  6F61               	movwf	(printf@f+1)& (0+255),b
   956  0061F0  ECE6  F034         	call	_printf	;wreg free
   957                           
   958                           ;Var_Op.c: 31: printf("\n");
   959  0061F4  0EFC               	movlw	low STR_2
   960  0061F6  0100               	movlb	0	; () banked
   961  0061F8  6F60               	movwf	printf@f& (0+255),b
   962  0061FA  0E7F               	movlw	high STR_2
   963  0061FC  0100               	movlb	0	; () banked
   964  0061FE  6F61               	movwf	(printf@f+1)& (0+255),b
   965  006200  ECE6  F034         	call	_printf	;wreg free
   966                           
   967                           ;Var_Op.c: 32: printf("EETD 4001: Microcontrollers & Programming, Troy Conrad");
   968  006204  0E2F               	movlw	low STR_5
   969  006206  0100               	movlb	0	; () banked
   970  006208  6F60               	movwf	printf@f& (0+255),b
   971  00620A  0E7F               	movlw	high STR_5
   972  00620C  0100               	movlb	0	; () banked
   973  00620E  6F61               	movwf	(printf@f+1)& (0+255),b
   974  006210  ECE6  F034         	call	_printf	;wreg free
   975                           
   976                           ;Var_Op.c: 33: printf("\n");
   977  006214  0EFC               	movlw	low STR_2
   978  006216  0100               	movlb	0	; () banked
   979  006218  6F60               	movwf	printf@f& (0+255),b
   980  00621A  0E7F               	movlw	high STR_2
   981  00621C  0100               	movlb	0	; () banked
   982  00621E  6F61               	movwf	(printf@f+1)& (0+255),b
   983  006220  ECE6  F034         	call	_printf	;wreg free
   984                           
   985                           ;Var_Op.c: 34: printf("29 Jan 2018");
   986  006224  0EF0               	movlw	low STR_7
   987  006226  0100               	movlb	0	; () banked
   988  006228  6F60               	movwf	printf@f& (0+255),b
   989  00622A  0E7F               	movlw	high STR_7
   990  00622C  0100               	movlb	0	; () banked
   991  00622E  6F61               	movwf	(printf@f+1)& (0+255),b
   992  006230  ECE6  F034         	call	_printf	;wreg free
   993                           
   994                           ;Var_Op.c: 35: printf("\n");
   995  006234  0EFC               	movlw	low STR_2
   996  006236  0100               	movlb	0	; () banked
   997  006238  6F60               	movwf	printf@f& (0+255),b
   998  00623A  0E7F               	movlw	high STR_2
   999  00623C  0100               	movlb	0	; () banked
  1000  00623E  6F61               	movwf	(printf@f+1)& (0+255),b
  1001  006240  ECE6  F034         	call	_printf	;wreg free
  1002                           
  1003                           ;Var_Op.c: 36: printf("\n");
  1004  006244  0EFC               	movlw	low STR_2
  1005  006246  0100               	movlb	0	; () banked
  1006  006248  6F60               	movwf	printf@f& (0+255),b
  1007  00624A  0E7F               	movlw	high STR_2
  1008  00624C  0100               	movlb	0	; () banked
  1009  00624E  6F61               	movwf	(printf@f+1)& (0+255),b
  1010  006250  ECE6  F034         	call	_printf	;wreg free
  1011                           
  1012                           ;Var_Op.c: 37: printf("\n");
  1013  006254  0EFC               	movlw	low STR_2
  1014  006256  0100               	movlb	0	; () banked
  1015  006258  6F60               	movwf	printf@f& (0+255),b
  1016  00625A  0E7F               	movlw	high STR_2
  1017  00625C  0100               	movlb	0	; () banked
  1018  00625E  6F61               	movwf	(printf@f+1)& (0+255),b
  1019  006260  ECE6  F034         	call	_printf	;wreg free
  1020                           
  1021                           ;Var_Op.c: 40: int a;
  1022                           ;Var_Op.c: 41: float l, w, res;
  1023                           ;Var_Op.c: 42: l = 5;
  1024  006264  0E00               	movlw	0
  1025  006266  0100               	movlb	0	; () banked
  1026  006268  6F92               	movwf	main@l& (0+255),b
  1027  00626A  0EA0               	movlw	160
  1028  00626C  0100               	movlb	0	; () banked
  1029  00626E  6F93               	movwf	(main@l+1)& (0+255),b
  1030  006270  0E40               	movlw	64
  1031  006272  0100               	movlb	0	; () banked
  1032  006274  6F94               	movwf	(main@l+2)& (0+255),b
  1033                           
  1034                           ; BSR set to: 0
  1035                           ;Var_Op.c: 43: w = 18;
  1036  006276  0E00               	movlw	0
  1037  006278  0100               	movlb	0	; () banked
  1038  00627A  6F95               	movwf	main@w& (0+255),b
  1039  00627C  0E90               	movlw	144
  1040  00627E  0100               	movlb	0	; () banked
  1041  006280  6F96               	movwf	(main@w+1)& (0+255),b
  1042  006282  0E41               	movlw	65
  1043  006284  0100               	movlb	0	; () banked
  1044  006286  6F97               	movwf	(main@w+2)& (0+255),b
  1045                           
  1046                           ; BSR set to: 0
  1047                           ;Var_Op.c: 44: res = l * w;
  1048  006288  C092  F030         	movff	main@l,___ftmul@f1
  1049  00628C  C093  F031         	movff	main@l+1,___ftmul@f1+1
  1050  006290  C094  F032         	movff	main@l+2,___ftmul@f1+2
  1051  006294  C095  F033         	movff	main@w,___ftmul@f2
  1052  006298  C096  F034         	movff	main@w+1,___ftmul@f2+1
  1053  00629C  C097  F035         	movff	main@w+2,___ftmul@f2+2
  1054  0062A0  EC63  F02E         	call	___ftmul	;wreg free
  1055  0062A4  C030  F09C         	movff	?___ftmul,main@res
  1056  0062A8  C031  F09D         	movff	?___ftmul+1,main@res+1
  1057  0062AC  C032  F09E         	movff	?___ftmul+2,main@res+2
  1058                           
  1059                           ;Var_Op.c: 45: a = res;
  1060  0062B0  C09C  F015         	movff	main@res,___fttol@f1
  1061  0062B4  C09D  F016         	movff	main@res+1,___fttol@f1+1
  1062  0062B8  C09E  F017         	movff	main@res+2,___fttol@f1+2
  1063  0062BC  ECE9  F02D         	call	___fttol	;wreg free
  1064  0062C0  C015  F098         	movff	?___fttol,main@a
  1065  0062C4  C016  F099         	movff	?___fttol+1,main@a+1
  1066                           
  1067                           ;Var_Op.c: 47: printf("The area of the rectangle is %d units squared.", a);
  1068  0062C8  0E66               	movlw	low STR_11
  1069  0062CA  0100               	movlb	0	; () banked
  1070  0062CC  6F60               	movwf	printf@f& (0+255),b
  1071  0062CE  0E7F               	movlw	high STR_11
  1072  0062D0  0100               	movlb	0	; () banked
  1073  0062D2  6F61               	movwf	(printf@f+1)& (0+255),b
  1074  0062D4  C098  F062         	movff	main@a,?_printf+2
  1075  0062D8  C099  F063         	movff	main@a+1,?_printf+3
  1076  0062DC  ECE6  F034         	call	_printf	;wreg free
  1077                           
  1078                           ;Var_Op.c: 48: printf("\n");
  1079  0062E0  0EFC               	movlw	low STR_2
  1080  0062E2  0100               	movlb	0	; () banked
  1081  0062E4  6F60               	movwf	printf@f& (0+255),b
  1082  0062E6  0E7F               	movlw	high STR_2
  1083  0062E8  0100               	movlb	0	; () banked
  1084  0062EA  6F61               	movwf	(printf@f+1)& (0+255),b
  1085  0062EC  ECE6  F034         	call	_printf	;wreg free
  1086                           
  1087                           ;Var_Op.c: 49: printf("\n");
  1088  0062F0  0EFC               	movlw	low STR_2
  1089  0062F2  0100               	movlb	0	; () banked
  1090  0062F4  6F60               	movwf	printf@f& (0+255),b
  1091  0062F6  0E7F               	movlw	high STR_2
  1092  0062F8  0100               	movlb	0	; () banked
  1093  0062FA  6F61               	movwf	(printf@f+1)& (0+255),b
  1094  0062FC  ECE6  F034         	call	_printf	;wreg free
  1095                           
  1096                           ;Var_Op.c: 52: int b;
  1097                           ;Var_Op.c: 53: float Vp, res;
  1098                           ;Var_Op.c: 54: Vp = 150;
  1099  006300  0E00               	movlw	0
  1100  006302  0100               	movlb	0	; () banked
  1101  006304  6F8F               	movwf	main@Vp& (0+255),b
  1102  006306  0E16               	movlw	22
  1103  006308  0100               	movlb	0	; () banked
  1104  00630A  6F90               	movwf	(main@Vp+1)& (0+255),b
  1105  00630C  0E43               	movlw	67
  1106  00630E  0100               	movlb	0	; () banked
  1107  006310  6F91               	movwf	(main@Vp+2)& (0+255),b
  1108                           
  1109                           ; BSR set to: 0
  1110                           ;Var_Op.c: 55: res = 150/(0.7071);
  1111  006312  0E22               	movlw	34
  1112  006314  0100               	movlb	0	; () banked
  1113  006316  6F9C               	movwf	main@res& (0+255),b
  1114  006318  0E54               	movlw	84
  1115  00631A  0100               	movlb	0	; () banked
  1116  00631C  6F9D               	movwf	(main@res+1)& (0+255),b
  1117  00631E  0E43               	movlw	67
  1118  006320  0100               	movlb	0	; () banked
  1119  006322  6F9E               	movwf	(main@res+2)& (0+255),b
  1120                           
  1121                           ; BSR set to: 0
  1122                           ;Var_Op.c: 56: b = res;
  1123  006324  C09C  F015         	movff	main@res,___fttol@f1
  1124  006328  C09D  F016         	movff	main@res+1,___fttol@f1+1
  1125  00632C  C09E  F017         	movff	main@res+2,___fttol@f1+2
  1126  006330  ECE9  F02D         	call	___fttol	;wreg free
  1127  006334  C015  F09A         	movff	?___fttol,main@b
  1128  006338  C016  F09B         	movff	?___fttol+1,main@b+1
  1129                           
  1130                           ;Var_Op.c: 58: printf("150 Vp is equal to %f VRMS.", b, res);
  1131  00633C  0EBB               	movlw	low STR_14
  1132  00633E  0100               	movlb	0	; () banked
  1133  006340  6F60               	movwf	printf@f& (0+255),b
  1134  006342  0E7F               	movlw	high STR_14
  1135  006344  0100               	movlb	0	; () banked
  1136  006346  6F61               	movwf	(printf@f+1)& (0+255),b
  1137  006348  C09A  F062         	movff	main@b,?_printf+2
  1138  00634C  C09B  F063         	movff	main@b+1,?_printf+3
  1139  006350  C09C  F064         	movff	main@res,?_printf+4
  1140  006354  C09D  F065         	movff	main@res+1,?_printf+5
  1141  006358  C09E  F066         	movff	main@res+2,?_printf+6
  1142  00635C  ECE6  F034         	call	_printf	;wreg free
  1143                           
  1144                           ;Var_Op.c: 59: printf("\n");
  1145  006360  0EFC               	movlw	low STR_2
  1146  006362  0100               	movlb	0	; () banked
  1147  006364  6F60               	movwf	printf@f& (0+255),b
  1148  006366  0E7F               	movlw	high STR_2
  1149  006368  0100               	movlb	0	; () banked
  1150  00636A  6F61               	movwf	(printf@f+1)& (0+255),b
  1151  00636C  ECE6  F034         	call	_printf	;wreg free
  1152  006370                     l50:
  1153  006370  D7FF               	goto	l50
  1154  006372                     __end_of_main:
  1155                           	opt stack 0
  1156                           tblptru	equ	0xFF8
  1157                           
  1158 ;; *************** function _setUSART *****************
  1159 ;; Defined at:
  1160 ;;		line 70 in file "//nsccdtfs4/students/W0401926/Assignments/Microcontrollers/files/Var_Op.c"
  1161 ;; Parameters:    Size  Location     Type
  1162 ;;		None
  1163 ;; Auto vars:     Size  Location     Type
  1164 ;;		None
  1165 ;; Return value:  Size  Location     Type
  1166 ;;                  1    wreg      void 
  1167 ;; Registers used:
  1168 ;;		wreg, status,2
  1169 ;; Tracked objects:
  1170 ;;		On entry : 0/0
  1171 ;;		On exit  : 0/0
  1172 ;;		Unchanged: 0/0
  1173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1174 ;;      Params:         0       0       0       0       0       0       0
  1175 ;;      Locals:         0       0       0       0       0       0       0
  1176 ;;      Temps:          0       0       0       0       0       0       0
  1177 ;;      Totals:         0       0       0       0       0       0       0
  1178 ;;Total ram usage:        0 bytes
  1179 ;; Hardware stack levels used:    1
  1180 ;; This function calls:
  1181 ;;		Nothing
  1182 ;; This function is called by:
  1183 ;;		_main
  1184 ;; This function uses a non-reentrant model
  1185 ;;
  1186                           
  1187                           	psect	text1
  1188  0056B6                     __ptext1:
  1189                           	opt stack 0
  1190  0056B6                     _setUSART:
  1191                           	opt stack 30
  1192                           
  1193                           ;Var_Op.c: 73: BRGH = 1;
  1194                           
  1195                           ;incstack = 0
  1196  0056B6  84AC               	bsf	4012,2,c	;volatile
  1197                           
  1198                           ;Var_Op.c: 75: BRG16= 0;
  1199  0056B8  96B8               	bcf	4024,3,c	;volatile
  1200                           
  1201                           ;Var_Op.c: 77: SPBRG = 51;
  1202  0056BA  0E33               	movlw	51
  1203  0056BC  6EAF               	movwf	4015,c	;volatile
  1204                           
  1205                           ;Var_Op.c: 79: SYNC = 0;
  1206  0056BE  98AC               	bcf	4012,4,c	;volatile
  1207                           
  1208                           ;Var_Op.c: 81: TXEN = 1;
  1209  0056C0  8AAC               	bsf	4012,5,c	;volatile
  1210                           
  1211                           ;Var_Op.c: 83: INTCON = 0x00;
  1212  0056C2  0E00               	movlw	0
  1213  0056C4  6EF2               	movwf	intcon,c	;volatile
  1214                           
  1215                           ;Var_Op.c: 85: RX9 =0;
  1216  0056C6  9CAB               	bcf	4011,6,c	;volatile
  1217                           
  1218                           ;Var_Op.c: 87: SPEN =1;
  1219  0056C8  8EAB               	bsf	4011,7,c	;volatile
  1220                           
  1221                           ;Var_Op.c: 89: CREN = 0;
  1222  0056CA  98AB               	bcf	4011,4,c	;volatile
  1223  0056CC  0012               	return		;funcret
  1224  0056CE                     __end_of_setUSART:
  1225                           	opt stack 0
  1226                           tblptru	equ	0xFF8
  1227                           intcon	equ	0xFF2
  1228                           
  1229 ;; *************** function _printf *****************
  1230 ;; Defined at:
  1231 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  1232 ;; Parameters:    Size  Location     Type
  1233 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1234 ;;		 -> STR_15(2), STR_14(28), STR_13(2), STR_12(2), 
  1235 ;;		 -> STR_11(47), STR_10(2), STR_9(2), STR_8(2), 
  1236 ;;		 -> STR_7(12), STR_6(2), STR_5(55), STR_4(2), 
  1237 ;;		 -> STR_3(25), STR_2(2), STR_1(38), 
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;  temp            3   22[BANK0 ] PTR const unsigned char 
  1240 ;;  val             4   35[BANK0 ] unsigned long 
  1241 ;;  tmpval          4   27[BANK0 ] struct .
  1242 ;;  fval            3   39[BANK0 ] struct .
  1243 ;;  cp              3    0        PTR const unsigned char 
  1244 ;;  flag            2   44[BANK0 ] unsigned short 
  1245 ;;  prec            2   42[BANK0 ] int 
  1246 ;;  exp             2   33[BANK0 ] int 
  1247 ;;  width           2   31[BANK0 ] int 
  1248 ;;  ap              2   25[BANK0 ] PTR void [1]
  1249 ;;		 -> ?_printf(2), 
  1250 ;;  len             2    0        unsigned int 
  1251 ;;  c               1   46[BANK0 ] char 
  1252 ;;  d               1    0        unsigned char 
  1253 ;; Return value:  Size  Location     Type
  1254 ;;                  2    0[BANK0 ] int 
  1255 ;; Registers used:
  1256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1257 ;; Tracked objects:
  1258 ;;		On entry : 0/0
  1259 ;;		On exit  : 0/0
  1260 ;;		Unchanged: 0/0
  1261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1262 ;;      Params:         0       7       0       0       0       0       0
  1263 ;;      Locals:         0      34       0       0       0       0       0
  1264 ;;      Temps:          0       6       0       0       0       0       0
  1265 ;;      Totals:         0      47       0       0       0       0       0
  1266 ;;Total ram usage:       47 bytes
  1267 ;; Hardware stack levels used:    1
  1268 ;; Hardware stack levels required when called:    3
  1269 ;; This function calls:
  1270 ;;		___awdiv
  1271 ;;		___awmod
  1272 ;;		___ftadd
  1273 ;;		___ftdiv
  1274 ;;		___ftge
  1275 ;;		___ftmul
  1276 ;;		___ftneg
  1277 ;;		___ftsub
  1278 ;;		___fttol
  1279 ;;		___lldiv
  1280 ;;		___llmod
  1281 ;;		___lltoft
  1282 ;;		___wmul
  1283 ;;		__div_to_l_
  1284 ;;		__tdiv_to_l_
  1285 ;;		_fround
  1286 ;;		_isdigit
  1287 ;;		_putch
  1288 ;;		_scale
  1289 ;; This function is called by:
  1290 ;;		_main
  1291 ;; This function uses a non-reentrant model
  1292 ;;
  1293                           
  1294                           	psect	text2
  1295  0069CC                     __ptext2:
  1296                           	opt stack 0
  1297  0069CC                     _printf:
  1298                           	opt stack 27
  1299                           
  1300                           ;doprnt.c: 466: va_list ap;
  1301                           ;doprnt.c: 499: signed char c;
  1302                           ;doprnt.c: 501: int width;
  1303                           ;doprnt.c: 504: int prec;
  1304                           ;doprnt.c: 508: unsigned short flag;
  1305                           ;doprnt.c: 515: char d;
  1306                           ;doprnt.c: 516: double fval;
  1307                           ;doprnt.c: 517: int exp;
  1308                           ;doprnt.c: 523: union {
  1309                           ;doprnt.c: 524: unsigned long vd;
  1310                           ;doprnt.c: 525: double integ;
  1311                           ;doprnt.c: 526: } tmpval;
  1312                           ;doprnt.c: 528: unsigned long val;
  1313                           ;doprnt.c: 529: unsigned len;
  1314                           ;doprnt.c: 530: const char * cp;
  1315                           ;doprnt.c: 533: *ap = __va_start();
  1316                           
  1317                           ;incstack = 0
  1318  0069CC  0E62               	movlw	low (?_printf+2)
  1319  0069CE  0100               	movlb	0	; () banked
  1320  0069D0  6F79               	movwf	printf@ap& (0+255),b
  1321  0069D2  0E00               	movlw	high (?_printf+2)
  1322  0069D4  0100               	movlb	0	; () banked
  1323  0069D6  6F7A               	movwf	(printf@ap+1)& (0+255),b
  1324                           
  1325                           ;doprnt.c: 536: while(c = *f++) {
  1326  0069D8  EF4C  F03F         	goto	u4160
  1327  0069DC                     
  1328                           ; BSR set to: 0
  1329                           ;doprnt.c: 538: if(c != '%')
  1330                           
  1331                           ; BSR set to: 0
  1332  0069DC  0E25               	movlw	37
  1333  0069DE  0100               	movlb	0	; () banked
  1334  0069E0  198E               	xorwf	printf@c& (0+255),w,b
  1335  0069E2  B4D8               	btfsc	status,2,c
  1336  0069E4  D006               	goto	l95
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;doprnt.c: 540: {
  1340                           ;doprnt.c: 541: (putch(c) );
  1341  0069E6  0100               	movlb	0	; () banked
  1342  0069E8  518E               	movf	printf@c& (0+255),w,b
  1343  0069EA  EC55  F02B         	call	_putch
  1344                           
  1345                           ;doprnt.c: 542: continue;
  1346  0069EE  EF4C  F03F         	goto	u4160
  1347  0069F2                     l95:
  1348                           
  1349                           ;doprnt.c: 543: }
  1350                           ;doprnt.c: 546: width = 0;
  1351  0069F2  0E00               	movlw	0
  1352  0069F4  0100               	movlb	0	; () banked
  1353  0069F6  6F80               	movwf	(printf@width+1)& (0+255),b
  1354  0069F8  0E00               	movlw	0
  1355  0069FA  6F7F               	movwf	printf@width& (0+255),b
  1356                           
  1357                           ;doprnt.c: 548: flag = 0;
  1358  0069FC  0E00               	movlw	0
  1359  0069FE  0100               	movlb	0	; () banked
  1360  006A00  6F8D               	movwf	(printf@flag+1)& (0+255),b
  1361  006A02  0E00               	movlw	0
  1362  006A04  6F8C               	movwf	printf@flag& (0+255),b
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;doprnt.c: 551: switch(*f) {
  1366                           
  1367                           ;doprnt.c: 550: for(;;) {
  1368  006A06  D00E               	goto	l97
  1369  006A08                     
  1370                           ;doprnt.c: 554: flag |= 0x08;
  1371                           
  1372                           ; BSR set to: 0
  1373  006A08  0100               	movlb	0	; () banked
  1374  006A0A  878C               	bsf	printf@flag& (0+255),3,b
  1375  006A0C  D008               	goto	L3
  1376  006A0E                     
  1377                           ;doprnt.c: 561: flag |= 0x01;
  1378                           
  1379                           ; BSR set to: 0
  1380  006A0E  0100               	movlb	0	; () banked
  1381  006A10  818C               	bsf	printf@flag& (0+255),0,b
  1382  006A12  D005               	goto	L3
  1383  006A14                     
  1384                           ;doprnt.c: 568: flag |= 0x02;
  1385                           
  1386                           ; BSR set to: 0
  1387  006A14  0100               	movlb	0	; () banked
  1388  006A16  838C               	bsf	printf@flag& (0+255),1,b
  1389  006A18  D002               	goto	L3
  1390  006A1A                     
  1391                           ;doprnt.c: 574: flag |= 0x800;
  1392                           
  1393                           ; BSR set to: 0
  1394  006A1A  0100               	movlb	0	; () banked
  1395  006A1C  878D               	bsf	(printf@flag+1)& (0+255),3,b
  1396  006A1E                     L3:
  1397                           
  1398                           ;doprnt.c: 575: f++;
  1399  006A1E  0100               	movlb	0	; () banked
  1400  006A20  4B60               	infsnz	printf@f& (0+255),f,b
  1401  006A22  2B61               	incf	(printf@f+1)& (0+255),f,b
  1402  006A24                     l97:
  1403                           
  1404                           ; BSR set to: 0
  1405  006A24  C060  FFF6         	movff	printf@f,tblptrl
  1406  006A28  C061  FFF7         	movff	printf@f+1,tblptrh
  1407  006A2C                     	if	0	;tblptru may be non-zero
  1408  006A2C                     	endif
  1409  006A2C                     	if	0	;tblptru may be non-zero
  1410  006A2C                     	endif
  1411  006A2C  0008               	tblrd		*
  1412  006A2E  50F5               	movf	tablat,w,c
  1413                           
  1414                           ; Switch size 1, requested type "space"
  1415                           ; Number of cases is 4, Range of values is 32 to 45
  1416                           ; switch strategies available:
  1417                           ; Name         Instructions Cycles
  1418                           ; simple_byte           13     7 (average)
  1419                           ;	Chosen strategy is simple_byte
  1420  006A30  0A20               	xorlw	32	; case 32
  1421  006A32  B4D8               	btfsc	status,2,c
  1422  006A34  D7EC               	goto	l100
  1423  006A36  0A03               	xorlw	3	; case 35
  1424  006A38  B4D8               	btfsc	status,2,c
  1425  006A3A  D7EF               	goto	l102
  1426  006A3C  0A08               	xorlw	8	; case 43
  1427  006A3E  B4D8               	btfsc	status,2,c
  1428  006A40  D7E9               	goto	l101
  1429  006A42  0A06               	xorlw	6	; case 45
  1430  006A44  B4D8               	btfsc	status,2,c
  1431  006A46  D7E0               	goto	l98
  1432                           
  1433                           ;doprnt.c: 589: if(flag & 0x02)
  1434                           
  1435                           ;doprnt.c: 586: }
  1436                           
  1437                           ;doprnt.c: 585: break;
  1438  006A48  0100               	movlb	0	; () banked
  1439  006A4A  A38C               	btfss	printf@flag& (0+255),1,b
  1440  006A4C  D002               	goto	l105
  1441                           
  1442                           ; BSR set to: 0
  1443                           ;doprnt.c: 590: flag &= ~0x01;
  1444  006A4E  0100               	movlb	0	; () banked
  1445  006A50  918C               	bcf	printf@flag& (0+255),0,b
  1446  006A52                     l105:
  1447                           
  1448                           ; BSR set to: 0
  1449                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1450                           
  1451                           ; BSR set to: 0
  1452  006A52  C060  FFF6         	movff	printf@f,tblptrl
  1453  006A56  C061  FFF7         	movff	printf@f+1,tblptrh
  1454  006A5A                     	if	0	;tblptru may be non-zero
  1455  006A5A                     	endif
  1456  006A5A                     	if	0	;tblptru may be non-zero
  1457  006A5A                     	endif
  1458  006A5A  0008               	tblrd		*
  1459  006A5C  50F5               	movf	tablat,w,c
  1460  006A5E  EC67  F02B         	call	_isdigit
  1461  006A62  A0D8               	btfss	status,0,c
  1462  006A64  D03F               	goto	u3110
  1463                           
  1464                           ;doprnt.c: 598: width = 0;
  1465  006A66  0E00               	movlw	0
  1466  006A68  0100               	movlb	0	; () banked
  1467  006A6A  6F80               	movwf	(printf@width+1)& (0+255),b
  1468  006A6C  0E00               	movlw	0
  1469  006A6E  6F7F               	movwf	printf@width& (0+255),b
  1470  006A70                     
  1471                           ;doprnt.c: 600: width *= 10;
  1472                           
  1473                           ; BSR set to: 0
  1474  006A70  C07F  F00F         	movff	printf@width,___wmul@multiplier
  1475  006A74  C080  F010         	movff	printf@width+1,___wmul@multiplier+1
  1476  006A78  0E00               	movlw	0
  1477  006A7A  6E12               	movwf	___wmul@multiplicand+1,c
  1478  006A7C  0E0A               	movlw	10
  1479  006A7E  6E11               	movwf	___wmul@multiplicand,c
  1480  006A80  EC88  F02B         	call	___wmul	;wreg free
  1481  006A84  C00F  F07F         	movff	?___wmul,printf@width
  1482  006A88  C010  F080         	movff	?___wmul+1,printf@width+1
  1483                           
  1484                           ;doprnt.c: 601: width += *f++ - '0';
  1485  006A8C  0ED0               	movlw	208
  1486  006A8E  0100               	movlb	0	; () banked
  1487  006A90  6F67               	movwf	??_printf& (0+255),b
  1488  006A92  0EFF               	movlw	255
  1489  006A94  0100               	movlb	0	; () banked
  1490  006A96  6F68               	movwf	(??_printf+1)& (0+255),b
  1491  006A98  C060  FFF6         	movff	printf@f,tblptrl
  1492  006A9C  C061  FFF7         	movff	printf@f+1,tblptrh
  1493  006AA0                     	if	0	;tblptru may be non-zero
  1494  006AA0                     	endif
  1495  006AA0                     	if	0	;tblptru may be non-zero
  1496  006AA0                     	endif
  1497  006AA0  0008               	tblrd		*
  1498  006AA2  50F5               	movf	tablat,w,c
  1499  006AA4  0100               	movlb	0	; () banked
  1500  006AA6  6F69               	movwf	(??_printf+2)& (0+255),b
  1501  006AA8  6B6A               	clrf	(??_printf+3)& (0+255),b
  1502  006AAA  0100               	movlb	0	; () banked
  1503  006AAC  5167               	movf	??_printf& (0+255),w,b
  1504  006AAE  0100               	movlb	0	; () banked
  1505  006AB0  2769               	addwf	(??_printf+2)& (0+255),f,b
  1506  006AB2  0100               	movlb	0	; () banked
  1507  006AB4  5168               	movf	(??_printf+1)& (0+255),w,b
  1508  006AB6  0100               	movlb	0	; () banked
  1509  006AB8  236A               	addwfc	(??_printf+3)& (0+255),f,b
  1510  006ABA  0100               	movlb	0	; () banked
  1511  006ABC  5169               	movf	(??_printf+2)& (0+255),w,b
  1512  006ABE  0100               	movlb	0	; () banked
  1513  006AC0  277F               	addwf	printf@width& (0+255),f,b
  1514  006AC2  0100               	movlb	0	; () banked
  1515  006AC4  516A               	movf	(??_printf+3)& (0+255),w,b
  1516  006AC6  0100               	movlb	0	; () banked
  1517  006AC8  2380               	addwfc	(printf@width+1)& (0+255),f,b
  1518                           
  1519                           ; BSR set to: 0
  1520  006ACA  0100               	movlb	0	; () banked
  1521  006ACC  4B60               	infsnz	printf@f& (0+255),f,b
  1522  006ACE  2B61               	incf	(printf@f+1)& (0+255),f,b
  1523                           
  1524                           ; BSR set to: 0
  1525                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1526  006AD0  C060  FFF6         	movff	printf@f,tblptrl
  1527  006AD4  C061  FFF7         	movff	printf@f+1,tblptrh
  1528  006AD8                     	if	0	;tblptru may be non-zero
  1529  006AD8                     	endif
  1530  006AD8                     	if	0	;tblptru may be non-zero
  1531  006AD8                     	endif
  1532  006AD8  0008               	tblrd		*
  1533  006ADA  50F5               	movf	tablat,w,c
  1534  006ADC  EC67  F02B         	call	_isdigit
  1535  006AE0  B0D8               	btfsc	status,0,c
  1536  006AE2  D7C6               	goto	l107
  1537  006AE4                     u3110:
  1538                           
  1539                           ;doprnt.c: 608: }
  1540                           ;doprnt.c: 611: if(*f == '.') {
  1541  006AE4  C060  FFF6         	movff	printf@f,tblptrl
  1542  006AE8  C061  FFF7         	movff	printf@f+1,tblptrh
  1543  006AEC                     	if	0	;tblptru may be non-zero
  1544  006AEC                     	endif
  1545  006AEC                     	if	0	;tblptru may be non-zero
  1546  006AEC                     	endif
  1547  006AEC  0008               	tblrd		*
  1548  006AEE  50F5               	movf	tablat,w,c
  1549  006AF0  0A2E               	xorlw	46
  1550  006AF2  A4D8               	btfss	status,2,c
  1551  006AF4  D034               	goto	l109
  1552                           
  1553                           ;doprnt.c: 612: flag |= 0x4000;
  1554  006AF6  0100               	movlb	0	; () banked
  1555  006AF8  8D8D               	bsf	(printf@flag+1)& (0+255),6,b
  1556                           
  1557                           ;doprnt.c: 613: f++;
  1558  006AFA  0100               	movlb	0	; () banked
  1559  006AFC  4B60               	infsnz	printf@f& (0+255),f,b
  1560  006AFE  2B61               	incf	(printf@f+1)& (0+255),f,b
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;doprnt.c: 620: {
  1564                           ;doprnt.c: 621: prec = 0;
  1565  006B00  0E00               	movlw	0
  1566  006B02  0100               	movlb	0	; () banked
  1567  006B04  6F8B               	movwf	(printf@prec+1)& (0+255),b
  1568  006B06  0E00               	movlw	0
  1569  006B08  6F8A               	movwf	printf@prec& (0+255),b
  1570                           
  1571                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1572  006B0A  D01E               	goto	l110
  1573  006B0C                     
  1574                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1575                           
  1576                           ; BSR set to: 0
  1577  006B0C  C08A  F00F         	movff	printf@prec,___wmul@multiplier
  1578  006B10  C08B  F010         	movff	printf@prec+1,___wmul@multiplier+1
  1579  006B14  0E00               	movlw	0
  1580  006B16  6E12               	movwf	___wmul@multiplicand+1,c
  1581  006B18  0E0A               	movlw	10
  1582  006B1A  6E11               	movwf	___wmul@multiplicand,c
  1583  006B1C  EC88  F02B         	call	___wmul	;wreg free
  1584  006B20  C060  FFF6         	movff	printf@f,tblptrl
  1585  006B24  C061  FFF7         	movff	printf@f+1,tblptrh
  1586  006B28                     	if	0	;tblptru may be non-zero
  1587  006B28                     	endif
  1588  006B28                     	if	0	;tblptru may be non-zero
  1589  006B28                     	endif
  1590  006B28  0008               	tblrd		*
  1591  006B2A  50F5               	movf	tablat,w,c
  1592  006B2C  260F               	addwf	?___wmul,f,c
  1593  006B2E  0E00               	movlw	0
  1594  006B30  2210               	addwfc	?___wmul+1,f,c
  1595  006B32  0ED0               	movlw	208
  1596  006B34  240F               	addwf	?___wmul,w,c
  1597  006B36  0100               	movlb	0	; () banked
  1598  006B38  6F8A               	movwf	printf@prec& (0+255),b
  1599  006B3A  0EFF               	movlw	255
  1600  006B3C  2010               	addwfc	?___wmul+1,w,c
  1601  006B3E  0100               	movlb	0	; () banked
  1602  006B40  6F8B               	movwf	(printf@prec+1)& (0+255),b
  1603                           
  1604                           ; BSR set to: 0
  1605  006B42  0100               	movlb	0	; () banked
  1606  006B44  4B60               	infsnz	printf@f& (0+255),f,b
  1607  006B46  2B61               	incf	(printf@f+1)& (0+255),f,b
  1608  006B48                     l110:
  1609                           
  1610                           ; BSR set to: 0
  1611                           
  1612                           ; BSR set to: 0
  1613  006B48  C060  FFF6         	movff	printf@f,tblptrl
  1614  006B4C  C061  FFF7         	movff	printf@f+1,tblptrh
  1615  006B50                     	if	0	;tblptru may be non-zero
  1616  006B50                     	endif
  1617  006B50                     	if	0	;tblptru may be non-zero
  1618  006B50                     	endif
  1619  006B50  0008               	tblrd		*
  1620  006B52  50F5               	movf	tablat,w,c
  1621  006B54  EC67  F02B         	call	_isdigit
  1622  006B58  A0D8               	btfss	status,0,c
  1623  006B5A  D016               	goto	l114
  1624  006B5C  D7D7               	goto	l111
  1625  006B5E                     l109:
  1626                           
  1627                           ;doprnt.c: 626: prec = 0;
  1628  006B5E  0E00               	movlw	0
  1629  006B60  0100               	movlb	0	; () banked
  1630  006B62  6F8B               	movwf	(printf@prec+1)& (0+255),b
  1631  006B64  0E00               	movlw	0
  1632  006B66  6F8A               	movwf	printf@prec& (0+255),b
  1633                           
  1634                           ; BSR set to: 0
  1635                           ;doprnt.c: 628: flag |= 0x1000;
  1636  006B68  0100               	movlb	0	; () banked
  1637  006B6A  898D               	bsf	(printf@flag+1)& (0+255),4,b
  1638                           
  1639                           ; BSR set to: 0
  1640                           ;doprnt.c: 630: }
  1641                           ;doprnt.c: 635: switch(c = *f++) {
  1642  006B6C  D00D               	goto	l114
  1643  006B6E                     
  1644                           ; BSR set to: 0
  1645                           ;doprnt.c: 663: flag |= 0x400;
  1646                           
  1647                           ; BSR set to: 0
  1648  006B6E  0100               	movlb	0	; () banked
  1649  006B70  858D               	bsf	(printf@flag+1)& (0+255),2,b
  1650                           
  1651                           ;doprnt.c: 664: break;
  1652  006B72  D02F               	goto	l118
  1653  006B74                     
  1654                           ; BSR set to: 0
  1655                           ;doprnt.c: 670: flag |= 0x20;
  1656                           
  1657                           ; BSR set to: 0
  1658  006B74  0100               	movlb	0	; () banked
  1659  006B76  8B8C               	bsf	printf@flag& (0+255),5,b
  1660  006B78                     l120:
  1661                           
  1662                           ; BSR set to: 0
  1663                           ;doprnt.c: 673: flag |= 0x100;
  1664  006B78  0100               	movlb	0	; () banked
  1665  006B7A  818D               	bsf	(printf@flag+1)& (0+255),0,b
  1666                           
  1667                           ;doprnt.c: 674: break;
  1668  006B7C  D02A               	goto	l118
  1669  006B7E                     
  1670                           ; BSR set to: 0
  1671                           ;doprnt.c: 680: flag |= 0x20;
  1672                           
  1673                           ; BSR set to: 0
  1674  006B7E  0100               	movlb	0	; () banked
  1675  006B80  8B8C               	bsf	printf@flag& (0+255),5,b
  1676  006B82                     l122:
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;doprnt.c: 683: flag |= 0x200;
  1680  006B82  0100               	movlb	0	; () banked
  1681  006B84  838D               	bsf	(printf@flag+1)& (0+255),1,b
  1682                           
  1683                           ; BSR set to: 0
  1684                           ;doprnt.c: 698: case 'i':
  1685                           ;doprnt.c: 699: break;
  1686                           
  1687                           ; BSR set to: 0
  1688                           
  1689                           ;doprnt.c: 697: case 'd':
  1690                           
  1691                           ;doprnt.c: 684: break;
  1692  006B86  D025               	goto	l118
  1693  006B88                     l114:
  1694                           
  1695                           ; BSR set to: 0
  1696  006B88  C060  FFF6         	movff	printf@f,tblptrl
  1697  006B8C  C061  FFF7         	movff	printf@f+1,tblptrh
  1698  006B90  0100               	movlb	0	; () banked
  1699  006B92  4B60               	infsnz	printf@f& (0+255),f,b
  1700  006B94  2B61               	incf	(printf@f+1)& (0+255),f,b
  1701  006B96                     	if	0	;tblptru may be non-zero
  1702  006B96                     	endif
  1703  006B96                     	if	0	;tblptru may be non-zero
  1704  006B96                     	endif
  1705  006B96  0008               	tblrd		*
  1706  006B98  CFF5 F08E          	movff	tablat,printf@c
  1707  006B9C  0100               	movlb	0	; () banked
  1708  006B9E  518E               	movf	printf@c& (0+255),w,b
  1709                           
  1710                           ; Switch size 1, requested type "space"
  1711                           ; Number of cases is 8, Range of values is 0 to 105
  1712                           ; switch strategies available:
  1713                           ; Name         Instructions Cycles
  1714                           ; simple_byte           25    13 (average)
  1715                           ;	Chosen strategy is simple_byte
  1716  006BA0  0A00               	xorlw	0	; case 0
  1717  006BA2  B4D8               	btfsc	status,2,c
  1718  006BA4  0012               	return	
  1719  006BA6  0A45               	xorlw	69	; case 69
  1720  006BA8  B4D8               	btfsc	status,2,c
  1721  006BAA  D7E4               	goto	l119
  1722  006BAC  0A02               	xorlw	2	; case 71
  1723  006BAE  B4D8               	btfsc	status,2,c
  1724  006BB0  D7E6               	goto	l121
  1725  006BB2  0A23               	xorlw	35	; case 100
  1726  006BB4  B4D8               	btfsc	status,2,c
  1727  006BB6  D00D               	goto	l118
  1728  006BB8  0A01               	xorlw	1	; case 101
  1729  006BBA  B4D8               	btfsc	status,2,c
  1730  006BBC  D7DD               	goto	l120
  1731  006BBE  0A03               	xorlw	3	; case 102
  1732  006BC0  B4D8               	btfsc	status,2,c
  1733  006BC2  D7D5               	goto	l117
  1734  006BC4  0A01               	xorlw	1	; case 103
  1735  006BC6  B4D8               	btfsc	status,2,c
  1736  006BC8  D7DC               	goto	l122
  1737  006BCA  0A0E               	xorlw	14	; case 105
  1738  006BCC  A4D8               	btfss	status,2,c
  1739  006BCE  EF4C  F03F         	goto	u4160
  1740  006BD2                     l118:
  1741                           
  1742                           ; BSR set to: 0
  1743                           ;doprnt.c: 825: if(flag & (0x700)) {
  1744                           
  1745                           ; BSR set to: 0
  1746  006BD2  0E07               	movlw	7
  1747  006BD4  0100               	movlb	0	; () banked
  1748  006BD6  158D               	andwf	(printf@flag+1)& (0+255),w,b
  1749  006BD8  B4D8               	btfsc	status,2,c
  1750  006BDA  EFCF  F03D         	goto	l126
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;doprnt.c: 827: if(flag & 0x1000)
  1754  006BDE  0100               	movlb	0	; () banked
  1755  006BE0  A98D               	btfss	(printf@flag+1)& (0+255),4,b
  1756  006BE2  D005               	goto	l127
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;doprnt.c: 829: prec = 6;
  1760  006BE4  0E00               	movlw	0
  1761  006BE6  0100               	movlb	0	; () banked
  1762  006BE8  6F8B               	movwf	(printf@prec+1)& (0+255),b
  1763  006BEA  0E06               	movlw	6
  1764  006BEC  6F8A               	movwf	printf@prec& (0+255),b
  1765  006BEE                     l127:
  1766                           
  1767                           ; BSR set to: 0
  1768                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1769                           
  1770                           ; BSR set to: 0
  1771  006BEE  C079  FFD9         	movff	printf@ap,fsr2l
  1772  006BF2  C07A  FFDA         	movff	printf@ap+1,fsr2h
  1773  006BF6  CFDE F087          	movff	postinc2,printf@fval
  1774  006BFA  CFDE F088          	movff	postinc2,printf@fval+1
  1775  006BFE  CFDD F089          	movff	postdec2,printf@fval+2
  1776                           
  1777                           ; BSR set to: 0
  1778  006C02  0E03               	movlw	3
  1779  006C04  0100               	movlb	0	; () banked
  1780  006C06  2779               	addwf	printf@ap& (0+255),f,b
  1781  006C08  0E00               	movlw	0
  1782  006C0A  237A               	addwfc	(printf@ap+1)& (0+255),f,b
  1783                           
  1784                           ; BSR set to: 0
  1785                           ;doprnt.c: 831: if(fval < 0.0) {
  1786  006C0C  0100               	movlb	0	; () banked
  1787  006C0E  AF89               	btfss	(printf@fval+2)& (0+255),7,b
  1788  006C10  D011               	goto	l128
  1789                           
  1790                           ; BSR set to: 0
  1791                           ;doprnt.c: 832: fval = -fval;
  1792  006C12  C087  F02D         	movff	printf@fval,___ftneg@f1
  1793  006C16  C088  F02E         	movff	printf@fval+1,___ftneg@f1+1
  1794  006C1A  C089  F02F         	movff	printf@fval+2,___ftneg@f1+2
  1795  006C1E  EC76  F02B         	call	___ftneg	;wreg free
  1796  006C22  C02D  F087         	movff	?___ftneg,printf@fval
  1797  006C26  C02E  F088         	movff	?___ftneg+1,printf@fval+1
  1798  006C2A  C02F  F089         	movff	?___ftneg+2,printf@fval+2
  1799                           
  1800                           ;doprnt.c: 833: flag |= 0x03;
  1801  006C2E  0E03               	movlw	3
  1802  006C30  0100               	movlb	0	; () banked
  1803  006C32  138C               	iorwf	printf@flag& (0+255),f,b
  1804  006C34                     l128:
  1805                           
  1806                           ; BSR set to: 0
  1807                           ;doprnt.c: 834: }
  1808                           ;doprnt.c: 835: exp = 0;
  1809                           
  1810                           ; BSR set to: 0
  1811  006C34  0E00               	movlw	0
  1812  006C36  0100               	movlb	0	; () banked
  1813  006C38  6F82               	movwf	(printf@exp+1)& (0+255),b
  1814  006C3A  0E00               	movlw	0
  1815  006C3C  6F81               	movwf	printf@exp& (0+255),b
  1816                           
  1817                           ; BSR set to: 0
  1818                           ;doprnt.c: 836: if( fval!=0) {
  1819  006C3E  0100               	movlb	0	; () banked
  1820  006C40  5187               	movf	printf@fval& (0+255),w,b
  1821  006C42  0100               	movlb	0	; () banked
  1822  006C44  1188               	iorwf	(printf@fval+1)& (0+255),w,b
  1823  006C46  0100               	movlb	0	; () banked
  1824  006C48  1189               	iorwf	(printf@fval+2)& (0+255),w,b
  1825  006C4A  B4D8               	btfsc	status,2,c
  1826  006C4C  D091               	goto	l133
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1830  006C4E  0E82               	movlw	130
  1831  006C50  0100               	movlb	0	; () banked
  1832  006C52  6F67               	movwf	??_printf& (0+255),b
  1833  006C54  0EFF               	movlw	255
  1834  006C56  0100               	movlb	0	; () banked
  1835  006C58  6F68               	movwf	(??_printf+1)& (0+255),b
  1836  006C5A  C087  F069         	movff	printf@fval,??_printf+2
  1837  006C5E  C088  F06A         	movff	printf@fval+1,??_printf+3
  1838  006C62  C089  F06B         	movff	printf@fval+2,??_printf+4
  1839  006C66  C08A  F06C         	movff	printf@fval+3,??_printf+5
  1840  006C6A  0E10               	movlw	16
  1841  006C6C  D006               	goto	u3180
  1842  006C6E                     u3185:
  1843  006C6E  0100               	movlb	0	; () banked
  1844  006C70  90D8               	bcf	status,0,c
  1845  006C72  336C               	rrcf	(??_printf+5)& (0+255),f,b
  1846  006C74  336B               	rrcf	(??_printf+4)& (0+255),f,b
  1847  006C76  336A               	rrcf	(??_printf+3)& (0+255),f,b
  1848  006C78  3369               	rrcf	(??_printf+2)& (0+255),f,b
  1849  006C7A                     u3180:
  1850  006C7A  2EE8               	decfsz	wreg,f,c
  1851  006C7C  D7F8               	goto	u3185
  1852  006C7E  0100               	movlb	0	; () banked
  1853  006C80  5169               	movf	(??_printf+2)& (0+255),w,b
  1854  006C82  0100               	movlb	0	; () banked
  1855  006C84  2567               	addwf	??_printf& (0+255),w,b
  1856  006C86  0100               	movlb	0	; () banked
  1857  006C88  6F81               	movwf	printf@exp& (0+255),b
  1858  006C8A  0E00               	movlw	0
  1859  006C8C  0100               	movlb	0	; () banked
  1860  006C8E  2168               	addwfc	(??_printf+1)& (0+255),w,b
  1861  006C90  0100               	movlb	0	; () banked
  1862  006C92  6F82               	movwf	(printf@exp+1)& (0+255),b
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;doprnt.c: 838: exp--;
  1866  006C94  0100               	movlb	0	; () banked
  1867  006C96  0781               	decf	printf@exp& (0+255),f,b
  1868  006C98  A0D8               	btfss	status,0,c
  1869  006C9A  0782               	decf	(printf@exp+1)& (0+255),f,b
  1870                           
  1871                           ; BSR set to: 0
  1872                           ;doprnt.c: 839: exp *= 3;
  1873  006C9C  C081  F00F         	movff	printf@exp,___wmul@multiplier
  1874  006CA0  C082  F010         	movff	printf@exp+1,___wmul@multiplier+1
  1875  006CA4  0E00               	movlw	0
  1876  006CA6  6E12               	movwf	___wmul@multiplicand+1,c
  1877  006CA8  0E03               	movlw	3
  1878  006CAA  6E11               	movwf	___wmul@multiplicand,c
  1879  006CAC  EC88  F02B         	call	___wmul	;wreg free
  1880  006CB0  C00F  F081         	movff	?___wmul,printf@exp
  1881  006CB4  C010  F082         	movff	?___wmul+1,printf@exp+1
  1882                           
  1883                           ;doprnt.c: 840: exp /= 10;
  1884  006CB8  C081  F007         	movff	printf@exp,___awdiv@dividend
  1885  006CBC  C082  F008         	movff	printf@exp+1,___awdiv@dividend+1
  1886  006CC0  0E00               	movlw	0
  1887  006CC2  6E0A               	movwf	___awdiv@divisor+1,c
  1888  006CC4  0E0A               	movlw	10
  1889  006CC6  6E09               	movwf	___awdiv@divisor,c
  1890  006CC8  EC95  F02C         	call	___awdiv	;wreg free
  1891  006CCC  C007  F081         	movff	?___awdiv,printf@exp
  1892  006CD0  C008  F082         	movff	?___awdiv+1,printf@exp+1
  1893                           
  1894                           ;doprnt.c: 841: if(exp < 0)
  1895  006CD4  0100               	movlb	0	; () banked
  1896  006CD6  AF82               	btfss	(printf@exp+1)& (0+255),7,b
  1897  006CD8  D004               	goto	l130
  1898                           
  1899                           ; BSR set to: 0
  1900                           ;doprnt.c: 842: exp--;
  1901  006CDA  0100               	movlb	0	; () banked
  1902  006CDC  0781               	decf	printf@exp& (0+255),f,b
  1903  006CDE  A0D8               	btfss	status,0,c
  1904  006CE0  0782               	decf	(printf@exp+1)& (0+255),f,b
  1905  006CE2                     l130:
  1906                           
  1907                           ; BSR set to: 0
  1908                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1909                           
  1910                           ; BSR set to: 0
  1911  006CE2  0100               	movlb	0	; () banked
  1912  006CE4  5181               	movf	printf@exp& (0+255),w,b
  1913  006CE6  0800               	sublw	0
  1914  006CE8  ECE2  F032         	call	_scale
  1915  006CEC  C03F  F07B         	movff	?_scale,printf@tmpval
  1916  006CF0  C040  F07C         	movff	?_scale+1,printf@tmpval+1
  1917  006CF4  C041  F07D         	movff	?_scale+2,printf@tmpval+2
  1918                           
  1919                           ;doprnt.c: 847: tmpval.integ *= fval;
  1920  006CF8  C07B  F030         	movff	printf@tmpval,___ftmul@f1
  1921  006CFC  C07C  F031         	movff	printf@tmpval+1,___ftmul@f1+1
  1922  006D00  C07D  F032         	movff	printf@tmpval+2,___ftmul@f1+2
  1923  006D04  C087  F033         	movff	printf@fval,___ftmul@f2
  1924  006D08  C088  F034         	movff	printf@fval+1,___ftmul@f2+1
  1925  006D0C  C089  F035         	movff	printf@fval+2,___ftmul@f2+2
  1926  006D10  EC63  F02E         	call	___ftmul	;wreg free
  1927  006D14  C030  F07B         	movff	?___ftmul,printf@tmpval
  1928  006D18  C031  F07C         	movff	?___ftmul+1,printf@tmpval+1
  1929  006D1C  C032  F07D         	movff	?___ftmul+2,printf@tmpval+2
  1930                           
  1931                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1932  006D20  C07B  F055         	movff	printf@tmpval,___ftge@ff1
  1933  006D24  C07C  F056         	movff	printf@tmpval+1,___ftge@ff1+1
  1934  006D28  C07D  F057         	movff	printf@tmpval+2,___ftge@ff1+2
  1935  006D2C  0E00               	movlw	0
  1936  006D2E  6E58               	movwf	___ftge@ff2,c
  1937  006D30  0E80               	movlw	128
  1938  006D32  6E59               	movwf	___ftge@ff2+1,c
  1939  006D34  0E3F               	movlw	63
  1940  006D36  6E5A               	movwf	___ftge@ff2+2,c
  1941  006D38  ECD7  F02C         	call	___ftge	;wreg free
  1942  006D3C  B0D8               	btfsc	status,0,c
  1943  006D3E  D005               	goto	l131
  1944                           
  1945                           ;doprnt.c: 849: exp--;
  1946  006D40  0100               	movlb	0	; () banked
  1947  006D42  0781               	decf	printf@exp& (0+255),f,b
  1948  006D44  A0D8               	btfss	status,0,c
  1949  006D46  0782               	decf	(printf@exp+1)& (0+255),f,b
  1950  006D48  D013               	goto	l133
  1951  006D4A                     l131:
  1952                           
  1953                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1954                           
  1955                           ; BSR set to: 0
  1956  006D4A  C07B  F055         	movff	printf@tmpval,___ftge@ff1
  1957  006D4E  C07C  F056         	movff	printf@tmpval+1,___ftge@ff1+1
  1958  006D52  C07D  F057         	movff	printf@tmpval+2,___ftge@ff1+2
  1959  006D56  0E00               	movlw	0
  1960  006D58  6E58               	movwf	___ftge@ff2,c
  1961  006D5A  0E20               	movlw	32
  1962  006D5C  6E59               	movwf	___ftge@ff2+1,c
  1963  006D5E  0E41               	movlw	65
  1964  006D60  6E5A               	movwf	___ftge@ff2+2,c
  1965  006D62  ECD7  F02C         	call	___ftge	;wreg free
  1966  006D66  A0D8               	btfss	status,0,c
  1967  006D68  D003               	goto	l133
  1968                           
  1969                           ;doprnt.c: 851: exp++;
  1970  006D6A  0100               	movlb	0	; () banked
  1971  006D6C  4B81               	infsnz	printf@exp& (0+255),f,b
  1972  006D6E  2B82               	incf	(printf@exp+1)& (0+255),f,b
  1973  006D70                     l133:
  1974                           
  1975                           ;doprnt.c: 852: }
  1976                           ;doprnt.c: 854: if(exp <= 0)
  1977                           
  1978                           ; BSR set to: 0
  1979                           
  1980                           ; BSR set to: 0
  1981                           
  1982                           ; BSR set to: 0
  1983  006D70  0100               	movlb	0	; () banked
  1984  006D72  BF82               	btfsc	(printf@exp+1)& (0+255),7,b
  1985  006D74  D007               	goto	u3220
  1986  006D76  0100               	movlb	0	; () banked
  1987  006D78  5182               	movf	(printf@exp+1)& (0+255),w,b
  1988  006D7A  E108               	bnz	l134
  1989  006D7C  0100               	movlb	0	; () banked
  1990  006D7E  0581               	decf	printf@exp& (0+255),w,b
  1991  006D80  B0D8               	btfsc	status,0,c
  1992  006D82  D004               	goto	l134
  1993  006D84                     u3220:
  1994                           
  1995                           ; BSR set to: 0
  1996                           ;doprnt.c: 855: c = 1;
  1997  006D84  0E01               	movlw	1
  1998  006D86  0100               	movlb	0	; () banked
  1999  006D88  6F8E               	movwf	printf@c& (0+255),b
  2000  006D8A  D002               	goto	l135
  2001  006D8C                     l134:
  2002                           
  2003                           ; BSR set to: 0
  2004                           ;doprnt.c: 856: else
  2005                           ;doprnt.c: 857: c = exp;
  2006  006D8C  C081  F08E         	movff	printf@exp,printf@c
  2007  006D90                     l135:
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;doprnt.c: 858: if(
  2011                           ;doprnt.c: 860: flag & 0x100
  2012                           ;doprnt.c: 862: ||
  2013                           ;doprnt.c: 866: flag & 0x200 && (exp < -4 || exp >= (int)prec)
  2014                           ;doprnt.c: 868: ) {
  2015  006D90  0100               	movlb	0	; () banked
  2016  006D92  B18D               	btfsc	(printf@flag+1)& (0+255),0,b
  2017  006D94  D01E               	goto	u3260
  2018                           
  2019                           ; BSR set to: 0
  2020  006D96  0100               	movlb	0	; () banked
  2021  006D98  A38D               	btfss	(printf@flag+1)& (0+255),1,b
  2022  006D9A  D357               	goto	l136
  2023                           
  2024                           ; BSR set to: 0
  2025  006D9C  0100               	movlb	0	; () banked
  2026  006D9E  AF82               	btfss	(printf@exp+1)& (0+255),7,b
  2027  006DA0  D008               	goto	u3250
  2028  006DA2  0EFC               	movlw	252
  2029  006DA4  0100               	movlb	0	; () banked
  2030  006DA6  5D81               	subwf	printf@exp& (0+255),w,b
  2031  006DA8  0EFF               	movlw	255
  2032  006DAA  0100               	movlb	0	; () banked
  2033  006DAC  5982               	subwfb	(printf@exp+1)& (0+255),w,b
  2034  006DAE  A0D8               	btfss	status,0,c
  2035  006DB0  D010               	goto	u3260
  2036  006DB2                     u3250:
  2037                           
  2038                           ; BSR set to: 0
  2039  006DB2  0100               	movlb	0	; () banked
  2040  006DB4  518A               	movf	printf@prec& (0+255),w,b
  2041  006DB6  0100               	movlb	0	; () banked
  2042  006DB8  5D81               	subwf	printf@exp& (0+255),w,b
  2043  006DBA  0100               	movlb	0	; () banked
  2044  006DBC  5182               	movf	(printf@exp+1)& (0+255),w,b
  2045  006DBE  0A80               	xorlw	128
  2046  006DC0  0100               	movlb	0	; () banked
  2047  006DC2  6F67               	movwf	??_printf& (0+255),b
  2048  006DC4  0100               	movlb	0	; () banked
  2049  006DC6  518B               	movf	(printf@prec+1)& (0+255),w,b
  2050  006DC8  0A80               	xorlw	128
  2051  006DCA  0100               	movlb	0	; () banked
  2052  006DCC  5967               	subwfb	??_printf& (0+255),w,b
  2053  006DCE  A0D8               	btfss	status,0,c
  2054  006DD0  D33C               	goto	l136
  2055  006DD2                     u3260:
  2056                           
  2057                           ; BSR set to: 0
  2058                           ;doprnt.c: 870: if(prec && flag & 0x200)
  2059                           
  2060                           ; BSR set to: 0
  2061                           
  2062                           ; BSR set to: 0
  2063  006DD2  0100               	movlb	0	; () banked
  2064  006DD4  518A               	movf	printf@prec& (0+255),w,b
  2065  006DD6  0100               	movlb	0	; () banked
  2066  006DD8  118B               	iorwf	(printf@prec+1)& (0+255),w,b
  2067  006DDA  B4D8               	btfsc	status,2,c
  2068  006DDC  D007               	goto	l141
  2069                           
  2070                           ; BSR set to: 0
  2071  006DDE  0100               	movlb	0	; () banked
  2072  006DE0  A38D               	btfss	(printf@flag+1)& (0+255),1,b
  2073  006DE2  D004               	goto	l141
  2074                           
  2075                           ; BSR set to: 0
  2076                           ;doprnt.c: 871: prec--;
  2077  006DE4  0100               	movlb	0	; () banked
  2078  006DE6  078A               	decf	printf@prec& (0+255),f,b
  2079  006DE8  A0D8               	btfss	status,0,c
  2080  006DEA  078B               	decf	(printf@prec+1)& (0+255),f,b
  2081  006DEC                     l141:
  2082                           
  2083                           ; BSR set to: 0
  2084                           ;doprnt.c: 873: if((unsigned)prec > (sizeof dpowers/sizeof dpowers[0]) - 2)
  2085                           
  2086                           ; BSR set to: 0
  2087  006DEC  0100               	movlb	0	; () banked
  2088  006DEE  518B               	movf	(printf@prec+1)& (0+255),w,b
  2089  006DF0  E105               	bnz	u3290
  2090  006DF2  0E09               	movlw	9
  2091  006DF4  0100               	movlb	0	; () banked
  2092  006DF6  5D8A               	subwf	printf@prec& (0+255),w,b
  2093  006DF8  A0D8               	btfss	status,0,c
  2094  006DFA  D004               	goto	l142
  2095  006DFC                     u3290:
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;doprnt.c: 874: c = (sizeof dpowers/sizeof dpowers[0]) - 2;
  2099  006DFC  0E08               	movlw	8
  2100  006DFE  0100               	movlb	0	; () banked
  2101  006E00  6F8E               	movwf	printf@c& (0+255),b
  2102  006E02  D002               	goto	l143
  2103  006E04                     l142:
  2104                           
  2105                           ; BSR set to: 0
  2106                           ;doprnt.c: 875: else
  2107                           ;doprnt.c: 876: c = prec;
  2108  006E04  C08A  F08E         	movff	printf@prec,printf@c
  2109  006E08                     l143:
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;doprnt.c: 877: if( fval!=0) {
  2113                           
  2114                           ; BSR set to: 0
  2115  006E08  0100               	movlb	0	; () banked
  2116  006E0A  5187               	movf	printf@fval& (0+255),w,b
  2117  006E0C  0100               	movlb	0	; () banked
  2118  006E0E  1188               	iorwf	(printf@fval+1)& (0+255),w,b
  2119  006E10  0100               	movlb	0	; () banked
  2120  006E12  1189               	iorwf	(printf@fval+2)& (0+255),w,b
  2121  006E14  B4D8               	btfsc	status,2,c
  2122  006E16  D0E6               	goto	l148
  2123                           
  2124                           ; BSR set to: 0
  2125                           ;doprnt.c: 878: fval /= scale(exp-c);
  2126  006E18  C087  F046         	movff	printf@fval,___ftdiv@f1
  2127  006E1C  C088  F047         	movff	printf@fval+1,___ftdiv@f1+1
  2128  006E20  C089  F048         	movff	printf@fval+2,___ftdiv@f1+2
  2129  006E24  0100               	movlb	0	; () banked
  2130  006E26  518E               	movf	printf@c& (0+255),w,b
  2131  006E28  0800               	sublw	0
  2132  006E2A  0100               	movlb	0	; () banked
  2133  006E2C  2581               	addwf	printf@exp& (0+255),w,b
  2134  006E2E  ECE2  F032         	call	_scale
  2135  006E32  C03F  F049         	movff	?_scale,___ftdiv@f2
  2136  006E36  C040  F04A         	movff	?_scale+1,___ftdiv@f2+1
  2137  006E3A  C041  F04B         	movff	?_scale+2,___ftdiv@f2+2
  2138  006E3E  EC76  F02D         	call	___ftdiv	;wreg free
  2139  006E42  C046  F087         	movff	?___ftdiv,printf@fval
  2140  006E46  C047  F088         	movff	?___ftdiv+1,printf@fval+1
  2141  006E4A  C048  F089         	movff	?___ftdiv+2,printf@fval+2
  2142                           
  2143                           ;doprnt.c: 893: if(fval - (double)(unsigned long)fval >= 0.5)
  2144  006E4E  C087  F04C         	movff	printf@fval,___ftadd@f2
  2145  006E52  C088  F04D         	movff	printf@fval+1,___ftadd@f2+1
  2146  006E56  C089  F04E         	movff	printf@fval+2,___ftadd@f2+2
  2147  006E5A  C087  F015         	movff	printf@fval,___fttol@f1
  2148  006E5E  C088  F016         	movff	printf@fval+1,___fttol@f1+1
  2149  006E62  C089  F017         	movff	printf@fval+2,___fttol@f1+2
  2150  006E66  ECE9  F02D         	call	___fttol	;wreg free
  2151  006E6A  C015  F024         	movff	?___fttol,___lltoft@c
  2152  006E6E  C016  F025         	movff	?___fttol+1,___lltoft@c+1
  2153  006E72  C017  F026         	movff	?___fttol+2,___lltoft@c+2
  2154  006E76  C018  F027         	movff	?___fttol+3,___lltoft@c+3
  2155  006E7A  ECBB  F02B         	call	___lltoft	;wreg free
  2156  006E7E  C024  F02D         	movff	?___lltoft,___ftneg@f1
  2157  006E82  C025  F02E         	movff	?___lltoft+1,___ftneg@f1+1
  2158  006E86  C026  F02F         	movff	?___lltoft+2,___ftneg@f1+2
  2159  006E8A  EC76  F02B         	call	___ftneg	;wreg free
  2160  006E8E  C02D  F049         	movff	?___ftneg,___ftadd@f1
  2161  006E92  C02E  F04A         	movff	?___ftneg+1,___ftadd@f1+1
  2162  006E96  C02F  F04B         	movff	?___ftneg+2,___ftadd@f1+2
  2163  006E9A  EC0A  F030         	call	___ftadd	;wreg free
  2164  006E9E  C049  F055         	movff	?___ftadd,___ftge@ff1
  2165  006EA2  C04A  F056         	movff	?___ftadd+1,___ftge@ff1+1
  2166  006EA6  C04B  F057         	movff	?___ftadd+2,___ftge@ff1+2
  2167  006EAA  0E00               	movlw	0
  2168  006EAC  6E58               	movwf	___ftge@ff2,c
  2169  006EAE  0E00               	movlw	0
  2170  006EB0  6E59               	movwf	___ftge@ff2+1,c
  2171  006EB2  0E3F               	movlw	63
  2172  006EB4  6E5A               	movwf	___ftge@ff2+2,c
  2173  006EB6  ECD7  F02C         	call	___ftge	;wreg free
  2174  006EBA  A0D8               	btfss	status,0,c
  2175  006EBC  D014               	goto	l145
  2176                           
  2177                           ;doprnt.c: 894: fval += 0.5;
  2178  006EBE  C087  F049         	movff	printf@fval,___ftadd@f1
  2179  006EC2  C088  F04A         	movff	printf@fval+1,___ftadd@f1+1
  2180  006EC6  C089  F04B         	movff	printf@fval+2,___ftadd@f1+2
  2181  006ECA  0E00               	movlw	0
  2182  006ECC  6E4C               	movwf	___ftadd@f2,c
  2183  006ECE  0E00               	movlw	0
  2184  006ED0  6E4D               	movwf	___ftadd@f2+1,c
  2185  006ED2  0E3F               	movlw	63
  2186  006ED4  6E4E               	movwf	___ftadd@f2+2,c
  2187  006ED6  EC0A  F030         	call	___ftadd	;wreg free
  2188  006EDA  C049  F087         	movff	?___ftadd,printf@fval
  2189  006EDE  C04A  F088         	movff	?___ftadd+1,printf@fval+1
  2190  006EE2  C04B  F089         	movff	?___ftadd+2,printf@fval+2
  2191  006EE6                     l145:
  2192                           
  2193                           ;doprnt.c: 895: if((unsigned long)fval >= dpowers[c+1]) {
  2194  006EE6  C08E  F067         	movff	printf@c,??_printf
  2195  006EEA  0100               	movlb	0	; () banked
  2196  006EEC  6B68               	clrf	(??_printf+1)& (0+255),b
  2197  006EEE  BF67               	btfsc	??_printf& (0+255),7,b
  2198  006EF0  0768               	decf	(??_printf+1)& (0+255),f,b
  2199  006EF2  0100               	movlb	0	; () banked
  2200  006EF4  90D8               	bcf	status,0,c
  2201  006EF6  3767               	rlcf	??_printf& (0+255),f,b
  2202  006EF8  3768               	rlcf	(??_printf+1)& (0+255),f,b
  2203  006EFA  0100               	movlb	0	; () banked
  2204  006EFC  90D8               	bcf	status,0,c
  2205  006EFE  3767               	rlcf	??_printf& (0+255),f,b
  2206  006F00  3768               	rlcf	(??_printf+1)& (0+255),f,b
  2207  006F02  0E04               	movlw	4
  2208  006F04  0100               	movlb	0	; () banked
  2209  006F06  2767               	addwf	??_printf& (0+255),f,b
  2210  006F08  0E00               	movlw	0
  2211  006F0A  2368               	addwfc	(??_printf+1)& (0+255),f,b
  2212  006F0C  0EB9               	movlw	low _dpowers
  2213  006F0E  0100               	movlb	0	; () banked
  2214  006F10  2567               	addwf	??_printf& (0+255),w,b
  2215  006F12  6EF6               	movwf	tblptrl,c
  2216  006F14  0E7E               	movlw	high _dpowers
  2217  006F16  2168               	addwfc	(??_printf+1)& (0+255),w,b
  2218  006F18  6EF7               	movwf	tblptrh,c
  2219  006F1A                     	if	0	;There are less than 3 active tblptr bytes
  2220  006F1A                     	endif
  2221  006F1A  C087  F015         	movff	printf@fval,___fttol@f1
  2222  006F1E  C088  F016         	movff	printf@fval+1,___fttol@f1+1
  2223  006F22  C089  F017         	movff	printf@fval+2,___fttol@f1+2
  2224  006F26  ECE9  F02D         	call	___fttol	;wreg free
  2225  006F2A  0009               	tblrd		*+
  2226  006F2C  50F5               	movf	tablat,w,c
  2227  006F2E  5C15               	subwf	?___fttol,w,c
  2228  006F30  0009               	tblrd		*+
  2229  006F32  50F5               	movf	tablat,w,c
  2230  006F34  5816               	subwfb	?___fttol+1,w,c
  2231  006F36  0009               	tblrd		*+
  2232  006F38  50F5               	movf	tablat,w,c
  2233  006F3A  5817               	subwfb	?___fttol+2,w,c
  2234  006F3C  0009               	tblrd		*+
  2235  006F3E  50F5               	movf	tablat,w,c
  2236  006F40  5818               	subwfb	?___fttol+3,w,c
  2237  006F42  A0D8               	btfss	status,0,c
  2238  006F44  D018               	goto	l146
  2239                           
  2240                           ;doprnt.c: 896: fval *= 1e-1;
  2241  006F46  C087  F030         	movff	printf@fval,___ftmul@f1
  2242  006F4A  C088  F031         	movff	printf@fval+1,___ftmul@f1+1
  2243  006F4E  C089  F032         	movff	printf@fval+2,___ftmul@f1+2
  2244  006F52  0ECD               	movlw	205
  2245  006F54  6E33               	movwf	___ftmul@f2,c
  2246  006F56  0ECC               	movlw	204
  2247  006F58  6E34               	movwf	___ftmul@f2+1,c
  2248  006F5A  0E3D               	movlw	61
  2249  006F5C  6E35               	movwf	___ftmul@f2+2,c
  2250  006F5E  EC63  F02E         	call	___ftmul	;wreg free
  2251  006F62  C030  F087         	movff	?___ftmul,printf@fval
  2252  006F66  C031  F088         	movff	?___ftmul+1,printf@fval+1
  2253  006F6A  C032  F089         	movff	?___ftmul+2,printf@fval+2
  2254                           
  2255                           ;doprnt.c: 897: exp++;
  2256  006F6E  0100               	movlb	0	; () banked
  2257  006F70  4B81               	infsnz	printf@exp& (0+255),f,b
  2258  006F72  2B82               	incf	(printf@exp+1)& (0+255),f,b
  2259                           
  2260                           ;doprnt.c: 898: } else if((unsigned long)fval < dpowers[c]) {
  2261  006F74  D037               	goto	l148
  2262  006F76                     l146:
  2263                           
  2264                           ; BSR set to: 0
  2265  006F76  0100               	movlb	0	; () banked
  2266  006F78  518E               	movf	printf@c& (0+255),w,b
  2267  006F7A  0D04               	mullw	4
  2268  006F7C  0EB9               	movlw	low _dpowers
  2269  006F7E  24F3               	addwf	prodl,w,c
  2270  006F80  6EF6               	movwf	tblptrl,c
  2271  006F82  0E7E               	movlw	high _dpowers
  2272  006F84  20F4               	addwfc	prodh,w,c
  2273  006F86  6EF7               	movwf	tblptrh,c
  2274  006F88                     	if	0	;There are less than 3 active tblptr bytes
  2275  006F88                     	endif
  2276  006F88  C087  F015         	movff	printf@fval,___fttol@f1
  2277  006F8C  C088  F016         	movff	printf@fval+1,___fttol@f1+1
  2278  006F90  C089  F017         	movff	printf@fval+2,___fttol@f1+2
  2279  006F94  ECE9  F02D         	call	___fttol	;wreg free
  2280  006F98  0009               	tblrd		*+
  2281  006F9A  50F5               	movf	tablat,w,c
  2282  006F9C  5C15               	subwf	?___fttol,w,c
  2283  006F9E  0009               	tblrd		*+
  2284  006FA0  50F5               	movf	tablat,w,c
  2285  006FA2  5816               	subwfb	?___fttol+1,w,c
  2286  006FA4  0009               	tblrd		*+
  2287  006FA6  50F5               	movf	tablat,w,c
  2288  006FA8  5817               	subwfb	?___fttol+2,w,c
  2289  006FAA  0009               	tblrd		*+
  2290  006FAC  50F5               	movf	tablat,w,c
  2291  006FAE  5818               	subwfb	?___fttol+3,w,c
  2292  006FB0  B0D8               	btfsc	status,0,c
  2293  006FB2  D018               	goto	l148
  2294                           
  2295                           ;doprnt.c: 899: fval *= 10.0;
  2296  006FB4  C087  F030         	movff	printf@fval,___ftmul@f1
  2297  006FB8  C088  F031         	movff	printf@fval+1,___ftmul@f1+1
  2298  006FBC  C089  F032         	movff	printf@fval+2,___ftmul@f1+2
  2299  006FC0  0E00               	movlw	0
  2300  006FC2  6E33               	movwf	___ftmul@f2,c
  2301  006FC4  0E20               	movlw	32
  2302  006FC6  6E34               	movwf	___ftmul@f2+1,c
  2303  006FC8  0E41               	movlw	65
  2304  006FCA  6E35               	movwf	___ftmul@f2+2,c
  2305  006FCC  EC63  F02E         	call	___ftmul	;wreg free
  2306  006FD0  C030  F087         	movff	?___ftmul,printf@fval
  2307  006FD4  C031  F088         	movff	?___ftmul+1,printf@fval+1
  2308  006FD8  C032  F089         	movff	?___ftmul+2,printf@fval+2
  2309                           
  2310                           ;doprnt.c: 900: exp--;
  2311  006FDC  0100               	movlb	0	; () banked
  2312  006FDE  0781               	decf	printf@exp& (0+255),f,b
  2313  006FE0  A0D8               	btfss	status,0,c
  2314  006FE2  0782               	decf	(printf@exp+1)& (0+255),f,b
  2315  006FE4                     l148:
  2316                           
  2317                           ;doprnt.c: 901: }
  2318                           ;doprnt.c: 903: }
  2319                           ;doprnt.c: 905: if(flag & 0x200 && !(flag & 0x800)) {
  2320                           
  2321                           ; BSR set to: 0
  2322                           
  2323                           ; BSR set to: 0
  2324                           
  2325                           ; BSR set to: 0
  2326  006FE4  0100               	movlb	0	; () banked
  2327  006FE6  A38D               	btfss	(printf@flag+1)& (0+255),1,b
  2328  006FE8  D092               	goto	l156
  2329                           
  2330                           ; BSR set to: 0
  2331  006FEA  0100               	movlb	0	; () banked
  2332  006FEC  B78D               	btfsc	(printf@flag+1)& (0+255),3,b
  2333  006FEE  D08F               	goto	l156
  2334                           
  2335                           ; BSR set to: 0
  2336                           ;doprnt.c: 906: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])))
  2337  006FF0  0100               	movlb	0	; () banked
  2338  006FF2  BF8B               	btfsc	(printf@prec+1)& (0+255),7,b
  2339  006FF4  D00D               	goto	l150
  2340  006FF6  0100               	movlb	0	; () banked
  2341  006FF8  518B               	movf	(printf@prec+1)& (0+255),w,b
  2342  006FFA  E105               	bnz	u3360
  2343  006FFC  0E0B               	movlw	11
  2344  006FFE  0100               	movlb	0	; () banked
  2345  007000  5D8A               	subwf	printf@prec& (0+255),w,b
  2346  007002  A0D8               	btfss	status,0,c
  2347  007004  D005               	goto	l150
  2348  007006                     u3360:
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;doprnt.c: 907: prec = (sizeof dpowers/sizeof dpowers[0]);
  2352  007006  0E00               	movlw	0
  2353  007008  0100               	movlb	0	; () banked
  2354  00700A  6F8B               	movwf	(printf@prec+1)& (0+255),b
  2355  00700C  0E0A               	movlw	10
  2356  00700E  6F8A               	movwf	printf@prec& (0+255),b
  2357  007010                     l150:
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;doprnt.c: 915: val = (unsigned long)fval;
  2361                           
  2362                           ; BSR set to: 0
  2363  007010  C087  F015         	movff	printf@fval,___fttol@f1
  2364  007014  C088  F016         	movff	printf@fval+1,___fttol@f1+1
  2365  007018  C089  F017         	movff	printf@fval+2,___fttol@f1+2
  2366  00701C  ECE9  F02D         	call	___fttol	;wreg free
  2367  007020  C015  F083         	movff	?___fttol,printf@val
  2368  007024  C016  F084         	movff	?___fttol+1,printf@val+1
  2369  007028  C017  F085         	movff	?___fttol+2,printf@val+2
  2370  00702C  C018  F086         	movff	?___fttol+3,printf@val+3
  2371                           
  2372                           ;doprnt.c: 916: while(val && val % 10 == 0) {
  2373  007030  D01E               	goto	l151
  2374  007032                     
  2375                           ;doprnt.c: 917: prec--;
  2376  007032  0100               	movlb	0	; () banked
  2377  007034  078A               	decf	printf@prec& (0+255),f,b
  2378  007036  A0D8               	btfss	status,0,c
  2379  007038  078B               	decf	(printf@prec+1)& (0+255),f,b
  2380                           
  2381                           ; BSR set to: 0
  2382                           ;doprnt.c: 918: val /= 10;
  2383  00703A  C083  F001         	movff	printf@val,___lldiv@dividend
  2384  00703E  C084  F002         	movff	printf@val+1,___lldiv@dividend+1
  2385  007042  C085  F003         	movff	printf@val+2,___lldiv@dividend+2
  2386  007046  C086  F004         	movff	printf@val+3,___lldiv@dividend+3
  2387  00704A  0E0A               	movlw	10
  2388  00704C  6E05               	movwf	___lldiv@divisor,c
  2389  00704E  0E00               	movlw	0
  2390  007050  6E06               	movwf	___lldiv@divisor+1,c
  2391  007052  0E00               	movlw	0
  2392  007054  6E07               	movwf	___lldiv@divisor+2,c
  2393  007056  0E00               	movlw	0
  2394  007058  6E08               	movwf	___lldiv@divisor+3,c
  2395  00705A  EC54  F02C         	call	___lldiv	;wreg free
  2396  00705E  C001  F083         	movff	?___lldiv,printf@val
  2397  007062  C002  F084         	movff	?___lldiv+1,printf@val+1
  2398  007066  C003  F085         	movff	?___lldiv+2,printf@val+2
  2399  00706A  C004  F086         	movff	?___lldiv+3,printf@val+3
  2400  00706E                     l151:
  2401  00706E  0100               	movlb	0	; () banked
  2402  007070  5183               	movf	printf@val& (0+255),w,b
  2403  007072  0100               	movlb	0	; () banked
  2404  007074  1184               	iorwf	(printf@val+1)& (0+255),w,b
  2405  007076  0100               	movlb	0	; () banked
  2406  007078  1185               	iorwf	(printf@val+2)& (0+255),w,b
  2407  00707A  0100               	movlb	0	; () banked
  2408  00707C  1186               	iorwf	(printf@val+3)& (0+255),w,b
  2409  00707E  B4D8               	btfsc	status,2,c
  2410  007080  D018               	goto	u3380
  2411                           
  2412                           ; BSR set to: 0
  2413  007082  C083  F00E         	movff	printf@val,___llmod@dividend
  2414  007086  C084  F00F         	movff	printf@val+1,___llmod@dividend+1
  2415  00708A  C085  F010         	movff	printf@val+2,___llmod@dividend+2
  2416  00708E  C086  F011         	movff	printf@val+3,___llmod@dividend+3
  2417  007092  0E0A               	movlw	10
  2418  007094  6E12               	movwf	___llmod@divisor,c
  2419  007096  0E00               	movlw	0
  2420  007098  6E13               	movwf	___llmod@divisor+1,c
  2421  00709A  0E00               	movlw	0
  2422  00709C  6E14               	movwf	___llmod@divisor+2,c
  2423  00709E  0E00               	movlw	0
  2424  0070A0  6E15               	movwf	___llmod@divisor+3,c
  2425  0070A2  ECE9  F02B         	call	___llmod	;wreg free
  2426  0070A6  500E               	movf	?___llmod,w,c
  2427  0070A8  100F               	iorwf	?___llmod+1,w,c
  2428  0070AA  1010               	iorwf	?___llmod+2,w,c
  2429  0070AC  1011               	iorwf	?___llmod+3,w,c
  2430  0070AE  B4D8               	btfsc	status,2,c
  2431  0070B0  D7C0               	goto	l152
  2432  0070B2                     u3380:
  2433                           
  2434                           ;doprnt.c: 919: }
  2435                           ;doprnt.c: 921: if(prec < c) {
  2436  0070B2  0100               	movlb	0	; () banked
  2437  0070B4  518B               	movf	(printf@prec+1)& (0+255),w,b
  2438  0070B6  0A80               	xorlw	128
  2439  0070B8  0100               	movlb	0	; () banked
  2440  0070BA  6F67               	movwf	??_printf& (0+255),b
  2441  0070BC  0100               	movlb	0	; () banked
  2442  0070BE  518E               	movf	printf@c& (0+255),w,b
  2443  0070C0  0100               	movlb	0	; () banked
  2444  0070C2  5D8A               	subwf	printf@prec& (0+255),w,b
  2445  0070C4  0E80               	movlw	128
  2446  0070C6  0100               	movlb	0	; () banked
  2447  0070C8  BF8E               	btfsc	printf@c& (0+255),7,b
  2448  0070CA  0E7F               	movlw	127
  2449  0070CC  0100               	movlb	0	; () banked
  2450  0070CE  5967               	subwfb	??_printf& (0+255),w,b
  2451  0070D0  B0D8               	btfsc	status,0,c
  2452  0070D2  D01D               	goto	l156
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;doprnt.c: 922: fval /= scale(c-prec);
  2456  0070D4  C087  F046         	movff	printf@fval,___ftdiv@f1
  2457  0070D8  C088  F047         	movff	printf@fval+1,___ftdiv@f1+1
  2458  0070DC  C089  F048         	movff	printf@fval+2,___ftdiv@f1+2
  2459  0070E0  0100               	movlb	0	; () banked
  2460  0070E2  518A               	movf	printf@prec& (0+255),w,b
  2461  0070E4  0800               	sublw	0
  2462  0070E6  0100               	movlb	0	; () banked
  2463  0070E8  258E               	addwf	printf@c& (0+255),w,b
  2464  0070EA  ECE2  F032         	call	_scale
  2465  0070EE  C03F  F049         	movff	?_scale,___ftdiv@f2
  2466  0070F2  C040  F04A         	movff	?_scale+1,___ftdiv@f2+1
  2467  0070F6  C041  F04B         	movff	?_scale+2,___ftdiv@f2+2
  2468  0070FA  EC76  F02D         	call	___ftdiv	;wreg free
  2469  0070FE  C046  F087         	movff	?___ftdiv,printf@fval
  2470  007102  C047  F088         	movff	?___ftdiv+1,printf@fval+1
  2471  007106  C048  F089         	movff	?___ftdiv+2,printf@fval+2
  2472                           
  2473                           ;doprnt.c: 923: c = prec;
  2474  00710A  C08A  F08E         	movff	printf@prec,printf@c
  2475  00710E                     l156:
  2476                           
  2477                           ;doprnt.c: 924: }
  2478                           ;doprnt.c: 926: }
  2479                           ;doprnt.c: 929: width -= prec + 5;
  2480  00710E  0E05               	movlw	5
  2481  007110  0100               	movlb	0	; () banked
  2482  007112  258A               	addwf	printf@prec& (0+255),w,b
  2483  007114  0100               	movlb	0	; () banked
  2484  007116  6F67               	movwf	??_printf& (0+255),b
  2485  007118  0E00               	movlw	0
  2486  00711A  0100               	movlb	0	; () banked
  2487  00711C  218B               	addwfc	(printf@prec+1)& (0+255),w,b
  2488  00711E  0100               	movlb	0	; () banked
  2489  007120  6F68               	movwf	(??_printf+1)& (0+255),b
  2490  007122  0100               	movlb	0	; () banked
  2491  007124  5167               	movf	??_printf& (0+255),w,b
  2492  007126  0100               	movlb	0	; () banked
  2493  007128  5F7F               	subwf	printf@width& (0+255),f,b
  2494  00712A  0100               	movlb	0	; () banked
  2495  00712C  5168               	movf	(??_printf+1)& (0+255),w,b
  2496  00712E  0100               	movlb	0	; () banked
  2497  007130  5B80               	subwfb	(printf@width+1)& (0+255),f,b
  2498                           
  2499                           ; BSR set to: 0
  2500                           ;doprnt.c: 931: if(prec || flag & 0x800)
  2501  007132  0100               	movlb	0	; () banked
  2502  007134  518A               	movf	printf@prec& (0+255),w,b
  2503  007136  0100               	movlb	0	; () banked
  2504  007138  118B               	iorwf	(printf@prec+1)& (0+255),w,b
  2505  00713A  A4D8               	btfss	status,2,c
  2506  00713C  D003               	goto	u3410
  2507                           
  2508                           ; BSR set to: 0
  2509  00713E  0100               	movlb	0	; () banked
  2510  007140  A78D               	btfss	(printf@flag+1)& (0+255),3,b
  2511  007142  D004               	goto	l157
  2512  007144                     u3410:
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;doprnt.c: 932: width--;
  2516                           
  2517                           ; BSR set to: 0
  2518  007144  0100               	movlb	0	; () banked
  2519  007146  077F               	decf	printf@width& (0+255),f,b
  2520  007148  A0D8               	btfss	status,0,c
  2521  00714A  0780               	decf	(printf@width+1)& (0+255),f,b
  2522  00714C                     l157:
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;doprnt.c: 934: if(flag & 0x03)
  2526                           
  2527                           ; BSR set to: 0
  2528  00714C  0E03               	movlw	3
  2529  00714E  0100               	movlb	0	; () banked
  2530  007150  158C               	andwf	printf@flag& (0+255),w,b
  2531  007152  0100               	movlb	0	; () banked
  2532  007154  6F67               	movwf	??_printf& (0+255),b
  2533  007156  0E00               	movlw	0
  2534  007158  0100               	movlb	0	; () banked
  2535  00715A  158D               	andwf	(printf@flag+1)& (0+255),w,b
  2536  00715C  0100               	movlb	0	; () banked
  2537  00715E  6F68               	movwf	(??_printf+1)& (0+255),b
  2538  007160  0100               	movlb	0	; () banked
  2539  007162  5167               	movf	??_printf& (0+255),w,b
  2540  007164  0100               	movlb	0	; () banked
  2541  007166  1168               	iorwf	(??_printf+1)& (0+255),w,b
  2542  007168  B4D8               	btfsc	status,2,c
  2543  00716A  D004               	goto	l160
  2544                           
  2545                           ; BSR set to: 0
  2546                           ;doprnt.c: 935: width--;
  2547  00716C  0100               	movlb	0	; () banked
  2548  00716E  077F               	decf	printf@width& (0+255),f,b
  2549  007170  A0D8               	btfss	status,0,c
  2550  007172  0780               	decf	(printf@width+1)& (0+255),f,b
  2551  007174                     l160:
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;doprnt.c: 959: {
  2555                           ;doprnt.c: 962: if(!(flag & 0x08))
  2556                           
  2557                           ; BSR set to: 0
  2558  007174  0100               	movlb	0	; () banked
  2559  007176  A78C               	btfss	printf@flag& (0+255),3,b
  2560  007178  D008               	goto	l162
  2561  00717A  D011               	goto	u3440
  2562  00717C                     l2938:
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;doprnt.c: 965: (putch(' ') );
  2566  00717C  0E20               	movlw	32
  2567  00717E  EC55  F02B         	call	_putch
  2568                           
  2569                           ;doprnt.c: 966: width--;
  2570  007182  0100               	movlb	0	; () banked
  2571  007184  077F               	decf	printf@width& (0+255),f,b
  2572  007186  A0D8               	btfss	status,0,c
  2573  007188  0780               	decf	(printf@width+1)& (0+255),f,b
  2574  00718A                     l162:
  2575                           
  2576                           ; BSR set to: 0
  2577                           
  2578                           ; BSR set to: 0
  2579  00718A  0100               	movlb	0	; () banked
  2580  00718C  BF80               	btfsc	(printf@width+1)& (0+255),7,b
  2581  00718E  D007               	goto	u3440
  2582  007190  0100               	movlb	0	; () banked
  2583  007192  5180               	movf	(printf@width+1)& (0+255),w,b
  2584  007194  E1F3               	bnz	l2938
  2585  007196  0100               	movlb	0	; () banked
  2586  007198  057F               	decf	printf@width& (0+255),w,b
  2587  00719A  B0D8               	btfsc	status,0,c
  2588  00719C  D7EF               	goto	l163
  2589  00719E                     u3440:
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;doprnt.c: 967: }
  2593                           ;doprnt.c: 970: if(flag & 0x02)
  2594                           
  2595                           ; BSR set to: 0
  2596  00719E  0100               	movlb	0	; () banked
  2597  0071A0  A38C               	btfss	printf@flag& (0+255),1,b
  2598  0071A2  D012               	goto	l165
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;doprnt.c: 971: (putch(flag & 0x01 ? '-' : '+') );
  2602  0071A4  0100               	movlb	0	; () banked
  2603  0071A6  B18C               	btfsc	printf@flag& (0+255),0,b
  2604  0071A8  D005               	goto	l167
  2605                           
  2606                           ; BSR set to: 0
  2607  0071AA  0E00               	movlw	0
  2608  0071AC  0100               	movlb	0	; () banked
  2609  0071AE  6F71               	movwf	(_printf$131+1)& (0+255),b
  2610  0071B0  0E2B               	movlw	43
  2611  0071B2  D004               	goto	L4
  2612  0071B4                     l167:
  2613                           
  2614                           ; BSR set to: 0
  2615                           
  2616                           ; BSR set to: 0
  2617  0071B4  0E00               	movlw	0
  2618  0071B6  0100               	movlb	0	; () banked
  2619  0071B8  6F71               	movwf	(_printf$131+1)& (0+255),b
  2620  0071BA  0E2D               	movlw	45
  2621  0071BC                     L4:
  2622  0071BC  6F70               	movwf	_printf$131& (0+255),b
  2623                           
  2624                           ; BSR set to: 0
  2625                           
  2626                           ; BSR set to: 0
  2627  0071BE  0100               	movlb	0	; () banked
  2628  0071C0  5170               	movf	_printf$131& (0+255),w,b
  2629  0071C2  EC55  F02B         	call	_putch
  2630  0071C6  D006               	goto	l171
  2631  0071C8                     l165:
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;doprnt.c: 977: else if(flag & 0x01)
  2635  0071C8  0100               	movlb	0	; () banked
  2636  0071CA  A18C               	btfss	printf@flag& (0+255),0,b
  2637  0071CC  D003               	goto	l171
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;doprnt.c: 978: (putch(' ') );
  2641  0071CE  0E20               	movlw	32
  2642  0071D0  EC55  F02B         	call	_putch
  2643  0071D4                     l171:
  2644                           
  2645                           ;doprnt.c: 980: }
  2646                           ;doprnt.c: 985: val = (unsigned long)fval;
  2647  0071D4  C087  F015         	movff	printf@fval,___fttol@f1
  2648  0071D8  C088  F016         	movff	printf@fval+1,___fttol@f1+1
  2649  0071DC  C089  F017         	movff	printf@fval+2,___fttol@f1+2
  2650  0071E0  ECE9  F02D         	call	___fttol	;wreg free
  2651  0071E4  C015  F083         	movff	?___fttol,printf@val
  2652  0071E8  C016  F084         	movff	?___fttol+1,printf@val+1
  2653  0071EC  C017  F085         	movff	?___fttol+2,printf@val+2
  2654  0071F0  C018  F086         	movff	?___fttol+3,printf@val+3
  2655                           
  2656                           ;doprnt.c: 986: (putch(val/dpowers[c] + '0') );
  2657  0071F4  C083  F001         	movff	printf@val,___lldiv@dividend
  2658  0071F8  C084  F002         	movff	printf@val+1,___lldiv@dividend+1
  2659  0071FC  C085  F003         	movff	printf@val+2,___lldiv@dividend+2
  2660  007200  C086  F004         	movff	printf@val+3,___lldiv@dividend+3
  2661  007204  0100               	movlb	0	; () banked
  2662  007206  518E               	movf	printf@c& (0+255),w,b
  2663  007208  0D04               	mullw	4
  2664  00720A  0EB9               	movlw	low _dpowers
  2665  00720C  24F3               	addwf	prodl,w,c
  2666  00720E  6EF6               	movwf	tblptrl,c
  2667  007210  0E7E               	movlw	high _dpowers
  2668  007212  20F4               	addwfc	prodh,w,c
  2669  007214  6EF7               	movwf	tblptrh,c
  2670  007216                     	if	0	;There are less than 3 active tblptr bytes
  2671  007216                     	endif
  2672  007216  0009               	tblrd		*+
  2673  007218  CFF5 F005          	movff	tablat,___lldiv@divisor
  2674  00721C  0009               	tblrd		*+
  2675  00721E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2676  007222  0009               	tblrd		*+
  2677  007224  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2678  007228  000A               	tblrd		*-
  2679  00722A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2680  00722E  EC54  F02C         	call	___lldiv	;wreg free
  2681  007232  5001               	movf	?___lldiv,w,c
  2682  007234  0F30               	addlw	48
  2683  007236  EC55  F02B         	call	_putch
  2684                           
  2685                           ;doprnt.c: 987: val %= dpowers[c];
  2686  00723A  C083  F00E         	movff	printf@val,___llmod@dividend
  2687  00723E  C084  F00F         	movff	printf@val+1,___llmod@dividend+1
  2688  007242  C085  F010         	movff	printf@val+2,___llmod@dividend+2
  2689  007246  C086  F011         	movff	printf@val+3,___llmod@dividend+3
  2690  00724A  0100               	movlb	0	; () banked
  2691  00724C  518E               	movf	printf@c& (0+255),w,b
  2692  00724E  0D04               	mullw	4
  2693  007250  0EB9               	movlw	low _dpowers
  2694  007252  24F3               	addwf	prodl,w,c
  2695  007254  6EF6               	movwf	tblptrl,c
  2696  007256  0E7E               	movlw	high _dpowers
  2697  007258  20F4               	addwfc	prodh,w,c
  2698  00725A  6EF7               	movwf	tblptrh,c
  2699  00725C                     	if	0	;There are less than 3 active tblptr bytes
  2700  00725C                     	endif
  2701  00725C  0009               	tblrd		*+
  2702  00725E  CFF5 F012          	movff	tablat,___llmod@divisor
  2703  007262  0009               	tblrd		*+
  2704  007264  CFF5 F013          	movff	tablat,___llmod@divisor+1
  2705  007268  0009               	tblrd		*+
  2706  00726A  CFF5 F014          	movff	tablat,___llmod@divisor+2
  2707  00726E  000A               	tblrd		*-
  2708  007270  CFF5 F015          	movff	tablat,___llmod@divisor+3
  2709  007274  ECE9  F02B         	call	___llmod	;wreg free
  2710  007278  C00E  F083         	movff	?___llmod,printf@val
  2711  00727C  C00F  F084         	movff	?___llmod+1,printf@val+1
  2712  007280  C010  F085         	movff	?___llmod+2,printf@val+2
  2713  007284  C011  F086         	movff	?___llmod+3,printf@val+3
  2714                           
  2715                           ;doprnt.c: 990: if(prec || flag & 0x800)
  2716  007288  0100               	movlb	0	; () banked
  2717  00728A  518A               	movf	printf@prec& (0+255),w,b
  2718  00728C  0100               	movlb	0	; () banked
  2719  00728E  118B               	iorwf	(printf@prec+1)& (0+255),w,b
  2720  007290  A4D8               	btfss	status,2,c
  2721  007292  D003               	goto	u3490
  2722                           
  2723                           ; BSR set to: 0
  2724  007294  0100               	movlb	0	; () banked
  2725  007296  A78D               	btfss	(printf@flag+1)& (0+255),3,b
  2726  007298  D084               	goto	u3530
  2727  00729A                     u3490:
  2728                           
  2729                           ; BSR set to: 0
  2730                           ;doprnt.c: 994: {
  2731                           ;doprnt.c: 995: (putch('.') );
  2732                           
  2733                           ; BSR set to: 0
  2734  00729A  0E2E               	movlw	46
  2735  00729C  EC55  F02B         	call	_putch
  2736                           
  2737                           ;doprnt.c: 996: prec -= c;
  2738  0072A0  0100               	movlb	0	; () banked
  2739  0072A2  518E               	movf	printf@c& (0+255),w,b
  2740  0072A4  0100               	movlb	0	; () banked
  2741  0072A6  5F8A               	subwf	printf@prec& (0+255),f,b
  2742  0072A8  0E00               	movlw	0
  2743  0072AA  0100               	movlb	0	; () banked
  2744  0072AC  BF8E               	btfsc	printf@c& (0+255),7,b
  2745  0072AE  0EFF               	movlw	255
  2746  0072B0  0100               	movlb	0	; () banked
  2747  0072B2  5B8B               	subwfb	(printf@prec+1)& (0+255),f,b
  2748                           
  2749                           ;doprnt.c: 997: while(c--) {
  2750  0072B4  D062               	goto	l175
  2751  0072B6                     l176:
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;doprnt.c: 1002: if(flag & 0x200 && val == 0) {
  2755  0072B6  0100               	movlb	0	; () banked
  2756  0072B8  A38D               	btfss	(printf@flag+1)& (0+255),1,b
  2757  0072BA  D015               	goto	l177
  2758                           
  2759                           ; BSR set to: 0
  2760  0072BC  0100               	movlb	0	; () banked
  2761  0072BE  5183               	movf	printf@val& (0+255),w,b
  2762  0072C0  0100               	movlb	0	; () banked
  2763  0072C2  1184               	iorwf	(printf@val+1)& (0+255),w,b
  2764  0072C4  0100               	movlb	0	; () banked
  2765  0072C6  1185               	iorwf	(printf@val+2)& (0+255),w,b
  2766  0072C8  0100               	movlb	0	; () banked
  2767  0072CA  1186               	iorwf	(printf@val+3)& (0+255),w,b
  2768  0072CC  A4D8               	btfss	status,2,c
  2769  0072CE  D00B               	goto	l177
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;doprnt.c: 1003: prec = c = 0;
  2773  0072D0  0E00               	movlw	0
  2774  0072D2  0100               	movlb	0	; () banked
  2775  0072D4  6F8E               	movwf	printf@c& (0+255),b
  2776  0072D6  0100               	movlb	0	; () banked
  2777  0072D8  518E               	movf	printf@c& (0+255),w,b
  2778  0072DA  0100               	movlb	0	; () banked
  2779  0072DC  6F8A               	movwf	printf@prec& (0+255),b
  2780  0072DE  6B8B               	clrf	(printf@prec+1)& (0+255),b
  2781  0072E0  BF8A               	btfsc	printf@prec& (0+255),7,b
  2782  0072E2  078B               	decf	(printf@prec+1)& (0+255),f,b
  2783                           
  2784                           ;doprnt.c: 1004: break;
  2785  0072E4  D058               	goto	l179
  2786  0072E6                     l177:
  2787                           
  2788                           ; BSR set to: 0
  2789                           ;doprnt.c: 1005: }
  2790                           ;doprnt.c: 1007: (putch('0' + (val/dpowers[c])) );
  2791                           
  2792                           ; BSR set to: 0
  2793  0072E6  C083  F001         	movff	printf@val,___lldiv@dividend
  2794  0072EA  C084  F002         	movff	printf@val+1,___lldiv@dividend+1
  2795  0072EE  C085  F003         	movff	printf@val+2,___lldiv@dividend+2
  2796  0072F2  C086  F004         	movff	printf@val+3,___lldiv@dividend+3
  2797  0072F6  0100               	movlb	0	; () banked
  2798  0072F8  518E               	movf	printf@c& (0+255),w,b
  2799  0072FA  0D04               	mullw	4
  2800  0072FC  0EB9               	movlw	low _dpowers
  2801  0072FE  24F3               	addwf	prodl,w,c
  2802  007300  6EF6               	movwf	tblptrl,c
  2803  007302  0E7E               	movlw	high _dpowers
  2804  007304  20F4               	addwfc	prodh,w,c
  2805  007306  6EF7               	movwf	tblptrh,c
  2806  007308                     	if	0	;There are less than 3 active tblptr bytes
  2807  007308                     	endif
  2808  007308  0009               	tblrd		*+
  2809  00730A  CFF5 F005          	movff	tablat,___lldiv@divisor
  2810  00730E  0009               	tblrd		*+
  2811  007310  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2812  007314  0009               	tblrd		*+
  2813  007316  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2814  00731A  000A               	tblrd		*-
  2815  00731C  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2816  007320  EC54  F02C         	call	___lldiv	;wreg free
  2817  007324  5001               	movf	?___lldiv,w,c
  2818  007326  0F30               	addlw	48
  2819  007328  EC55  F02B         	call	_putch
  2820                           
  2821                           ;doprnt.c: 1008: val %= dpowers[c];
  2822  00732C  C083  F00E         	movff	printf@val,___llmod@dividend
  2823  007330  C084  F00F         	movff	printf@val+1,___llmod@dividend+1
  2824  007334  C085  F010         	movff	printf@val+2,___llmod@dividend+2
  2825  007338  C086  F011         	movff	printf@val+3,___llmod@dividend+3
  2826  00733C  0100               	movlb	0	; () banked
  2827  00733E  518E               	movf	printf@c& (0+255),w,b
  2828  007340  0D04               	mullw	4
  2829  007342  0EB9               	movlw	low _dpowers
  2830  007344  24F3               	addwf	prodl,w,c
  2831  007346  6EF6               	movwf	tblptrl,c
  2832  007348  0E7E               	movlw	high _dpowers
  2833  00734A  20F4               	addwfc	prodh,w,c
  2834  00734C  6EF7               	movwf	tblptrh,c
  2835  00734E                     	if	0	;There are less than 3 active tblptr bytes
  2836  00734E                     	endif
  2837  00734E  0009               	tblrd		*+
  2838  007350  CFF5 F012          	movff	tablat,___llmod@divisor
  2839  007354  0009               	tblrd		*+
  2840  007356  CFF5 F013          	movff	tablat,___llmod@divisor+1
  2841  00735A  0009               	tblrd		*+
  2842  00735C  CFF5 F014          	movff	tablat,___llmod@divisor+2
  2843  007360  000A               	tblrd		*-
  2844  007362  CFF5 F015          	movff	tablat,___llmod@divisor+3
  2845  007366  ECE9  F02B         	call	___llmod	;wreg free
  2846  00736A  C00E  F083         	movff	?___llmod,printf@val
  2847  00736E  C00F  F084         	movff	?___llmod+1,printf@val+1
  2848  007372  C010  F085         	movff	?___llmod+2,printf@val+2
  2849  007376  C011  F086         	movff	?___llmod+3,printf@val+3
  2850  00737A                     l175:
  2851  00737A  0100               	movlb	0	; () banked
  2852  00737C  078E               	decf	printf@c& (0+255),f,b
  2853  00737E  0100               	movlb	0	; () banked
  2854  007380  298E               	incf	printf@c& (0+255),w,b
  2855  007382  B4D8               	btfsc	status,2,c
  2856  007384  D008               	goto	l179
  2857  007386  D797               	goto	l176
  2858  007388                     
  2859                           ; BSR set to: 0
  2860                           ;doprnt.c: 1012: (putch('0') );
  2861                           
  2862                           ; BSR set to: 0
  2863  007388  0E30               	movlw	48
  2864  00738A  EC55  F02B         	call	_putch
  2865                           
  2866                           ;doprnt.c: 1013: prec--;
  2867  00738E  0100               	movlb	0	; () banked
  2868  007390  078A               	decf	printf@prec& (0+255),f,b
  2869  007392  A0D8               	btfss	status,0,c
  2870  007394  078B               	decf	(printf@prec+1)& (0+255),f,b
  2871  007396                     l179:
  2872                           
  2873                           ; BSR set to: 0
  2874                           
  2875                           ; BSR set to: 0
  2876  007396  0100               	movlb	0	; () banked
  2877  007398  518A               	movf	printf@prec& (0+255),w,b
  2878  00739A  0100               	movlb	0	; () banked
  2879  00739C  118B               	iorwf	(printf@prec+1)& (0+255),w,b
  2880  00739E  A4D8               	btfss	status,2,c
  2881  0073A0  D7F3               	goto	l180
  2882  0073A2                     u3530:
  2883                           
  2884                           ; BSR set to: 0
  2885                           ;doprnt.c: 1014: }
  2886                           ;doprnt.c: 1015: }
  2887                           ;doprnt.c: 1017: if(flag & 0x20)
  2888                           
  2889                           ; BSR set to: 0
  2890  0073A2  0100               	movlb	0	; () banked
  2891  0073A4  AB8C               	btfss	printf@flag& (0+255),5,b
  2892  0073A6  D004               	goto	l182
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;doprnt.c: 1018: (putch('E') );
  2896  0073A8  0E45               	movlw	69
  2897  0073AA  EC55  F02B         	call	_putch
  2898  0073AE  D003               	goto	l183
  2899  0073B0                     l182:
  2900                           
  2901                           ;doprnt.c: 1019: else
  2902                           ;doprnt.c: 1021: (putch('e') );
  2903  0073B0  0E65               	movlw	101
  2904  0073B2  EC55  F02B         	call	_putch
  2905  0073B6                     l183:
  2906                           
  2907                           ;doprnt.c: 1022: if(exp < 0) {
  2908  0073B6  0100               	movlb	0	; () banked
  2909  0073B8  AF82               	btfss	(printf@exp+1)& (0+255),7,b
  2910  0073BA  D009               	goto	l184
  2911                           
  2912                           ; BSR set to: 0
  2913                           ;doprnt.c: 1023: exp = -exp;
  2914  0073BC  0100               	movlb	0	; () banked
  2915  0073BE  6D81               	negf	printf@exp& (0+255),b
  2916  0073C0  1F82               	comf	(printf@exp+1)& (0+255),f,b
  2917  0073C2  B0D8               	btfsc	status,0,c
  2918  0073C4  2B82               	incf	(printf@exp+1)& (0+255),f,b
  2919                           
  2920                           ; BSR set to: 0
  2921                           ;doprnt.c: 1024: (putch('-') );
  2922  0073C6  0E2D               	movlw	45
  2923  0073C8  EC55  F02B         	call	_putch
  2924                           
  2925                           ;doprnt.c: 1025: } else
  2926  0073CC  D003               	goto	l185
  2927  0073CE                     l184:
  2928                           
  2929                           ;doprnt.c: 1026: (putch('+') );
  2930  0073CE  0E2B               	movlw	43
  2931  0073D0  EC55  F02B         	call	_putch
  2932  0073D4                     l185:
  2933                           
  2934                           ;doprnt.c: 1039: (putch(exp / 10 + '0') );
  2935  0073D4  C081  F007         	movff	printf@exp,___awdiv@dividend
  2936  0073D8  C082  F008         	movff	printf@exp+1,___awdiv@dividend+1
  2937  0073DC  0E00               	movlw	0
  2938  0073DE  6E0A               	movwf	___awdiv@divisor+1,c
  2939  0073E0  0E0A               	movlw	10
  2940  0073E2  6E09               	movwf	___awdiv@divisor,c
  2941  0073E4  EC95  F02C         	call	___awdiv	;wreg free
  2942  0073E8  5007               	movf	?___awdiv,w,c
  2943  0073EA  0F30               	addlw	48
  2944  0073EC  EC55  F02B         	call	_putch
  2945                           
  2946                           ;doprnt.c: 1040: (putch(exp % 10 + '0') );
  2947  0073F0  C081  F001         	movff	printf@exp,___awmod@dividend
  2948  0073F4  C082  F002         	movff	printf@exp+1,___awmod@dividend+1
  2949  0073F8  0E00               	movlw	0
  2950  0073FA  6E04               	movwf	___awmod@divisor+1,c
  2951  0073FC  0E0A               	movlw	10
  2952  0073FE  6E03               	movwf	___awmod@divisor,c
  2953  007400  EC1C  F02C         	call	___awmod	;wreg free
  2954  007404  5001               	movf	?___awmod,w,c
  2955  007406  0F30               	addlw	48
  2956  007408  EC55  F02B         	call	_putch
  2957                           
  2958                           ;doprnt.c: 1042: if((flag & 0x08) && width > 0)
  2959  00740C  0100               	movlb	0	; () banked
  2960  00740E  A78C               	btfss	printf@flag& (0+255),3,b
  2961  007410  EF4C  F03F         	goto	u4160
  2962                           
  2963                           ; BSR set to: 0
  2964  007414  0100               	movlb	0	; () banked
  2965  007416  BF80               	btfsc	(printf@width+1)& (0+255),7,b
  2966  007418  EF4C  F03F         	goto	u4160
  2967  00741C  0100               	movlb	0	; () banked
  2968  00741E  5180               	movf	(printf@width+1)& (0+255),w,b
  2969  007420  E105               	bnz	l3002
  2970  007422  0100               	movlb	0	; () banked
  2971  007424  057F               	decf	printf@width& (0+255),w,b
  2972  007426  A0D8               	btfss	status,0,c
  2973  007428  EF4C  F03F         	goto	u4160
  2974  00742C                     u3570:
  2975  00742C                     l3002:
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;doprnt.c: 1044: (putch(' ') );
  2979  00742C  0E20               	movlw	32
  2980  00742E  EC55  F02B         	call	_putch
  2981                           
  2982                           ;doprnt.c: 1045: while(--width);
  2983  007432  0100               	movlb	0	; () banked
  2984  007434  077F               	decf	printf@width& (0+255),f,b
  2985  007436  A0D8               	btfss	status,0,c
  2986  007438  0780               	decf	(printf@width+1)& (0+255),f,b
  2987  00743A  0100               	movlb	0	; () banked
  2988  00743C  517F               	movf	printf@width& (0+255),w,b
  2989  00743E  0100               	movlb	0	; () banked
  2990  007440  1180               	iorwf	(printf@width+1)& (0+255),w,b
  2991  007442  B4D8               	btfsc	status,2,c
  2992  007444  EF4C  F03F         	goto	u4160
  2993  007448  D7F1               	goto	u3570
  2994  00744A                     l136:
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;doprnt.c: 1048: }
  2998                           ;doprnt.c: 1087: if(flag & 0x200) {
  2999  00744A  0100               	movlb	0	; () banked
  3000  00744C  A38D               	btfss	(printf@flag+1)& (0+255),1,b
  3001  00744E  D104               	goto	l189
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;doprnt.c: 1088: if(exp < 0)
  3005  007450  0100               	movlb	0	; () banked
  3006  007452  AF82               	btfss	(printf@exp+1)& (0+255),7,b
  3007  007454  D012               	goto	l190
  3008                           
  3009                           ; BSR set to: 0
  3010                           ;doprnt.c: 1089: prec -= (exp+1);
  3011  007456  0E01               	movlw	1
  3012  007458  0100               	movlb	0	; () banked
  3013  00745A  2581               	addwf	printf@exp& (0+255),w,b
  3014  00745C  0100               	movlb	0	; () banked
  3015  00745E  6F67               	movwf	??_printf& (0+255),b
  3016  007460  0E00               	movlw	0
  3017  007462  0100               	movlb	0	; () banked
  3018  007464  2182               	addwfc	(printf@exp+1)& (0+255),w,b
  3019  007466  0100               	movlb	0	; () banked
  3020  007468  6F68               	movwf	(??_printf+1)& (0+255),b
  3021  00746A  0100               	movlb	0	; () banked
  3022  00746C  5167               	movf	??_printf& (0+255),w,b
  3023  00746E  0100               	movlb	0	; () banked
  3024  007470  5F8A               	subwf	printf@prec& (0+255),f,b
  3025  007472  0100               	movlb	0	; () banked
  3026  007474  5168               	movf	(??_printf+1)& (0+255),w,b
  3027  007476  0100               	movlb	0	; () banked
  3028  007478  5B8B               	subwfb	(printf@prec+1)& (0+255),f,b
  3029  00747A                     l190:
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;doprnt.c: 1091: val = (unsigned long)fval;
  3033                           
  3034                           ; BSR set to: 0
  3035  00747A  C087  F015         	movff	printf@fval,___fttol@f1
  3036  00747E  C088  F016         	movff	printf@fval+1,___fttol@f1+1
  3037  007482  C089  F017         	movff	printf@fval+2,___fttol@f1+2
  3038  007486  ECE9  F02D         	call	___fttol	;wreg free
  3039  00748A  C015  F083         	movff	?___fttol,printf@val
  3040  00748E  C016  F084         	movff	?___fttol+1,printf@val+1
  3041  007492  C017  F085         	movff	?___fttol+2,printf@val+2
  3042  007496  C018  F086         	movff	?___fttol+3,printf@val+3
  3043                           
  3044                           ;doprnt.c: 1092: for(c = 0 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3045  00749A  0E00               	movlw	0
  3046  00749C  0100               	movlb	0	; () banked
  3047  00749E  6F8E               	movwf	printf@c& (0+255),b
  3048  0074A0                     l3014:
  3049                           
  3050                           ; BSR set to: 0
  3051  0074A0  0E0A               	movlw	10
  3052  0074A2  0100               	movlb	0	; () banked
  3053  0074A4  198E               	xorwf	printf@c& (0+255),w,b
  3054  0074A6  B4D8               	btfsc	status,2,c
  3055  0074A8  D01E               	goto	u3630
  3056                           
  3057                           ; BSR set to: 0
  3058                           ;doprnt.c: 1093: if(val < dpowers[c])
  3059                           
  3060                           ; BSR set to: 0
  3061                           
  3062                           ; BSR set to: 0
  3063  0074AA  0100               	movlb	0	; () banked
  3064  0074AC  518E               	movf	printf@c& (0+255),w,b
  3065  0074AE  0D04               	mullw	4
  3066  0074B0  0EB9               	movlw	low _dpowers
  3067  0074B2  24F3               	addwf	prodl,w,c
  3068  0074B4  6EF6               	movwf	tblptrl,c
  3069  0074B6  0E7E               	movlw	high _dpowers
  3070  0074B8  20F4               	addwfc	prodh,w,c
  3071  0074BA  6EF7               	movwf	tblptrh,c
  3072  0074BC                     	if	0	;There are less than 3 active tblptr bytes
  3073  0074BC                     	endif
  3074  0074BC  0009               	tblrd		*+
  3075  0074BE  50F5               	movf	tablat,w,c
  3076  0074C0  0100               	movlb	0	; () banked
  3077  0074C2  5D83               	subwf	printf@val& (0+255),w,b
  3078  0074C4  0009               	tblrd		*+
  3079  0074C6  50F5               	movf	tablat,w,c
  3080  0074C8  0100               	movlb	0	; () banked
  3081  0074CA  5984               	subwfb	(printf@val+1)& (0+255),w,b
  3082  0074CC  0009               	tblrd		*+
  3083  0074CE  50F5               	movf	tablat,w,c
  3084  0074D0  0100               	movlb	0	; () banked
  3085  0074D2  5985               	subwfb	(printf@val+2)& (0+255),w,b
  3086  0074D4  0009               	tblrd		*+
  3087  0074D6  50F5               	movf	tablat,w,c
  3088  0074D8  0100               	movlb	0	; () banked
  3089  0074DA  5986               	subwfb	(printf@val+3)& (0+255),w,b
  3090  0074DC  A0D8               	btfss	status,0,c
  3091  0074DE  D003               	goto	u3630
  3092                           
  3093                           ; BSR set to: 0
  3094                           
  3095                           ; BSR set to: 0
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;doprnt.c: 1094: break;
  3099  0074E0  0100               	movlb	0	; () banked
  3100  0074E2  2B8E               	incf	printf@c& (0+255),f,b
  3101  0074E4  D7DD               	goto	l3014
  3102  0074E6                     u3630:
  3103                           
  3104                           ; BSR set to: 0
  3105                           ;doprnt.c: 1095: prec -= c;
  3106                           
  3107                           ; BSR set to: 0
  3108  0074E6  0100               	movlb	0	; () banked
  3109  0074E8  518E               	movf	printf@c& (0+255),w,b
  3110  0074EA  0100               	movlb	0	; () banked
  3111  0074EC  5F8A               	subwf	printf@prec& (0+255),f,b
  3112  0074EE  0E00               	movlw	0
  3113  0074F0  0100               	movlb	0	; () banked
  3114  0074F2  BF8E               	btfsc	printf@c& (0+255),7,b
  3115  0074F4  0EFF               	movlw	255
  3116  0074F6  0100               	movlb	0	; () banked
  3117  0074F8  5B8B               	subwfb	(printf@prec+1)& (0+255),f,b
  3118                           
  3119                           ;doprnt.c: 1096: if(prec <= 12)
  3120  0074FA  0100               	movlb	0	; () banked
  3121  0074FC  BF8B               	btfsc	(printf@prec+1)& (0+255),7,b
  3122  0074FE  D008               	goto	u3640
  3123  007500  0100               	movlb	0	; () banked
  3124  007502  518B               	movf	(printf@prec+1)& (0+255),w,b
  3125  007504  E11D               	bnz	l194
  3126  007506  0E0D               	movlw	13
  3127  007508  0100               	movlb	0	; () banked
  3128  00750A  5D8A               	subwf	printf@prec& (0+255),w,b
  3129  00750C  B0D8               	btfsc	status,0,c
  3130  00750E  D018               	goto	l194
  3131  007510                     u3640:
  3132                           
  3133                           ; BSR set to: 0
  3134                           ;doprnt.c: 1097: fval += fround(prec);
  3135  007510  C087  F049         	movff	printf@fval,___ftadd@f1
  3136  007514  C088  F04A         	movff	printf@fval+1,___ftadd@f1+1
  3137  007518  C089  F04B         	movff	printf@fval+2,___ftadd@f1+2
  3138  00751C  0100               	movlb	0	; () banked
  3139  00751E  518A               	movf	printf@prec& (0+255),w,b
  3140  007520  ECB9  F031         	call	_fround
  3141  007524  C03F  F04C         	movff	?_fround,___ftadd@f2
  3142  007528  C040  F04D         	movff	?_fround+1,___ftadd@f2+1
  3143  00752C  C041  F04E         	movff	?_fround+2,___ftadd@f2+2
  3144  007530  EC0A  F030         	call	___ftadd	;wreg free
  3145  007534  C049  F087         	movff	?___ftadd,printf@fval
  3146  007538  C04A  F088         	movff	?___ftadd+1,printf@fval+1
  3147  00753C  C04B  F089         	movff	?___ftadd+2,printf@fval+2
  3148  007540                     l194:
  3149                           
  3150                           ;doprnt.c: 1100: {
  3151                           ;doprnt.c: 1101: double temp;
  3152                           ;doprnt.c: 1102: temp = scale(prec);
  3153  007540  0100               	movlb	0	; () banked
  3154  007542  518A               	movf	printf@prec& (0+255),w,b
  3155  007544  ECE2  F032         	call	_scale
  3156  007548  C03F  F076         	movff	?_scale,printf@temp
  3157  00754C  C040  F077         	movff	?_scale+1,printf@temp+1
  3158  007550  C041  F078         	movff	?_scale+2,printf@temp+2
  3159                           
  3160                           ;doprnt.c: 1103: temp *= fval - (double)val;
  3161  007554  C076  F030         	movff	printf@temp,___ftmul@f1
  3162  007558  C077  F031         	movff	printf@temp+1,___ftmul@f1+1
  3163  00755C  C078  F032         	movff	printf@temp+2,___ftmul@f1+2
  3164  007560  C087  F04C         	movff	printf@fval,___ftadd@f2
  3165  007564  C088  F04D         	movff	printf@fval+1,___ftadd@f2+1
  3166  007568  C089  F04E         	movff	printf@fval+2,___ftadd@f2+2
  3167  00756C  C083  F024         	movff	printf@val,___lltoft@c
  3168  007570  C084  F025         	movff	printf@val+1,___lltoft@c+1
  3169  007574  C085  F026         	movff	printf@val+2,___lltoft@c+2
  3170  007578  C086  F027         	movff	printf@val+3,___lltoft@c+3
  3171  00757C  ECBB  F02B         	call	___lltoft	;wreg free
  3172  007580  C024  F02D         	movff	?___lltoft,___ftneg@f1
  3173  007584  C025  F02E         	movff	?___lltoft+1,___ftneg@f1+1
  3174  007588  C026  F02F         	movff	?___lltoft+2,___ftneg@f1+2
  3175  00758C  EC76  F02B         	call	___ftneg	;wreg free
  3176  007590  C02D  F049         	movff	?___ftneg,___ftadd@f1
  3177  007594  C02E  F04A         	movff	?___ftneg+1,___ftadd@f1+1
  3178  007598  C02F  F04B         	movff	?___ftneg+2,___ftadd@f1+2
  3179  00759C  EC0A  F030         	call	___ftadd	;wreg free
  3180  0075A0  C049  F033         	movff	?___ftadd,___ftmul@f2
  3181  0075A4  C04A  F034         	movff	?___ftadd+1,___ftmul@f2+1
  3182  0075A8  C04B  F035         	movff	?___ftadd+2,___ftmul@f2+2
  3183  0075AC  EC63  F02E         	call	___ftmul	;wreg free
  3184  0075B0  C030  F076         	movff	?___ftmul,printf@temp
  3185  0075B4  C031  F077         	movff	?___ftmul+1,printf@temp+1
  3186  0075B8  C032  F078         	movff	?___ftmul+2,printf@temp+2
  3187                           
  3188                           ;doprnt.c: 1104: val = (unsigned long)temp;
  3189  0075BC  C076  F015         	movff	printf@temp,___fttol@f1
  3190  0075C0  C077  F016         	movff	printf@temp+1,___fttol@f1+1
  3191  0075C4  C078  F017         	movff	printf@temp+2,___fttol@f1+2
  3192  0075C8  ECE9  F02D         	call	___fttol	;wreg free
  3193  0075CC  C015  F083         	movff	?___fttol,printf@val
  3194  0075D0  C016  F084         	movff	?___fttol+1,printf@val+1
  3195  0075D4  C017  F085         	movff	?___fttol+2,printf@val+2
  3196  0075D8  C018  F086         	movff	?___fttol+3,printf@val+3
  3197                           
  3198                           ;doprnt.c: 1105: }
  3199                           ;doprnt.c: 1106: while(prec && val % 10 == 0) {
  3200  0075DC  D01E               	goto	l195
  3201  0075DE                     
  3202                           ;doprnt.c: 1107: val /= 10;
  3203  0075DE  C083  F001         	movff	printf@val,___lldiv@dividend
  3204  0075E2  C084  F002         	movff	printf@val+1,___lldiv@dividend+1
  3205  0075E6  C085  F003         	movff	printf@val+2,___lldiv@dividend+2
  3206  0075EA  C086  F004         	movff	printf@val+3,___lldiv@dividend+3
  3207  0075EE  0E0A               	movlw	10
  3208  0075F0  6E05               	movwf	___lldiv@divisor,c
  3209  0075F2  0E00               	movlw	0
  3210  0075F4  6E06               	movwf	___lldiv@divisor+1,c
  3211  0075F6  0E00               	movlw	0
  3212  0075F8  6E07               	movwf	___lldiv@divisor+2,c
  3213  0075FA  0E00               	movlw	0
  3214  0075FC  6E08               	movwf	___lldiv@divisor+3,c
  3215  0075FE  EC54  F02C         	call	___lldiv	;wreg free
  3216  007602  C001  F083         	movff	?___lldiv,printf@val
  3217  007606  C002  F084         	movff	?___lldiv+1,printf@val+1
  3218  00760A  C003  F085         	movff	?___lldiv+2,printf@val+2
  3219  00760E  C004  F086         	movff	?___lldiv+3,printf@val+3
  3220                           
  3221                           ;doprnt.c: 1108: prec--;
  3222  007612  0100               	movlb	0	; () banked
  3223  007614  078A               	decf	printf@prec& (0+255),f,b
  3224  007616  A0D8               	btfss	status,0,c
  3225  007618  078B               	decf	(printf@prec+1)& (0+255),f,b
  3226  00761A                     l195:
  3227                           
  3228                           ; BSR set to: 0
  3229  00761A  0100               	movlb	0	; () banked
  3230  00761C  518A               	movf	printf@prec& (0+255),w,b
  3231  00761E  0100               	movlb	0	; () banked
  3232  007620  118B               	iorwf	(printf@prec+1)& (0+255),w,b
  3233  007622  B4D8               	btfsc	status,2,c
  3234  007624  D03C               	goto	l201
  3235                           
  3236                           ; BSR set to: 0
  3237  007626  C083  F00E         	movff	printf@val,___llmod@dividend
  3238  00762A  C084  F00F         	movff	printf@val+1,___llmod@dividend+1
  3239  00762E  C085  F010         	movff	printf@val+2,___llmod@dividend+2
  3240  007632  C086  F011         	movff	printf@val+3,___llmod@dividend+3
  3241  007636  0E0A               	movlw	10
  3242  007638  6E12               	movwf	___llmod@divisor,c
  3243  00763A  0E00               	movlw	0
  3244  00763C  6E13               	movwf	___llmod@divisor+1,c
  3245  00763E  0E00               	movlw	0
  3246  007640  6E14               	movwf	___llmod@divisor+2,c
  3247  007642  0E00               	movlw	0
  3248  007644  6E15               	movwf	___llmod@divisor+3,c
  3249  007646  ECE9  F02B         	call	___llmod	;wreg free
  3250  00764A  500E               	movf	?___llmod,w,c
  3251  00764C  100F               	iorwf	?___llmod+1,w,c
  3252  00764E  1010               	iorwf	?___llmod+2,w,c
  3253  007650  1011               	iorwf	?___llmod+3,w,c
  3254  007652  A4D8               	btfss	status,2,c
  3255  007654  D024               	goto	l201
  3256  007656  D7C3               	goto	l196
  3257  007658                     l189:
  3258                           
  3259                           ;doprnt.c: 1112: if(prec <= 12)
  3260  007658  0100               	movlb	0	; () banked
  3261  00765A  BF8B               	btfsc	(printf@prec+1)& (0+255),7,b
  3262  00765C  D008               	goto	u3670
  3263  00765E  0100               	movlb	0	; () banked
  3264  007660  518B               	movf	(printf@prec+1)& (0+255),w,b
  3265  007662  E11D               	bnz	l3046
  3266  007664  0E0D               	movlw	13
  3267  007666  0100               	movlb	0	; () banked
  3268  007668  5D8A               	subwf	printf@prec& (0+255),w,b
  3269  00766A  B0D8               	btfsc	status,0,c
  3270  00766C  D018               	goto	l201
  3271  00766E                     u3670:
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;doprnt.c: 1113: fval += fround(prec);
  3275  00766E  C087  F049         	movff	printf@fval,___ftadd@f1
  3276  007672  C088  F04A         	movff	printf@fval+1,___ftadd@f1+1
  3277  007676  C089  F04B         	movff	printf@fval+2,___ftadd@f1+2
  3278  00767A  0100               	movlb	0	; () banked
  3279  00767C  518A               	movf	printf@prec& (0+255),w,b
  3280  00767E  ECB9  F031         	call	_fround
  3281  007682  C03F  F04C         	movff	?_fround,___ftadd@f2
  3282  007686  C040  F04D         	movff	?_fround+1,___ftadd@f2+1
  3283  00768A  C041  F04E         	movff	?_fround+2,___ftadd@f2+2
  3284  00768E  EC0A  F030         	call	___ftadd	;wreg free
  3285  007692  C049  F087         	movff	?___ftadd,printf@fval
  3286  007696  C04A  F088         	movff	?___ftadd+1,printf@fval+1
  3287  00769A  C04B  F089         	movff	?___ftadd+2,printf@fval+2
  3288  00769E                     l201:
  3289  00769E                     l3046:
  3290                           
  3291                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3292  00769E  0100               	movlb	0	; () banked
  3293  0076A0  BF82               	btfsc	(printf@exp+1)& (0+255),7,b
  3294  0076A2  D008               	goto	u3680
  3295  0076A4  0100               	movlb	0	; () banked
  3296  0076A6  5182               	movf	(printf@exp+1)& (0+255),w,b
  3297  0076A8  E126               	bnz	l3054
  3298  0076AA  0E0A               	movlw	10
  3299  0076AC  0100               	movlb	0	; () banked
  3300  0076AE  5D81               	subwf	printf@exp& (0+255),w,b
  3301  0076B0  B0D8               	btfsc	status,0,c
  3302  0076B2  D021               	goto	u3710
  3303  0076B4                     u3680:
  3304                           
  3305                           ; BSR set to: 0
  3306  0076B4  0100               	movlb	0	; () banked
  3307  0076B6  5187               	movf	printf@fval& (0+255),w,b
  3308  0076B8  0100               	movlb	0	; () banked
  3309  0076BA  1188               	iorwf	(printf@fval+1)& (0+255),w,b
  3310  0076BC  0100               	movlb	0	; () banked
  3311  0076BE  1189               	iorwf	(printf@fval+2)& (0+255),w,b
  3312  0076C0  B4D8               	btfsc	status,2,c
  3313  0076C2  D05B               	goto	l202
  3314                           
  3315                           ; BSR set to: 0
  3316  0076C4  C087  F015         	movff	printf@fval,___fttol@f1
  3317  0076C8  C088  F016         	movff	printf@fval+1,___fttol@f1+1
  3318  0076CC  C089  F017         	movff	printf@fval+2,___fttol@f1+2
  3319  0076D0  ECE9  F02D         	call	___fttol	;wreg free
  3320  0076D4  5015               	movf	?___fttol,w,c
  3321  0076D6  1016               	iorwf	?___fttol+1,w,c
  3322  0076D8  1017               	iorwf	?___fttol+2,w,c
  3323  0076DA  1018               	iorwf	?___fttol+3,w,c
  3324  0076DC  A4D8               	btfss	status,2,c
  3325  0076DE  D04D               	goto	l202
  3326  0076E0  0100               	movlb	0	; () banked
  3327  0076E2  BF82               	btfsc	(printf@exp+1)& (0+255),7,b
  3328  0076E4  D04A               	goto	l202
  3329  0076E6  0100               	movlb	0	; () banked
  3330  0076E8  5182               	movf	(printf@exp+1)& (0+255),w,b
  3331  0076EA  E105               	bnz	l3054
  3332  0076EC  0E02               	movlw	2
  3333  0076EE  0100               	movlb	0	; () banked
  3334  0076F0  5D81               	subwf	printf@exp& (0+255),w,b
  3335  0076F2  A0D8               	btfss	status,0,c
  3336  0076F4  D042               	goto	l202
  3337  0076F6                     u3710:
  3338  0076F6                     l3054:
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3342  0076F6  C07B  F055         	movff	printf@tmpval,___ftge@ff1
  3343  0076FA  C07C  F056         	movff	printf@tmpval+1,___ftge@ff1+1
  3344  0076FE  C07D  F057         	movff	printf@tmpval+2,___ftge@ff1+2
  3345  007702  0E70               	movlw	112
  3346  007704  6E58               	movwf	___ftge@ff2,c
  3347  007706  0E89               	movlw	137
  3348  007708  6E59               	movwf	___ftge@ff2+1,c
  3349  00770A  0E40               	movlw	64
  3350  00770C  6E5A               	movwf	___ftge@ff2+2,c
  3351  00770E  ECD7  F02C         	call	___ftge	;wreg free
  3352  007712  B0D8               	btfsc	status,0,c
  3353  007714  D003               	goto	l205
  3354                           
  3355                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3356  007716  0100               	movlb	0	; () banked
  3357  007718  0EF7               	movlw	247
  3358  00771A  D002               	goto	L5
  3359  00771C                     l205:
  3360                           
  3361                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3362                           
  3363                           ; BSR set to: 0
  3364  00771C  0100               	movlb	0	; () banked
  3365  00771E  0EF8               	movlw	248
  3366  007720                     L5:
  3367  007720  2781               	addwf	printf@exp& (0+255),f,b
  3368  007722  0EFF               	movlw	255
  3369  007724  2382               	addwfc	(printf@exp+1)& (0+255),f,b
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;doprnt.c: 1124: }
  3373                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3374                           
  3375                           ; BSR set to: 0
  3376  007726  0100               	movlb	0	; () banked
  3377  007728  5181               	movf	printf@exp& (0+255),w,b
  3378  00772A  ECE2  F032         	call	_scale
  3379  00772E  C03F  F07B         	movff	?_scale,printf@tmpval
  3380  007732  C040  F07C         	movff	?_scale+1,printf@tmpval+1
  3381  007736  C041  F07D         	movff	?_scale+2,printf@tmpval+2
  3382                           
  3383                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3384  00773A  C087  F001         	movff	printf@fval,__tdiv_to_l_@f1
  3385  00773E  C088  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  3386  007742  C089  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  3387  007746  C07B  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  3388  00774A  C07C  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  3389  00774E  C07D  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  3390  007752  EC71  F02F         	call	__tdiv_to_l_	;wreg free
  3391  007756  C001  F083         	movff	?__tdiv_to_l_,printf@val
  3392  00775A  C002  F084         	movff	?__tdiv_to_l_+1,printf@val+1
  3393  00775E  C003  F085         	movff	?__tdiv_to_l_+2,printf@val+2
  3394  007762  C004  F086         	movff	?__tdiv_to_l_+3,printf@val+3
  3395                           
  3396                           ;doprnt.c: 1129: fval = 0.0;
  3397  007766  0E00               	movlw	0
  3398  007768  0100               	movlb	0	; () banked
  3399  00776A  6F87               	movwf	printf@fval& (0+255),b
  3400  00776C  0E00               	movlw	0
  3401  00776E  0100               	movlb	0	; () banked
  3402  007770  6F88               	movwf	(printf@fval+1)& (0+255),b
  3403  007772  0E00               	movlw	0
  3404  007774  0100               	movlb	0	; () banked
  3405  007776  6F89               	movwf	(printf@fval+2)& (0+255),b
  3406                           
  3407                           ;doprnt.c: 1130: } else {
  3408  007778  D033               	goto	l211
  3409  00777A                     l202:
  3410                           
  3411                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3412                           
  3413                           ; BSR set to: 0
  3414  00777A  C087  F015         	movff	printf@fval,___fttol@f1
  3415  00777E  C088  F016         	movff	printf@fval+1,___fttol@f1+1
  3416  007782  C089  F017         	movff	printf@fval+2,___fttol@f1+2
  3417  007786  ECE9  F02D         	call	___fttol	;wreg free
  3418  00778A  C015  F083         	movff	?___fttol,printf@val
  3419  00778E  C016  F084         	movff	?___fttol+1,printf@val+1
  3420  007792  C017  F085         	movff	?___fttol+2,printf@val+2
  3421  007796  C018  F086         	movff	?___fttol+3,printf@val+3
  3422                           
  3423                           ;doprnt.c: 1132: fval -= (double)val;
  3424  00779A  C087  F055         	movff	printf@fval,___ftsub@f1
  3425  00779E  C088  F056         	movff	printf@fval+1,___ftsub@f1+1
  3426  0077A2  C089  F057         	movff	printf@fval+2,___ftsub@f1+2
  3427  0077A6  C083  F024         	movff	printf@val,___lltoft@c
  3428  0077AA  C084  F025         	movff	printf@val+1,___lltoft@c+1
  3429  0077AE  C085  F026         	movff	printf@val+2,___lltoft@c+2
  3430  0077B2  C086  F027         	movff	printf@val+3,___lltoft@c+3
  3431  0077B6  ECBB  F02B         	call	___lltoft	;wreg free
  3432  0077BA  C024  F058         	movff	?___lltoft,___ftsub@f2
  3433  0077BE  C025  F059         	movff	?___lltoft+1,___ftsub@f2+1
  3434  0077C2  C026  F05A         	movff	?___lltoft+2,___ftsub@f2+2
  3435  0077C6  EC9B  F02B         	call	___ftsub	;wreg free
  3436  0077CA  C055  F087         	movff	?___ftsub,printf@fval
  3437  0077CE  C056  F088         	movff	?___ftsub+1,printf@fval+1
  3438  0077D2  C057  F089         	movff	?___ftsub+2,printf@fval+2
  3439                           
  3440                           ;doprnt.c: 1133: exp = 0;
  3441  0077D6  0E00               	movlw	0
  3442  0077D8  0100               	movlb	0	; () banked
  3443  0077DA  6F82               	movwf	(printf@exp+1)& (0+255),b
  3444  0077DC  0E00               	movlw	0
  3445  0077DE  6F81               	movwf	printf@exp& (0+255),b
  3446  0077E0                     l211:
  3447                           
  3448                           ; BSR set to: 0
  3449                           ;doprnt.c: 1134: }
  3450                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3451                           
  3452                           ; BSR set to: 0
  3453  0077E0  0E01               	movlw	1
  3454  0077E2  0100               	movlb	0	; () banked
  3455  0077E4  6F8E               	movwf	printf@c& (0+255),b
  3456  0077E6                     l3074:
  3457                           
  3458                           ; BSR set to: 0
  3459  0077E6  0E0A               	movlw	10
  3460  0077E8  0100               	movlb	0	; () banked
  3461  0077EA  198E               	xorwf	printf@c& (0+255),w,b
  3462  0077EC  B4D8               	btfsc	status,2,c
  3463  0077EE  D01E               	goto	u3750
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;doprnt.c: 1137: if(val < dpowers[c])
  3467                           
  3468                           ; BSR set to: 0
  3469                           
  3470                           ; BSR set to: 0
  3471  0077F0  0100               	movlb	0	; () banked
  3472  0077F2  518E               	movf	printf@c& (0+255),w,b
  3473  0077F4  0D04               	mullw	4
  3474  0077F6  0EB9               	movlw	low _dpowers
  3475  0077F8  24F3               	addwf	prodl,w,c
  3476  0077FA  6EF6               	movwf	tblptrl,c
  3477  0077FC  0E7E               	movlw	high _dpowers
  3478  0077FE  20F4               	addwfc	prodh,w,c
  3479  007800  6EF7               	movwf	tblptrh,c
  3480  007802                     	if	0	;There are less than 3 active tblptr bytes
  3481  007802                     	endif
  3482  007802  0009               	tblrd		*+
  3483  007804  50F5               	movf	tablat,w,c
  3484  007806  0100               	movlb	0	; () banked
  3485  007808  5D83               	subwf	printf@val& (0+255),w,b
  3486  00780A  0009               	tblrd		*+
  3487  00780C  50F5               	movf	tablat,w,c
  3488  00780E  0100               	movlb	0	; () banked
  3489  007810  5984               	subwfb	(printf@val+1)& (0+255),w,b
  3490  007812  0009               	tblrd		*+
  3491  007814  50F5               	movf	tablat,w,c
  3492  007816  0100               	movlb	0	; () banked
  3493  007818  5985               	subwfb	(printf@val+2)& (0+255),w,b
  3494  00781A  0009               	tblrd		*+
  3495  00781C  50F5               	movf	tablat,w,c
  3496  00781E  0100               	movlb	0	; () banked
  3497  007820  5986               	subwfb	(printf@val+3)& (0+255),w,b
  3498  007822  A0D8               	btfss	status,0,c
  3499  007824  D003               	goto	u3750
  3500                           
  3501                           ; BSR set to: 0
  3502                           
  3503                           ; BSR set to: 0
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;doprnt.c: 1138: break;
  3507  007826  0100               	movlb	0	; () banked
  3508  007828  2B8E               	incf	printf@c& (0+255),f,b
  3509  00782A  D7DD               	goto	l3074
  3510  00782C                     u3750:
  3511                           
  3512                           ; BSR set to: 0
  3513                           ;doprnt.c: 1142: width -= prec + c + exp;
  3514                           
  3515                           ; BSR set to: 0
  3516  00782C  C08E  F067         	movff	printf@c,??_printf
  3517  007830  0100               	movlb	0	; () banked
  3518  007832  6B68               	clrf	(??_printf+1)& (0+255),b
  3519  007834  BF67               	btfsc	??_printf& (0+255),7,b
  3520  007836  0768               	decf	(??_printf+1)& (0+255),f,b
  3521  007838  0100               	movlb	0	; () banked
  3522  00783A  518A               	movf	printf@prec& (0+255),w,b
  3523  00783C  0100               	movlb	0	; () banked
  3524  00783E  2767               	addwf	??_printf& (0+255),f,b
  3525  007840  0100               	movlb	0	; () banked
  3526  007842  518B               	movf	(printf@prec+1)& (0+255),w,b
  3527  007844  0100               	movlb	0	; () banked
  3528  007846  2368               	addwfc	(??_printf+1)& (0+255),f,b
  3529  007848  0100               	movlb	0	; () banked
  3530  00784A  5181               	movf	printf@exp& (0+255),w,b
  3531  00784C  0100               	movlb	0	; () banked
  3532  00784E  2767               	addwf	??_printf& (0+255),f,b
  3533  007850  0100               	movlb	0	; () banked
  3534  007852  5182               	movf	(printf@exp+1)& (0+255),w,b
  3535  007854  0100               	movlb	0	; () banked
  3536  007856  2368               	addwfc	(??_printf+1)& (0+255),f,b
  3537  007858  0100               	movlb	0	; () banked
  3538  00785A  5167               	movf	??_printf& (0+255),w,b
  3539  00785C  0100               	movlb	0	; () banked
  3540  00785E  5F7F               	subwf	printf@width& (0+255),f,b
  3541  007860  0100               	movlb	0	; () banked
  3542  007862  5168               	movf	(??_printf+1)& (0+255),w,b
  3543  007864  0100               	movlb	0	; () banked
  3544  007866  5B80               	subwfb	(printf@width+1)& (0+255),f,b
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;doprnt.c: 1143: if(
  3548                           ;doprnt.c: 1145: flag & 0x800 ||
  3549                           ;doprnt.c: 1147: prec)
  3550  007868  0100               	movlb	0	; () banked
  3551  00786A  B78D               	btfsc	(printf@flag+1)& (0+255),3,b
  3552  00786C  D006               	goto	u3770
  3553                           
  3554                           ; BSR set to: 0
  3555  00786E  0100               	movlb	0	; () banked
  3556  007870  518A               	movf	printf@prec& (0+255),w,b
  3557  007872  0100               	movlb	0	; () banked
  3558  007874  118B               	iorwf	(printf@prec+1)& (0+255),w,b
  3559  007876  B4D8               	btfsc	status,2,c
  3560  007878  D004               	goto	l215
  3561  00787A                     u3770:
  3562                           
  3563                           ; BSR set to: 0
  3564                           ;doprnt.c: 1148: width--;
  3565                           
  3566                           ; BSR set to: 0
  3567  00787A  0100               	movlb	0	; () banked
  3568  00787C  077F               	decf	printf@width& (0+255),f,b
  3569  00787E  A0D8               	btfss	status,0,c
  3570  007880  0780               	decf	(printf@width+1)& (0+255),f,b
  3571  007882                     l215:
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;doprnt.c: 1149: if(flag & 0x03)
  3575                           
  3576                           ; BSR set to: 0
  3577  007882  0E03               	movlw	3
  3578  007884  0100               	movlb	0	; () banked
  3579  007886  158C               	andwf	printf@flag& (0+255),w,b
  3580  007888  0100               	movlb	0	; () banked
  3581  00788A  6F67               	movwf	??_printf& (0+255),b
  3582  00788C  0E00               	movlw	0
  3583  00788E  0100               	movlb	0	; () banked
  3584  007890  158D               	andwf	(printf@flag+1)& (0+255),w,b
  3585  007892  0100               	movlb	0	; () banked
  3586  007894  6F68               	movwf	(??_printf+1)& (0+255),b
  3587  007896  0100               	movlb	0	; () banked
  3588  007898  5167               	movf	??_printf& (0+255),w,b
  3589  00789A  0100               	movlb	0	; () banked
  3590  00789C  1168               	iorwf	(??_printf+1)& (0+255),w,b
  3591  00789E  B4D8               	btfsc	status,2,c
  3592  0078A0  D004               	goto	l218
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;doprnt.c: 1150: width--;
  3596  0078A2  0100               	movlb	0	; () banked
  3597  0078A4  077F               	decf	printf@width& (0+255),f,b
  3598  0078A6  A0D8               	btfss	status,0,c
  3599  0078A8  0780               	decf	(printf@width+1)& (0+255),f,b
  3600  0078AA                     l218:
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;doprnt.c: 1175: {
  3604                           ;doprnt.c: 1177: if(!(flag & 0x08))
  3605                           
  3606                           ; BSR set to: 0
  3607  0078AA  0100               	movlb	0	; () banked
  3608  0078AC  A78C               	btfss	printf@flag& (0+255),3,b
  3609  0078AE  D008               	goto	l220
  3610  0078B0  D011               	goto	u3800
  3611  0078B2                     l3102:
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;doprnt.c: 1181: (putch(' ') );
  3615  0078B2  0E20               	movlw	32
  3616  0078B4  EC55  F02B         	call	_putch
  3617                           
  3618                           ;doprnt.c: 1182: width--;
  3619  0078B8  0100               	movlb	0	; () banked
  3620  0078BA  077F               	decf	printf@width& (0+255),f,b
  3621  0078BC  A0D8               	btfss	status,0,c
  3622  0078BE  0780               	decf	(printf@width+1)& (0+255),f,b
  3623  0078C0                     l220:
  3624                           
  3625                           ; BSR set to: 0
  3626                           
  3627                           ; BSR set to: 0
  3628  0078C0  0100               	movlb	0	; () banked
  3629  0078C2  BF80               	btfsc	(printf@width+1)& (0+255),7,b
  3630  0078C4  D007               	goto	u3800
  3631  0078C6  0100               	movlb	0	; () banked
  3632  0078C8  5180               	movf	(printf@width+1)& (0+255),w,b
  3633  0078CA  E1F3               	bnz	l3102
  3634  0078CC  0100               	movlb	0	; () banked
  3635  0078CE  057F               	decf	printf@width& (0+255),w,b
  3636  0078D0  B0D8               	btfsc	status,0,c
  3637  0078D2  D7EF               	goto	l221
  3638  0078D4                     u3800:
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;doprnt.c: 1183: }
  3642                           ;doprnt.c: 1186: if(flag & 0x02)
  3643                           
  3644                           ; BSR set to: 0
  3645  0078D4  0100               	movlb	0	; () banked
  3646  0078D6  A38C               	btfss	printf@flag& (0+255),1,b
  3647  0078D8  D012               	goto	l223
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;doprnt.c: 1190: (putch(flag & 0x01 ? '-' : '+') );
  3651  0078DA  0100               	movlb	0	; () banked
  3652  0078DC  B18C               	btfsc	printf@flag& (0+255),0,b
  3653  0078DE  D005               	goto	l225
  3654                           
  3655                           ; BSR set to: 0
  3656  0078E0  0E00               	movlw	0
  3657  0078E2  0100               	movlb	0	; () banked
  3658  0078E4  6F73               	movwf	(_printf$134+1)& (0+255),b
  3659  0078E6  0E2B               	movlw	43
  3660  0078E8  D004               	goto	L6
  3661  0078EA                     l225:
  3662                           
  3663                           ; BSR set to: 0
  3664                           
  3665                           ; BSR set to: 0
  3666  0078EA  0E00               	movlw	0
  3667  0078EC  0100               	movlb	0	; () banked
  3668  0078EE  6F73               	movwf	(_printf$134+1)& (0+255),b
  3669  0078F0  0E2D               	movlw	45
  3670  0078F2                     L6:
  3671  0078F2  6F72               	movwf	_printf$134& (0+255),b
  3672                           
  3673                           ; BSR set to: 0
  3674                           
  3675                           ; BSR set to: 0
  3676  0078F4  0100               	movlb	0	; () banked
  3677  0078F6  5172               	movf	_printf$134& (0+255),w,b
  3678  0078F8  EC55  F02B         	call	_putch
  3679  0078FC  D04D               	goto	l230
  3680  0078FE                     l223:
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;doprnt.c: 1192: else if(flag & 0x01)
  3684  0078FE  0100               	movlb	0	; () banked
  3685  007900  A18C               	btfss	printf@flag& (0+255),0,b
  3686  007902  D04A               	goto	l230
  3687                           
  3688                           ; BSR set to: 0
  3689                           ;doprnt.c: 1193: (putch(' ') );
  3690  007904  0E20               	movlw	32
  3691  007906  EC55  F02B         	call	_putch
  3692                           
  3693                           ;doprnt.c: 1195: }
  3694                           ;doprnt.c: 1196: while(c--) {
  3695  00790A  D046               	goto	l230
  3696  00790C                     
  3697                           ;doprnt.c: 1200: {
  3698                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3699  00790C  C083  F001         	movff	printf@val,___lldiv@dividend
  3700  007910  C084  F002         	movff	printf@val+1,___lldiv@dividend+1
  3701  007914  C085  F003         	movff	printf@val+2,___lldiv@dividend+2
  3702  007918  C086  F004         	movff	printf@val+3,___lldiv@dividend+3
  3703  00791C  0100               	movlb	0	; () banked
  3704  00791E  518E               	movf	printf@c& (0+255),w,b
  3705  007920  0D04               	mullw	4
  3706  007922  0EB9               	movlw	low _dpowers
  3707  007924  24F3               	addwf	prodl,w,c
  3708  007926  6EF6               	movwf	tblptrl,c
  3709  007928  0E7E               	movlw	high _dpowers
  3710  00792A  20F4               	addwfc	prodh,w,c
  3711  00792C  6EF7               	movwf	tblptrh,c
  3712  00792E                     	if	0	;There are less than 3 active tblptr bytes
  3713  00792E                     	endif
  3714  00792E  0009               	tblrd		*+
  3715  007930  CFF5 F005          	movff	tablat,___lldiv@divisor
  3716  007934  0009               	tblrd		*+
  3717  007936  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3718  00793A  0009               	tblrd		*+
  3719  00793C  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3720  007940  000A               	tblrd		*-
  3721  007942  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3722  007946  EC54  F02C         	call	___lldiv	;wreg free
  3723  00794A  C001  F07B         	movff	?___lldiv,printf@tmpval
  3724  00794E  C002  F07C         	movff	?___lldiv+1,printf@tmpval+1
  3725  007952  C003  F07D         	movff	?___lldiv+2,printf@tmpval+2
  3726  007956  C004  F07E         	movff	?___lldiv+3,printf@tmpval+3
  3727                           
  3728                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3729  00795A  C07B  F00E         	movff	printf@tmpval,___llmod@dividend
  3730  00795E  C07C  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  3731  007962  C07D  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  3732  007966  C07E  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  3733  00796A  0E0A               	movlw	10
  3734  00796C  6E12               	movwf	___llmod@divisor,c
  3735  00796E  0E00               	movlw	0
  3736  007970  6E13               	movwf	___llmod@divisor+1,c
  3737  007972  0E00               	movlw	0
  3738  007974  6E14               	movwf	___llmod@divisor+2,c
  3739  007976  0E00               	movlw	0
  3740  007978  6E15               	movwf	___llmod@divisor+3,c
  3741  00797A  ECE9  F02B         	call	___llmod	;wreg free
  3742  00797E  C00E  F07B         	movff	?___llmod,printf@tmpval
  3743  007982  C00F  F07C         	movff	?___llmod+1,printf@tmpval+1
  3744  007986  C010  F07D         	movff	?___llmod+2,printf@tmpval+2
  3745  00798A  C011  F07E         	movff	?___llmod+3,printf@tmpval+3
  3746                           
  3747                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  3748  00798E  0100               	movlb	0	; () banked
  3749  007990  517B               	movf	printf@tmpval& (0+255),w,b
  3750  007992  0F30               	addlw	48
  3751  007994  EC55  F02B         	call	_putch
  3752  007998                     l230:
  3753  007998  0100               	movlb	0	; () banked
  3754  00799A  078E               	decf	printf@c& (0+255),f,b
  3755  00799C  0100               	movlb	0	; () banked
  3756  00799E  298E               	incf	printf@c& (0+255),w,b
  3757  0079A0  B4D8               	btfsc	status,2,c
  3758  0079A2  D008               	goto	l233
  3759  0079A4  D7B3               	goto	l231
  3760  0079A6                     l3126:
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;doprnt.c: 1208: (putch('0') );
  3764  0079A6  0E30               	movlw	48
  3765  0079A8  EC55  F02B         	call	_putch
  3766                           
  3767                           ;doprnt.c: 1209: exp--;
  3768  0079AC  0100               	movlb	0	; () banked
  3769  0079AE  0781               	decf	printf@exp& (0+255),f,b
  3770  0079B0  A0D8               	btfss	status,0,c
  3771  0079B2  0782               	decf	(printf@exp+1)& (0+255),f,b
  3772  0079B4                     l233:
  3773                           
  3774                           ; BSR set to: 0
  3775                           
  3776                           ; BSR set to: 0
  3777  0079B4  0100               	movlb	0	; () banked
  3778  0079B6  BF82               	btfsc	(printf@exp+1)& (0+255),7,b
  3779  0079B8  D007               	goto	u3850
  3780  0079BA  0100               	movlb	0	; () banked
  3781  0079BC  5182               	movf	(printf@exp+1)& (0+255),w,b
  3782  0079BE  E1F3               	bnz	l3126
  3783  0079C0  0100               	movlb	0	; () banked
  3784  0079C2  0581               	decf	printf@exp& (0+255),w,b
  3785  0079C4  B0D8               	btfsc	status,0,c
  3786  0079C6  D7EF               	goto	l234
  3787  0079C8                     u3850:
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;doprnt.c: 1210: }
  3791                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3792                           
  3793                           ; BSR set to: 0
  3794  0079C8  0100               	movlb	0	; () banked
  3795  0079CA  BF8B               	btfsc	(printf@prec+1)& (0+255),7,b
  3796  0079CC  D00C               	goto	l236
  3797  0079CE  0100               	movlb	0	; () banked
  3798  0079D0  518B               	movf	(printf@prec+1)& (0+255),w,b
  3799  0079D2  E105               	bnz	u3860
  3800  0079D4  0E09               	movlw	9
  3801  0079D6  0100               	movlb	0	; () banked
  3802  0079D8  5D8A               	subwf	printf@prec& (0+255),w,b
  3803  0079DA  A0D8               	btfss	status,0,c
  3804  0079DC  D004               	goto	l236
  3805  0079DE                     u3860:
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3809  0079DE  0E08               	movlw	8
  3810  0079E0  0100               	movlb	0	; () banked
  3811  0079E2  6F8E               	movwf	printf@c& (0+255),b
  3812  0079E4  D002               	goto	l237
  3813  0079E6                     l236:
  3814                           
  3815                           ; BSR set to: 0
  3816                           ;doprnt.c: 1213: else
  3817                           ;doprnt.c: 1214: c = prec;
  3818  0079E6  C08A  F08E         	movff	printf@prec,printf@c
  3819  0079EA                     l237:
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;doprnt.c: 1215: prec -= c;
  3823                           
  3824                           ; BSR set to: 0
  3825  0079EA  0100               	movlb	0	; () banked
  3826  0079EC  518E               	movf	printf@c& (0+255),w,b
  3827  0079EE  0100               	movlb	0	; () banked
  3828  0079F0  5F8A               	subwf	printf@prec& (0+255),f,b
  3829  0079F2  0E00               	movlw	0
  3830  0079F4  0100               	movlb	0	; () banked
  3831  0079F6  BF8E               	btfsc	printf@c& (0+255),7,b
  3832  0079F8  0EFF               	movlw	255
  3833  0079FA  0100               	movlb	0	; () banked
  3834  0079FC  5B8B               	subwfb	(printf@prec+1)& (0+255),f,b
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;doprnt.c: 1217: if(c || flag & 0x800)
  3838  0079FE  0100               	movlb	0	; () banked
  3839  007A00  518E               	movf	printf@c& (0+255),w,b
  3840  007A02  0100               	movlb	0	; () banked
  3841  007A04  A4D8               	btfss	status,2,c
  3842  007A06  D003               	goto	u3880
  3843                           
  3844                           ; BSR set to: 0
  3845  007A08  0100               	movlb	0	; () banked
  3846  007A0A  A78D               	btfss	(printf@flag+1)& (0+255),3,b
  3847  007A0C  D003               	goto	l238
  3848  007A0E                     u3880:
  3849                           
  3850                           ; BSR set to: 0
  3851                           ;doprnt.c: 1221: (putch('.') );
  3852                           
  3853                           ; BSR set to: 0
  3854  007A0E  0E2E               	movlw	46
  3855  007A10  EC55  F02B         	call	_putch
  3856  007A14                     l238:
  3857                           
  3858                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3859  007A14  0100               	movlb	0	; () banked
  3860  007A16  518E               	movf	printf@c& (0+255),w,b
  3861  007A18  ECE2  F032         	call	_scale
  3862  007A1C  C03F  F06D         	movff	?_scale,_printf$698
  3863  007A20  C040  F06E         	movff	?_scale+1,_printf$698+1
  3864  007A24  C041  F06F         	movff	?_scale+2,_printf$698+2
  3865                           
  3866                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3867  007A28  C087  F033         	movff	printf@fval,___ftmul@f2
  3868  007A2C  C088  F034         	movff	printf@fval+1,___ftmul@f2+1
  3869  007A30  C089  F035         	movff	printf@fval+2,___ftmul@f2+2
  3870  007A34  C06D  F030         	movff	_printf$698,___ftmul@f1
  3871  007A38  C06E  F031         	movff	_printf$698+1,___ftmul@f1+1
  3872  007A3C  C06F  F032         	movff	_printf$698+2,___ftmul@f1+2
  3873  007A40  EC63  F02E         	call	___ftmul	;wreg free
  3874  007A44  C030  F015         	movff	?___ftmul,___fttol@f1
  3875  007A48  C031  F016         	movff	?___ftmul+1,___fttol@f1+1
  3876  007A4C  C032  F017         	movff	?___ftmul+2,___fttol@f1+2
  3877  007A50  ECE9  F02D         	call	___fttol	;wreg free
  3878  007A54  C015  F083         	movff	?___fttol,printf@val
  3879  007A58  C016  F084         	movff	?___fttol+1,printf@val+1
  3880  007A5C  C017  F085         	movff	?___fttol+2,printf@val+2
  3881  007A60  C018  F086         	movff	?___fttol+3,printf@val+3
  3882                           
  3883                           ;doprnt.c: 1228: while(c--) {
  3884  007A64  D06D               	goto	l241
  3885  007A66                     
  3886                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3887  007A66  C083  F001         	movff	printf@val,___lldiv@dividend
  3888  007A6A  C084  F002         	movff	printf@val+1,___lldiv@dividend+1
  3889  007A6E  C085  F003         	movff	printf@val+2,___lldiv@dividend+2
  3890  007A72  C086  F004         	movff	printf@val+3,___lldiv@dividend+3
  3891  007A76  0100               	movlb	0	; () banked
  3892  007A78  518E               	movf	printf@c& (0+255),w,b
  3893  007A7A  0D04               	mullw	4
  3894  007A7C  0EB9               	movlw	low _dpowers
  3895  007A7E  24F3               	addwf	prodl,w,c
  3896  007A80  6EF6               	movwf	tblptrl,c
  3897  007A82  0E7E               	movlw	high _dpowers
  3898  007A84  20F4               	addwfc	prodh,w,c
  3899  007A86  6EF7               	movwf	tblptrh,c
  3900  007A88                     	if	0	;There are less than 3 active tblptr bytes
  3901  007A88                     	endif
  3902  007A88  0009               	tblrd		*+
  3903  007A8A  CFF5 F005          	movff	tablat,___lldiv@divisor
  3904  007A8E  0009               	tblrd		*+
  3905  007A90  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3906  007A94  0009               	tblrd		*+
  3907  007A96  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3908  007A9A  000A               	tblrd		*-
  3909  007A9C  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3910  007AA0  EC54  F02C         	call	___lldiv	;wreg free
  3911  007AA4  C001  F07B         	movff	?___lldiv,printf@tmpval
  3912  007AA8  C002  F07C         	movff	?___lldiv+1,printf@tmpval+1
  3913  007AAC  C003  F07D         	movff	?___lldiv+2,printf@tmpval+2
  3914  007AB0  C004  F07E         	movff	?___lldiv+3,printf@tmpval+3
  3915                           
  3916                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3917  007AB4  C07B  F00E         	movff	printf@tmpval,___llmod@dividend
  3918  007AB8  C07C  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  3919  007ABC  C07D  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  3920  007AC0  C07E  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  3921  007AC4  0E0A               	movlw	10
  3922  007AC6  6E12               	movwf	___llmod@divisor,c
  3923  007AC8  0E00               	movlw	0
  3924  007ACA  6E13               	movwf	___llmod@divisor+1,c
  3925  007ACC  0E00               	movlw	0
  3926  007ACE  6E14               	movwf	___llmod@divisor+2,c
  3927  007AD0  0E00               	movlw	0
  3928  007AD2  6E15               	movwf	___llmod@divisor+3,c
  3929  007AD4  ECE9  F02B         	call	___llmod	;wreg free
  3930  007AD8  C00E  F07B         	movff	?___llmod,printf@tmpval
  3931  007ADC  C00F  F07C         	movff	?___llmod+1,printf@tmpval+1
  3932  007AE0  C010  F07D         	movff	?___llmod+2,printf@tmpval+2
  3933  007AE4  C011  F07E         	movff	?___llmod+3,printf@tmpval+3
  3934                           
  3935                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  3936  007AE8  0100               	movlb	0	; () banked
  3937  007AEA  517B               	movf	printf@tmpval& (0+255),w,b
  3938  007AEC  0F30               	addlw	48
  3939  007AEE  EC55  F02B         	call	_putch
  3940                           
  3941                           ;doprnt.c: 1232: val %= dpowers[c];
  3942  007AF2  C083  F00E         	movff	printf@val,___llmod@dividend
  3943  007AF6  C084  F00F         	movff	printf@val+1,___llmod@dividend+1
  3944  007AFA  C085  F010         	movff	printf@val+2,___llmod@dividend+2
  3945  007AFE  C086  F011         	movff	printf@val+3,___llmod@dividend+3
  3946  007B02  0100               	movlb	0	; () banked
  3947  007B04  518E               	movf	printf@c& (0+255),w,b
  3948  007B06  0D04               	mullw	4
  3949  007B08  0EB9               	movlw	low _dpowers
  3950  007B0A  24F3               	addwf	prodl,w,c
  3951  007B0C  6EF6               	movwf	tblptrl,c
  3952  007B0E  0E7E               	movlw	high _dpowers
  3953  007B10  20F4               	addwfc	prodh,w,c
  3954  007B12  6EF7               	movwf	tblptrh,c
  3955  007B14                     	if	0	;There are less than 3 active tblptr bytes
  3956  007B14                     	endif
  3957  007B14  0009               	tblrd		*+
  3958  007B16  CFF5 F012          	movff	tablat,___llmod@divisor
  3959  007B1A  0009               	tblrd		*+
  3960  007B1C  CFF5 F013          	movff	tablat,___llmod@divisor+1
  3961  007B20  0009               	tblrd		*+
  3962  007B22  CFF5 F014          	movff	tablat,___llmod@divisor+2
  3963  007B26  000A               	tblrd		*-
  3964  007B28  CFF5 F015          	movff	tablat,___llmod@divisor+3
  3965  007B2C  ECE9  F02B         	call	___llmod	;wreg free
  3966  007B30  C00E  F083         	movff	?___llmod,printf@val
  3967  007B34  C00F  F084         	movff	?___llmod+1,printf@val+1
  3968  007B38  C010  F085         	movff	?___llmod+2,printf@val+2
  3969  007B3C  C011  F086         	movff	?___llmod+3,printf@val+3
  3970  007B40                     l241:
  3971  007B40  0100               	movlb	0	; () banked
  3972  007B42  078E               	decf	printf@c& (0+255),f,b
  3973  007B44  0100               	movlb	0	; () banked
  3974  007B46  298E               	incf	printf@c& (0+255),w,b
  3975  007B48  B4D8               	btfsc	status,2,c
  3976  007B4A  D008               	goto	l244
  3977  007B4C  D78C               	goto	l242
  3978  007B4E                     
  3979                           ; BSR set to: 0
  3980                           ;doprnt.c: 1236: (putch('0') );
  3981                           
  3982                           ; BSR set to: 0
  3983  007B4E  0E30               	movlw	48
  3984  007B50  EC55  F02B         	call	_putch
  3985                           
  3986                           ;doprnt.c: 1237: prec--;
  3987  007B54  0100               	movlb	0	; () banked
  3988  007B56  078A               	decf	printf@prec& (0+255),f,b
  3989  007B58  A0D8               	btfss	status,0,c
  3990  007B5A  078B               	decf	(printf@prec+1)& (0+255),f,b
  3991  007B5C                     l244:
  3992                           
  3993                           ; BSR set to: 0
  3994                           
  3995                           ; BSR set to: 0
  3996  007B5C  0100               	movlb	0	; () banked
  3997  007B5E  518A               	movf	printf@prec& (0+255),w,b
  3998  007B60  0100               	movlb	0	; () banked
  3999  007B62  118B               	iorwf	(printf@prec+1)& (0+255),w,b
  4000  007B64  A4D8               	btfss	status,2,c
  4001  007B66  D7F3               	goto	l245
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;doprnt.c: 1238: }
  4005                           ;doprnt.c: 1240: if((flag & 0x08) && width > 0)
  4006  007B68  0100               	movlb	0	; () banked
  4007  007B6A  A78C               	btfss	printf@flag& (0+255),3,b
  4008  007B6C  D195               	goto	u4160
  4009                           
  4010                           ; BSR set to: 0
  4011  007B6E  0100               	movlb	0	; () banked
  4012  007B70  BF80               	btfsc	(printf@width+1)& (0+255),7,b
  4013  007B72  D192               	goto	u4160
  4014  007B74  0100               	movlb	0	; () banked
  4015  007B76  5180               	movf	(printf@width+1)& (0+255),w,b
  4016  007B78  E104               	bnz	l3164
  4017  007B7A  0100               	movlb	0	; () banked
  4018  007B7C  057F               	decf	printf@width& (0+255),w,b
  4019  007B7E  A0D8               	btfss	status,0,c
  4020  007B80  D18B               	goto	u4160
  4021  007B82                     u3920:
  4022  007B82                     l3164:
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;doprnt.c: 1242: (putch(' ') );
  4026  007B82  0E20               	movlw	32
  4027  007B84  EC55  F02B         	call	_putch
  4028                           
  4029                           ;doprnt.c: 1243: while(--width);
  4030  007B88  0100               	movlb	0	; () banked
  4031  007B8A  077F               	decf	printf@width& (0+255),f,b
  4032  007B8C  A0D8               	btfss	status,0,c
  4033  007B8E  0780               	decf	(printf@width+1)& (0+255),f,b
  4034  007B90  0100               	movlb	0	; () banked
  4035  007B92  517F               	movf	printf@width& (0+255),w,b
  4036  007B94  0100               	movlb	0	; () banked
  4037  007B96  1180               	iorwf	(printf@width+1)& (0+255),w,b
  4038  007B98  B4D8               	btfsc	status,2,c
  4039  007B9A  D17E               	goto	u4160
  4040  007B9C  D7F2               	goto	u3920
  4041  007B9E                     l126:
  4042                           
  4043                           ; BSR set to: 0
  4044                           ;doprnt.c: 1246: }
  4045                           ;doprnt.c: 1253: {
  4046                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4047                           
  4048                           ; BSR set to: 0
  4049  007B9E  C079  FFD9         	movff	printf@ap,fsr2l
  4050  007BA2  C07A  FFDA         	movff	printf@ap+1,fsr2h
  4051  007BA6  CFDE F083          	movff	postinc2,printf@val
  4052  007BAA  CFDD F084          	movff	postdec2,printf@val+1
  4053  007BAE  0100               	movlb	0	; () banked
  4054  007BB0  0E00               	movlw	0
  4055  007BB2  BF84               	btfsc	(printf@val+1)& (0+255),7,b
  4056  007BB4  0EFF               	movlw	-1
  4057  007BB6  6F85               	movwf	(printf@val+2)& (0+255),b
  4058  007BB8  6F86               	movwf	(printf@val+3)& (0+255),b
  4059                           
  4060                           ; BSR set to: 0
  4061  007BBA  0E02               	movlw	2
  4062  007BBC  0100               	movlb	0	; () banked
  4063  007BBE  2779               	addwf	printf@ap& (0+255),f,b
  4064  007BC0  0E00               	movlw	0
  4065  007BC2  237A               	addwfc	(printf@ap+1)& (0+255),f,b
  4066                           
  4067                           ; BSR set to: 0
  4068                           ;doprnt.c: 1261: if((long)val < 0) {
  4069  007BC4  0100               	movlb	0	; () banked
  4070  007BC6  AF86               	btfss	(printf@val+3)& (0+255),7,b
  4071  007BC8  D00C               	goto	l250
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;doprnt.c: 1262: flag |= 0x03;
  4075  007BCA  0E03               	movlw	3
  4076  007BCC  0100               	movlb	0	; () banked
  4077  007BCE  138C               	iorwf	printf@flag& (0+255),f,b
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;doprnt.c: 1263: val = -val;
  4081  007BD0  0100               	movlb	0	; () banked
  4082  007BD2  1F86               	comf	(printf@val+3)& (0+255),f,b
  4083  007BD4  1F85               	comf	(printf@val+2)& (0+255),f,b
  4084  007BD6  1F84               	comf	(printf@val+1)& (0+255),f,b
  4085  007BD8  6D83               	negf	printf@val& (0+255),b
  4086  007BDA  0E00               	movlw	0
  4087  007BDC  2384               	addwfc	(printf@val+1)& (0+255),f,b
  4088  007BDE  2385               	addwfc	(printf@val+2)& (0+255),f,b
  4089  007BE0  2386               	addwfc	(printf@val+3)& (0+255),f,b
  4090  007BE2                     l250:
  4091                           
  4092                           ; BSR set to: 0
  4093                           ;doprnt.c: 1264: }
  4094                           ;doprnt.c: 1266: }
  4095                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4096                           
  4097                           ; BSR set to: 0
  4098  007BE2  0100               	movlb	0	; () banked
  4099  007BE4  518A               	movf	printf@prec& (0+255),w,b
  4100  007BE6  0100               	movlb	0	; () banked
  4101  007BE8  118B               	iorwf	(printf@prec+1)& (0+255),w,b
  4102  007BEA  A4D8               	btfss	status,2,c
  4103  007BEC  D00D               	goto	l251
  4104                           
  4105                           ; BSR set to: 0
  4106  007BEE  0100               	movlb	0	; () banked
  4107  007BF0  5183               	movf	printf@val& (0+255),w,b
  4108  007BF2  0100               	movlb	0	; () banked
  4109  007BF4  1184               	iorwf	(printf@val+1)& (0+255),w,b
  4110  007BF6  0100               	movlb	0	; () banked
  4111  007BF8  1185               	iorwf	(printf@val+2)& (0+255),w,b
  4112  007BFA  0100               	movlb	0	; () banked
  4113  007BFC  1186               	iorwf	(printf@val+3)& (0+255),w,b
  4114  007BFE  A4D8               	btfss	status,2,c
  4115  007C00  D003               	goto	l251
  4116                           
  4117                           ; BSR set to: 0
  4118                           ;doprnt.c: 1291: prec++;
  4119  007C02  0100               	movlb	0	; () banked
  4120  007C04  4B8A               	infsnz	printf@prec& (0+255),f,b
  4121  007C06  2B8B               	incf	(printf@prec+1)& (0+255),f,b
  4122  007C08                     l251:
  4123                           
  4124                           ; BSR set to: 0
  4125                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4126                           
  4127                           ; BSR set to: 0
  4128  007C08  0E01               	movlw	1
  4129  007C0A  0100               	movlb	0	; () banked
  4130  007C0C  6F8E               	movwf	printf@c& (0+255),b
  4131  007C0E                     l3186:
  4132                           
  4133                           ; BSR set to: 0
  4134  007C0E  0E0A               	movlw	10
  4135  007C10  0100               	movlb	0	; () banked
  4136  007C12  198E               	xorwf	printf@c& (0+255),w,b
  4137  007C14  B4D8               	btfsc	status,2,c
  4138  007C16  D01E               	goto	u3990
  4139                           
  4140                           ; BSR set to: 0
  4141                           ;doprnt.c: 1306: if(val < dpowers[c])
  4142                           
  4143                           ; BSR set to: 0
  4144                           
  4145                           ; BSR set to: 0
  4146  007C18  0100               	movlb	0	; () banked
  4147  007C1A  518E               	movf	printf@c& (0+255),w,b
  4148  007C1C  0D04               	mullw	4
  4149  007C1E  0EB9               	movlw	low _dpowers
  4150  007C20  24F3               	addwf	prodl,w,c
  4151  007C22  6EF6               	movwf	tblptrl,c
  4152  007C24  0E7E               	movlw	high _dpowers
  4153  007C26  20F4               	addwfc	prodh,w,c
  4154  007C28  6EF7               	movwf	tblptrh,c
  4155  007C2A                     	if	0	;There are less than 3 active tblptr bytes
  4156  007C2A                     	endif
  4157  007C2A  0009               	tblrd		*+
  4158  007C2C  50F5               	movf	tablat,w,c
  4159  007C2E  0100               	movlb	0	; () banked
  4160  007C30  5D83               	subwf	printf@val& (0+255),w,b
  4161  007C32  0009               	tblrd		*+
  4162  007C34  50F5               	movf	tablat,w,c
  4163  007C36  0100               	movlb	0	; () banked
  4164  007C38  5984               	subwfb	(printf@val+1)& (0+255),w,b
  4165  007C3A  0009               	tblrd		*+
  4166  007C3C  50F5               	movf	tablat,w,c
  4167  007C3E  0100               	movlb	0	; () banked
  4168  007C40  5985               	subwfb	(printf@val+2)& (0+255),w,b
  4169  007C42  0009               	tblrd		*+
  4170  007C44  50F5               	movf	tablat,w,c
  4171  007C46  0100               	movlb	0	; () banked
  4172  007C48  5986               	subwfb	(printf@val+3)& (0+255),w,b
  4173  007C4A  A0D8               	btfss	status,0,c
  4174  007C4C  D003               	goto	u3990
  4175                           
  4176                           ; BSR set to: 0
  4177                           
  4178                           ; BSR set to: 0
  4179                           
  4180                           ; BSR set to: 0
  4181                           ;doprnt.c: 1307: break;
  4182  007C4E  0100               	movlb	0	; () banked
  4183  007C50  2B8E               	incf	printf@c& (0+255),f,b
  4184  007C52  D7DD               	goto	l3186
  4185  007C54                     u3990:
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;doprnt.c: 1339: if(c < prec)
  4189                           
  4190                           ; BSR set to: 0
  4191  007C54  0E80               	movlw	128
  4192  007C56  0100               	movlb	0	; () banked
  4193  007C58  BF8E               	btfsc	printf@c& (0+255),7,b
  4194  007C5A  0E7F               	movlw	127
  4195  007C5C  0100               	movlb	0	; () banked
  4196  007C5E  6F67               	movwf	??_printf& (0+255),b
  4197  007C60  0100               	movlb	0	; () banked
  4198  007C62  518A               	movf	printf@prec& (0+255),w,b
  4199  007C64  0100               	movlb	0	; () banked
  4200  007C66  5D8E               	subwf	printf@c& (0+255),w,b
  4201  007C68  0100               	movlb	0	; () banked
  4202  007C6A  518B               	movf	(printf@prec+1)& (0+255),w,b
  4203  007C6C  0A80               	xorlw	128
  4204  007C6E  0100               	movlb	0	; () banked
  4205  007C70  5967               	subwfb	??_printf& (0+255),w,b
  4206  007C72  B0D8               	btfsc	status,0,c
  4207  007C74  D003               	goto	l255
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;doprnt.c: 1340: c = prec;
  4211  007C76  C08A  F08E         	movff	printf@prec,printf@c
  4212  007C7A  D018               	goto	l257
  4213  007C7C                     l255:
  4214                           
  4215                           ; BSR set to: 0
  4216                           ;doprnt.c: 1341: else if(prec < c)
  4217                           
  4218                           ; BSR set to: 0
  4219  007C7C  0100               	movlb	0	; () banked
  4220  007C7E  518B               	movf	(printf@prec+1)& (0+255),w,b
  4221  007C80  0A80               	xorlw	128
  4222  007C82  0100               	movlb	0	; () banked
  4223  007C84  6F67               	movwf	??_printf& (0+255),b
  4224  007C86  0100               	movlb	0	; () banked
  4225  007C88  518E               	movf	printf@c& (0+255),w,b
  4226  007C8A  0100               	movlb	0	; () banked
  4227  007C8C  5D8A               	subwf	printf@prec& (0+255),w,b
  4228  007C8E  0E80               	movlw	128
  4229  007C90  0100               	movlb	0	; () banked
  4230  007C92  BF8E               	btfsc	printf@c& (0+255),7,b
  4231  007C94  0E7F               	movlw	127
  4232  007C96  0100               	movlb	0	; () banked
  4233  007C98  5967               	subwfb	??_printf& (0+255),w,b
  4234  007C9A  B0D8               	btfsc	status,0,c
  4235  007C9C  D007               	goto	l257
  4236                           
  4237                           ; BSR set to: 0
  4238                           ;doprnt.c: 1342: prec = c;
  4239  007C9E  0100               	movlb	0	; () banked
  4240  007CA0  518E               	movf	printf@c& (0+255),w,b
  4241  007CA2  0100               	movlb	0	; () banked
  4242  007CA4  6F8A               	movwf	printf@prec& (0+255),b
  4243  007CA6  6B8B               	clrf	(printf@prec+1)& (0+255),b
  4244  007CA8  BF8A               	btfsc	printf@prec& (0+255),7,b
  4245  007CAA  078B               	decf	(printf@prec+1)& (0+255),f,b
  4246  007CAC                     l257:
  4247                           
  4248                           ; BSR set to: 0
  4249                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4250                           
  4251                           ; BSR set to: 0
  4252                           
  4253                           ; BSR set to: 0
  4254  007CAC  0100               	movlb	0	; () banked
  4255  007CAE  517F               	movf	printf@width& (0+255),w,b
  4256  007CB0  0100               	movlb	0	; () banked
  4257  007CB2  1180               	iorwf	(printf@width+1)& (0+255),w,b
  4258  007CB4  B4D8               	btfsc	status,2,c
  4259  007CB6  D014               	goto	l258
  4260                           
  4261                           ; BSR set to: 0
  4262  007CB8  0E03               	movlw	3
  4263  007CBA  0100               	movlb	0	; () banked
  4264  007CBC  158C               	andwf	printf@flag& (0+255),w,b
  4265  007CBE  0100               	movlb	0	; () banked
  4266  007CC0  6F67               	movwf	??_printf& (0+255),b
  4267  007CC2  0E00               	movlw	0
  4268  007CC4  0100               	movlb	0	; () banked
  4269  007CC6  158D               	andwf	(printf@flag+1)& (0+255),w,b
  4270  007CC8  0100               	movlb	0	; () banked
  4271  007CCA  6F68               	movwf	(??_printf+1)& (0+255),b
  4272  007CCC  0100               	movlb	0	; () banked
  4273  007CCE  5167               	movf	??_printf& (0+255),w,b
  4274  007CD0  0100               	movlb	0	; () banked
  4275  007CD2  1168               	iorwf	(??_printf+1)& (0+255),w,b
  4276  007CD4  B4D8               	btfsc	status,2,c
  4277  007CD6  D004               	goto	l258
  4278                           
  4279                           ; BSR set to: 0
  4280                           ;doprnt.c: 1346: width--;
  4281  007CD8  0100               	movlb	0	; () banked
  4282  007CDA  077F               	decf	printf@width& (0+255),f,b
  4283  007CDC  A0D8               	btfss	status,0,c
  4284  007CDE  0780               	decf	(printf@width+1)& (0+255),f,b
  4285  007CE0                     l258:
  4286                           
  4287                           ; BSR set to: 0
  4288                           ;doprnt.c: 1348: if(flag & 0x4000) {
  4289                           
  4290                           ; BSR set to: 0
  4291  007CE0  0100               	movlb	0	; () banked
  4292  007CE2  AD8D               	btfss	(printf@flag+1)& (0+255),6,b
  4293  007CE4  D01E               	goto	l261
  4294                           
  4295                           ; BSR set to: 0
  4296                           ;doprnt.c: 1349: if(width > prec)
  4297  007CE6  0100               	movlb	0	; () banked
  4298  007CE8  517F               	movf	printf@width& (0+255),w,b
  4299  007CEA  0100               	movlb	0	; () banked
  4300  007CEC  5D8A               	subwf	printf@prec& (0+255),w,b
  4301  007CEE  0100               	movlb	0	; () banked
  4302  007CF0  518B               	movf	(printf@prec+1)& (0+255),w,b
  4303  007CF2  0A80               	xorlw	128
  4304  007CF4  0100               	movlb	0	; () banked
  4305  007CF6  6F67               	movwf	??_printf& (0+255),b
  4306  007CF8  0100               	movlb	0	; () banked
  4307  007CFA  5180               	movf	(printf@width+1)& (0+255),w,b
  4308  007CFC  0A80               	xorlw	128
  4309  007CFE  0100               	movlb	0	; () banked
  4310  007D00  5967               	subwfb	??_printf& (0+255),w,b
  4311  007D02  B0D8               	btfsc	status,0,c
  4312  007D04  D009               	goto	l260
  4313                           
  4314                           ; BSR set to: 0
  4315                           ;doprnt.c: 1350: width -= prec;
  4316  007D06  0100               	movlb	0	; () banked
  4317  007D08  518A               	movf	printf@prec& (0+255),w,b
  4318  007D0A  0100               	movlb	0	; () banked
  4319  007D0C  5F7F               	subwf	printf@width& (0+255),f,b
  4320  007D0E  0100               	movlb	0	; () banked
  4321  007D10  518B               	movf	(printf@prec+1)& (0+255),w,b
  4322  007D12  0100               	movlb	0	; () banked
  4323  007D14  5B80               	subwfb	(printf@width+1)& (0+255),f,b
  4324  007D16  D005               	goto	l261
  4325  007D18                     l260:
  4326                           
  4327                           ; BSR set to: 0
  4328                           ;doprnt.c: 1351: else
  4329                           ;doprnt.c: 1352: width = 0;
  4330                           
  4331                           ; BSR set to: 0
  4332  007D18  0E00               	movlw	0
  4333  007D1A  0100               	movlb	0	; () banked
  4334  007D1C  6F80               	movwf	(printf@width+1)& (0+255),b
  4335  007D1E  0E00               	movlw	0
  4336  007D20  6F7F               	movwf	printf@width& (0+255),b
  4337  007D22                     l261:
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;doprnt.c: 1353: }
  4341                           ;doprnt.c: 1381: if(width > c)
  4342                           
  4343                           ; BSR set to: 0
  4344                           
  4345                           ; BSR set to: 0
  4346  007D22  0E80               	movlw	128
  4347  007D24  0100               	movlb	0	; () banked
  4348  007D26  BF8E               	btfsc	printf@c& (0+255),7,b
  4349  007D28  0E7F               	movlw	127
  4350  007D2A  0100               	movlb	0	; () banked
  4351  007D2C  6F67               	movwf	??_printf& (0+255),b
  4352  007D2E  0100               	movlb	0	; () banked
  4353  007D30  517F               	movf	printf@width& (0+255),w,b
  4354  007D32  0100               	movlb	0	; () banked
  4355  007D34  5D8E               	subwf	printf@c& (0+255),w,b
  4356  007D36  0100               	movlb	0	; () banked
  4357  007D38  5180               	movf	(printf@width+1)& (0+255),w,b
  4358  007D3A  0A80               	xorlw	128
  4359  007D3C  0100               	movlb	0	; () banked
  4360  007D3E  5967               	subwfb	??_printf& (0+255),w,b
  4361  007D40  B0D8               	btfsc	status,0,c
  4362  007D42  D00B               	goto	l262
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;doprnt.c: 1382: width -= c;
  4366  007D44  0100               	movlb	0	; () banked
  4367  007D46  518E               	movf	printf@c& (0+255),w,b
  4368  007D48  0100               	movlb	0	; () banked
  4369  007D4A  5F7F               	subwf	printf@width& (0+255),f,b
  4370  007D4C  0E00               	movlw	0
  4371  007D4E  0100               	movlb	0	; () banked
  4372  007D50  BF8E               	btfsc	printf@c& (0+255),7,b
  4373  007D52  0EFF               	movlw	255
  4374  007D54  0100               	movlb	0	; () banked
  4375  007D56  5B80               	subwfb	(printf@width+1)& (0+255),f,b
  4376  007D58  D005               	goto	l263
  4377  007D5A                     l262:
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;doprnt.c: 1383: else
  4381                           ;doprnt.c: 1384: width = 0;
  4382                           
  4383                           ; BSR set to: 0
  4384  007D5A  0E00               	movlw	0
  4385  007D5C  0100               	movlb	0	; () banked
  4386  007D5E  6F80               	movwf	(printf@width+1)& (0+255),b
  4387  007D60  0E00               	movlw	0
  4388  007D62  6F7F               	movwf	printf@width& (0+255),b
  4389  007D64                     l263:
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;doprnt.c: 1422: {
  4393                           ;doprnt.c: 1424: if(width
  4394                           ;doprnt.c: 1426: && !(flag & 0x08)
  4395                           ;doprnt.c: 1428: )
  4396                           
  4397                           ; BSR set to: 0
  4398  007D64  0100               	movlb	0	; () banked
  4399  007D66  517F               	movf	printf@width& (0+255),w,b
  4400  007D68  0100               	movlb	0	; () banked
  4401  007D6A  1180               	iorwf	(printf@width+1)& (0+255),w,b
  4402  007D6C  B4D8               	btfsc	status,2,c
  4403  007D6E  D010               	goto	u4090
  4404                           
  4405                           ; BSR set to: 0
  4406  007D70  0100               	movlb	0	; () banked
  4407  007D72  B78C               	btfsc	printf@flag& (0+255),3,b
  4408  007D74  D00D               	goto	u4090
  4409  007D76                     u4080:
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;doprnt.c: 1430: (putch(' ') );
  4413                           
  4414                           ; BSR set to: 0
  4415                           
  4416                           ;doprnt.c: 1429: do
  4417  007D76  0E20               	movlw	32
  4418  007D78  EC55  F02B         	call	_putch
  4419                           
  4420                           ;doprnt.c: 1431: while(--width);
  4421  007D7C  0100               	movlb	0	; () banked
  4422  007D7E  077F               	decf	printf@width& (0+255),f,b
  4423  007D80  A0D8               	btfss	status,0,c
  4424  007D82  0780               	decf	(printf@width+1)& (0+255),f,b
  4425  007D84  0100               	movlb	0	; () banked
  4426  007D86  517F               	movf	printf@width& (0+255),w,b
  4427  007D88  0100               	movlb	0	; () banked
  4428  007D8A  1180               	iorwf	(printf@width+1)& (0+255),w,b
  4429  007D8C  A4D8               	btfss	status,2,c
  4430  007D8E  D7F3               	goto	u4080
  4431  007D90                     u4090:
  4432                           
  4433                           ; BSR set to: 0
  4434                           ;doprnt.c: 1434: if(flag & 0x02)
  4435                           
  4436                           ; BSR set to: 0
  4437  007D90  0100               	movlb	0	; () banked
  4438  007D92  A38C               	btfss	printf@flag& (0+255),1,b
  4439  007D94  D012               	goto	l267
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;doprnt.c: 1435: (putch(flag & 0x01 ? '-' : '+') );
  4443  007D96  0100               	movlb	0	; () banked
  4444  007D98  B18C               	btfsc	printf@flag& (0+255),0,b
  4445  007D9A  D005               	goto	l269
  4446                           
  4447                           ; BSR set to: 0
  4448  007D9C  0E00               	movlw	0
  4449  007D9E  0100               	movlb	0	; () banked
  4450  007DA0  6F75               	movwf	(_printf$135+1)& (0+255),b
  4451  007DA2  0E2B               	movlw	43
  4452  007DA4  D004               	goto	L7
  4453  007DA6                     l269:
  4454                           
  4455                           ; BSR set to: 0
  4456                           
  4457                           ; BSR set to: 0
  4458  007DA6  0E00               	movlw	0
  4459  007DA8  0100               	movlb	0	; () banked
  4460  007DAA  6F75               	movwf	(_printf$135+1)& (0+255),b
  4461  007DAC  0E2D               	movlw	45
  4462  007DAE                     L7:
  4463  007DAE  6F74               	movwf	_printf$135& (0+255),b
  4464                           
  4465                           ; BSR set to: 0
  4466                           
  4467                           ; BSR set to: 0
  4468  007DB0  0100               	movlb	0	; () banked
  4469  007DB2  5174               	movf	_printf$135& (0+255),w,b
  4470  007DB4  EC55  F02B         	call	_putch
  4471  007DB8  D04A               	goto	l274
  4472  007DBA                     l267:
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;doprnt.c: 1443: else if(flag & 0x01)
  4476  007DBA  0100               	movlb	0	; () banked
  4477  007DBC  A18C               	btfss	printf@flag& (0+255),0,b
  4478  007DBE  D047               	goto	l274
  4479                           
  4480                           ; BSR set to: 0
  4481                           ;doprnt.c: 1444: (putch(' ') );
  4482  007DC0  0E20               	movlw	32
  4483  007DC2  EC55  F02B         	call	_putch
  4484                           
  4485                           ;doprnt.c: 1469: }
  4486                           ;doprnt.c: 1474: while(prec--) {
  4487  007DC6  D043               	goto	l274
  4488  007DC8                     l3244:
  4489                           
  4490                           ;doprnt.c: 1478: {
  4491                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4492  007DC8  C08A  F067         	movff	printf@prec,??_printf
  4493  007DCC  C08B  F068         	movff	printf@prec+1,??_printf+1
  4494  007DD0  0100               	movlb	0	; () banked
  4495  007DD2  90D8               	bcf	status,0,c
  4496  007DD4  3767               	rlcf	??_printf& (0+255),f,b
  4497  007DD6  3768               	rlcf	(??_printf+1)& (0+255),f,b
  4498  007DD8  0100               	movlb	0	; () banked
  4499  007DDA  90D8               	bcf	status,0,c
  4500  007DDC  3767               	rlcf	??_printf& (0+255),f,b
  4501  007DDE  3768               	rlcf	(??_printf+1)& (0+255),f,b
  4502  007DE0  0EB9               	movlw	low _dpowers
  4503  007DE2  0100               	movlb	0	; () banked
  4504  007DE4  2567               	addwf	??_printf& (0+255),w,b
  4505  007DE6  6EF6               	movwf	tblptrl,c
  4506  007DE8  0E7E               	movlw	high _dpowers
  4507  007DEA  2168               	addwfc	(??_printf+1)& (0+255),w,b
  4508  007DEC  6EF7               	movwf	tblptrh,c
  4509  007DEE                     	if	0	;There are less than 3 active tblptr bytes
  4510  007DEE                     	endif
  4511  007DEE  0009               	tblrd		*+
  4512  007DF0  CFF5 F005          	movff	tablat,___lldiv@divisor
  4513  007DF4  0009               	tblrd		*+
  4514  007DF6  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  4515  007DFA  0009               	tblrd		*+
  4516  007DFC  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  4517  007E00  000A               	tblrd		*-
  4518  007E02  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  4519  007E06  C083  F001         	movff	printf@val,___lldiv@dividend
  4520  007E0A  C084  F002         	movff	printf@val+1,___lldiv@dividend+1
  4521  007E0E  C085  F003         	movff	printf@val+2,___lldiv@dividend+2
  4522  007E12  C086  F004         	movff	printf@val+3,___lldiv@dividend+3
  4523  007E16  EC54  F02C         	call	___lldiv	;wreg free
  4524  007E1A  C001  F00E         	movff	?___lldiv,___llmod@dividend
  4525  007E1E  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  4526  007E22  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  4527  007E26  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  4528  007E2A  0E0A               	movlw	10
  4529  007E2C  6E12               	movwf	___llmod@divisor,c
  4530  007E2E  0E00               	movlw	0
  4531  007E30  6E13               	movwf	___llmod@divisor+1,c
  4532  007E32  0E00               	movlw	0
  4533  007E34  6E14               	movwf	___llmod@divisor+2,c
  4534  007E36  0E00               	movlw	0
  4535  007E38  6E15               	movwf	___llmod@divisor+3,c
  4536  007E3A  ECE9  F02B         	call	___llmod	;wreg free
  4537  007E3E  500E               	movf	?___llmod,w,c
  4538  007E40  0F30               	addlw	48
  4539  007E42  0100               	movlb	0	; () banked
  4540  007E44  6F8E               	movwf	printf@c& (0+255),b
  4541                           
  4542                           ; BSR set to: 0
  4543                           ;doprnt.c: 1523: }
  4544                           ;doprnt.c: 1524: (putch(c) );
  4545  007E46  0100               	movlb	0	; () banked
  4546  007E48  518E               	movf	printf@c& (0+255),w,b
  4547  007E4A  EC55  F02B         	call	_putch
  4548  007E4E                     l274:
  4549  007E4E  0100               	movlb	0	; () banked
  4550  007E50  078A               	decf	printf@prec& (0+255),f,b
  4551  007E52  A0D8               	btfss	status,0,c
  4552  007E54  078B               	decf	(printf@prec+1)& (0+255),f,b
  4553  007E56  0100               	movlb	0	; () banked
  4554  007E58  298A               	incf	printf@prec& (0+255),w,b
  4555  007E5A  E1B6               	bnz	l3244
  4556  007E5C  0100               	movlb	0	; () banked
  4557  007E5E  298B               	incf	(printf@prec+1)& (0+255),w,b
  4558  007E60  A4D8               	btfss	status,2,c
  4559  007E62  D7B2               	goto	l275
  4560                           
  4561                           ; BSR set to: 0
  4562                           ;doprnt.c: 1525: }
  4563                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  4564  007E64  0100               	movlb	0	; () banked
  4565  007E66  A78C               	btfss	printf@flag& (0+255),3,b
  4566  007E68  D017               	goto	u4160
  4567                           
  4568                           ; BSR set to: 0
  4569  007E6A  0100               	movlb	0	; () banked
  4570  007E6C  BF80               	btfsc	(printf@width+1)& (0+255),7,b
  4571  007E6E  D014               	goto	u4160
  4572  007E70  0100               	movlb	0	; () banked
  4573  007E72  5180               	movf	(printf@width+1)& (0+255),w,b
  4574  007E74  E104               	bnz	l3252
  4575  007E76  0100               	movlb	0	; () banked
  4576  007E78  057F               	decf	printf@width& (0+255),w,b
  4577  007E7A  A0D8               	btfss	status,0,c
  4578  007E7C  D00D               	goto	u4160
  4579  007E7E                     u4150:
  4580  007E7E                     l3252:
  4581                           
  4582                           ; BSR set to: 0
  4583                           ;doprnt.c: 1530: (putch(' ') );
  4584  007E7E  0E20               	movlw	32
  4585  007E80  EC55  F02B         	call	_putch
  4586                           
  4587                           ;doprnt.c: 1531: while(--width);
  4588  007E84  0100               	movlb	0	; () banked
  4589  007E86  077F               	decf	printf@width& (0+255),f,b
  4590  007E88  A0D8               	btfss	status,0,c
  4591  007E8A  0780               	decf	(printf@width+1)& (0+255),f,b
  4592  007E8C  0100               	movlb	0	; () banked
  4593  007E8E  517F               	movf	printf@width& (0+255),w,b
  4594  007E90  0100               	movlb	0	; () banked
  4595  007E92  1180               	iorwf	(printf@width+1)& (0+255),w,b
  4596  007E94  A4D8               	btfss	status,2,c
  4597  007E96  D7F3               	goto	u4150
  4598  007E98                     u4160:
  4599                           
  4600                           ; BSR set to: 0
  4601                           
  4602                           ; BSR set to: 0
  4603                           
  4604                           ; BSR set to: 0
  4605  007E98  C060  FFF6         	movff	printf@f,tblptrl
  4606  007E9C  C061  FFF7         	movff	printf@f+1,tblptrh
  4607  007EA0  0100               	movlb	0	; () banked
  4608  007EA2  4B60               	infsnz	printf@f& (0+255),f,b
  4609  007EA4  2B61               	incf	(printf@f+1)& (0+255),f,b
  4610  007EA6                     	if	0	;tblptru may be non-zero
  4611  007EA6                     	endif
  4612  007EA6                     	if	0	;tblptru may be non-zero
  4613  007EA6                     	endif
  4614  007EA6  0008               	tblrd		*
  4615  007EA8  CFF5 F08E          	movff	tablat,printf@c
  4616  007EAC  0100               	movlb	0	; () banked
  4617  007EAE  518E               	movf	printf@c& (0+255),w,b
  4618  007EB0  B4D8               	btfsc	status,2,c
  4619  007EB2  0012               	return	
  4620  007EB4  EFEE  F034         	goto	l94
  4621  007EB8                     __end_of_printf:
  4622                           	opt stack 0
  4623                           tblptru	equ	0xFF8
  4624                           tblptrh	equ	0xFF7
  4625                           tblptrl	equ	0xFF6
  4626                           tablat	equ	0xFF5
  4627                           prodh	equ	0xFF4
  4628                           prodl	equ	0xFF3
  4629                           intcon	equ	0xFF2
  4630                           wreg	equ	0xFE8
  4631                           postinc2	equ	0xFDE
  4632                           postdec2	equ	0xFDD
  4633                           fsr2h	equ	0xFDA
  4634                           fsr2l	equ	0xFD9
  4635                           status	equ	0xFD8
  4636                           
  4637 ;; *************** function _scale *****************
  4638 ;; Defined at:
  4639 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  4640 ;; Parameters:    Size  Location     Type
  4641 ;;  scl             1    wreg     char 
  4642 ;; Auto vars:     Size  Location     Type
  4643 ;;  scl             1   68[COMRAM] char 
  4644 ;; Return value:  Size  Location     Type
  4645 ;;                  3   62[COMRAM] char 
  4646 ;; Registers used:
  4647 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4648 ;; Tracked objects:
  4649 ;;		On entry : 0/0
  4650 ;;		On exit  : 0/0
  4651 ;;		Unchanged: 0/0
  4652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4653 ;;      Params:         3       0       0       0       0       0       0
  4654 ;;      Locals:         4       0       0       0       0       0       0
  4655 ;;      Temps:          0       0       0       0       0       0       0
  4656 ;;      Totals:         7       0       0       0       0       0       0
  4657 ;;Total ram usage:        7 bytes
  4658 ;; Hardware stack levels used:    1
  4659 ;; Hardware stack levels required when called:    2
  4660 ;; This function calls:
  4661 ;;		___awdiv
  4662 ;;		___awmod
  4663 ;;		___ftmul
  4664 ;;		___wmul
  4665 ;; This function is called by:
  4666 ;;		_printf
  4667 ;; This function uses a non-reentrant model
  4668 ;;
  4669                           
  4670                           	psect	text3
  4671  0065C4                     __ptext3:
  4672                           	opt stack 0
  4673  0065C4                     _scale:
  4674                           	opt stack 27
  4675                           
  4676                           ; BSR set to: 0
  4677                           ;incstack = 0
  4678                           ;scale@scl stored from wreg
  4679  0065C4  6E45               	movwf	scale@scl,c
  4680                           
  4681                           ;doprnt.c: 428: if(scl < 0) {
  4682  0065C6  AE45               	btfss	scale@scl,7,c
  4683  0065C8  D101               	goto	l83
  4684                           
  4685                           ;doprnt.c: 429: scl = -scl;
  4686  0065CA  6C45               	negf	scale@scl,c
  4687                           
  4688                           ;doprnt.c: 430: if(scl>=110)
  4689  0065CC  5045               	movf	scale@scl,w,c
  4690  0065CE  0A80               	xorlw	128
  4691  0065D0  0F12               	addlw	-238
  4692  0065D2  A0D8               	btfss	status,0,c
  4693  0065D4  D091               	goto	l84
  4694                           
  4695                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4696  0065D6  0E00               	movlw	0
  4697  0065D8  6E12               	movwf	___wmul@multiplicand+1,c
  4698  0065DA  0E03               	movlw	3
  4699  0065DC  6E11               	movwf	___wmul@multiplicand,c
  4700  0065DE  0E00               	movlw	0
  4701  0065E0  6E0A               	movwf	___awdiv@divisor+1,c
  4702  0065E2  0E0A               	movlw	10
  4703  0065E4  6E09               	movwf	___awdiv@divisor,c
  4704  0065E6  0E00               	movlw	0
  4705  0065E8  6E04               	movwf	___awmod@divisor+1,c
  4706  0065EA  0E64               	movlw	100
  4707  0065EC  6E03               	movwf	___awmod@divisor,c
  4708  0065EE  5045               	movf	scale@scl,w,c
  4709  0065F0  6E01               	movwf	___awmod@dividend,c
  4710  0065F2  6A02               	clrf	___awmod@dividend+1,c
  4711  0065F4  BE01               	btfsc	___awmod@dividend,7,c
  4712  0065F6  0602               	decf	___awmod@dividend+1,f,c
  4713  0065F8  EC1C  F02C         	call	___awmod	;wreg free
  4714  0065FC  C001  F007         	movff	?___awmod,___awdiv@dividend
  4715  006600  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4716  006604  EC95  F02C         	call	___awdiv	;wreg free
  4717  006608  0E09               	movlw	9
  4718  00660A  2407               	addwf	?___awdiv,w,c
  4719  00660C  6E0F               	movwf	___wmul@multiplier,c
  4720  00660E  0E00               	movlw	0
  4721  006610  2008               	addwfc	?___awdiv+1,w,c
  4722  006612  6E10               	movwf	___wmul@multiplier+1,c
  4723  006614  EC88  F02B         	call	___wmul	;wreg free
  4724  006618  0E08               	movlw	low __npowers_
  4725  00661A  240F               	addwf	?___wmul,w,c
  4726  00661C  6EF6               	movwf	tblptrl,c
  4727  00661E  0E7F               	movlw	high __npowers_
  4728  006620  2010               	addwfc	?___wmul+1,w,c
  4729  006622  6EF7               	movwf	tblptrh,c
  4730  006624                     	if	0	;There are less than 3 active tblptr bytes
  4731  006624                     	endif
  4732  006624  0009               	tblrd		*+
  4733  006626  CFF5 F033          	movff	tablat,___ftmul@f2
  4734  00662A  0009               	tblrd		*+
  4735  00662C  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4736  006630  000A               	tblrd		*-
  4737  006632  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4738  006636  0E00               	movlw	0
  4739  006638  6E0A               	movwf	___awdiv@divisor+1,c
  4740  00663A  0E64               	movlw	100
  4741  00663C  6E09               	movwf	___awdiv@divisor,c
  4742  00663E  5045               	movf	scale@scl,w,c
  4743  006640  6E07               	movwf	___awdiv@dividend,c
  4744  006642  6A08               	clrf	___awdiv@dividend+1,c
  4745  006644  BE07               	btfsc	___awdiv@dividend,7,c
  4746  006646  0608               	decf	___awdiv@dividend+1,f,c
  4747  006648  EC95  F02C         	call	___awdiv	;wreg free
  4748  00664C  0E12               	movlw	18
  4749  00664E  2407               	addwf	?___awdiv,w,c
  4750  006650  6E0F               	movwf	___wmul@multiplier,c
  4751  006652  0E00               	movlw	0
  4752  006654  2008               	addwfc	?___awdiv+1,w,c
  4753  006656  6E10               	movwf	___wmul@multiplier+1,c
  4754  006658  0E00               	movlw	0
  4755  00665A  6E12               	movwf	___wmul@multiplicand+1,c
  4756  00665C  0E03               	movlw	3
  4757  00665E  6E11               	movwf	___wmul@multiplicand,c
  4758  006660  EC88  F02B         	call	___wmul	;wreg free
  4759  006664  0E08               	movlw	low __npowers_
  4760  006666  240F               	addwf	?___wmul,w,c
  4761  006668  6EF6               	movwf	tblptrl,c
  4762  00666A  0E7F               	movlw	high __npowers_
  4763  00666C  2010               	addwfc	?___wmul+1,w,c
  4764  00666E  6EF7               	movwf	tblptrh,c
  4765  006670                     	if	0	;There are less than 3 active tblptr bytes
  4766  006670                     	endif
  4767  006670  0009               	tblrd		*+
  4768  006672  CFF5 F030          	movff	tablat,___ftmul@f1
  4769  006676  0009               	tblrd		*+
  4770  006678  CFF5 F031          	movff	tablat,___ftmul@f1+1
  4771  00667C  000A               	tblrd		*-
  4772  00667E  CFF5 F032          	movff	tablat,___ftmul@f1+2
  4773  006682  EC63  F02E         	call	___ftmul	;wreg free
  4774  006686  C030  F042         	movff	?___ftmul,_scale$697
  4775  00668A  C031  F043         	movff	?___ftmul+1,_scale$697+1
  4776  00668E  C032  F044         	movff	?___ftmul+2,_scale$697+2
  4777                           
  4778                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4779  006692  C042  F030         	movff	_scale$697,___ftmul@f1
  4780  006696  C043  F031         	movff	_scale$697+1,___ftmul@f1+1
  4781  00669A  C044  F032         	movff	_scale$697+2,___ftmul@f1+2
  4782  00669E  0E00               	movlw	0
  4783  0066A0  6E12               	movwf	___wmul@multiplicand+1,c
  4784  0066A2  0E03               	movlw	3
  4785  0066A4  6E11               	movwf	___wmul@multiplicand,c
  4786  0066A6  0E00               	movlw	0
  4787  0066A8  6E04               	movwf	___awmod@divisor+1,c
  4788  0066AA  0E0A               	movlw	10
  4789  0066AC  6E03               	movwf	___awmod@divisor,c
  4790  0066AE  5045               	movf	scale@scl,w,c
  4791  0066B0  6E01               	movwf	___awmod@dividend,c
  4792  0066B2  6A02               	clrf	___awmod@dividend+1,c
  4793  0066B4  BE01               	btfsc	___awmod@dividend,7,c
  4794  0066B6  0602               	decf	___awmod@dividend+1,f,c
  4795  0066B8  EC1C  F02C         	call	___awmod	;wreg free
  4796  0066BC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4797  0066C0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4798  0066C4  EC88  F02B         	call	___wmul	;wreg free
  4799  0066C8  0E08               	movlw	low __npowers_
  4800  0066CA  240F               	addwf	?___wmul,w,c
  4801  0066CC  6EF6               	movwf	tblptrl,c
  4802  0066CE  0E7F               	movlw	high __npowers_
  4803  0066D0  2010               	addwfc	?___wmul+1,w,c
  4804  0066D2  6EF7               	movwf	tblptrh,c
  4805  0066D4                     	if	0	;There are less than 3 active tblptr bytes
  4806  0066D4                     	endif
  4807  0066D4  0009               	tblrd		*+
  4808  0066D6  CFF5 F033          	movff	tablat,___ftmul@f2
  4809  0066DA  0009               	tblrd		*+
  4810  0066DC  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4811  0066E0  000A               	tblrd		*-
  4812  0066E2  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4813  0066E6  EC63  F02E         	call	___ftmul	;wreg free
  4814  0066EA  C030  F03F         	movff	?___ftmul,?_scale
  4815  0066EE  C031  F040         	movff	?___ftmul+1,?_scale+1
  4816  0066F2  C032  F041         	movff	?___ftmul+2,?_scale+2
  4817  0066F6  0012               	return	
  4818  0066F8                     l84:
  4819                           
  4820                           ;doprnt.c: 432: else if(scl > 10)
  4821  0066F8  5045               	movf	scale@scl,w,c
  4822  0066FA  0A80               	xorlw	128
  4823  0066FC  0F75               	addlw	-139
  4824  0066FE  A0D8               	btfss	status,0,c
  4825  006700  D053               	goto	l87
  4826                           
  4827                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4828  006702  0E00               	movlw	0
  4829  006704  6E0A               	movwf	___awdiv@divisor+1,c
  4830  006706  0E0A               	movlw	10
  4831  006708  6E09               	movwf	___awdiv@divisor,c
  4832  00670A  5045               	movf	scale@scl,w,c
  4833  00670C  6E07               	movwf	___awdiv@dividend,c
  4834  00670E  6A08               	clrf	___awdiv@dividend+1,c
  4835  006710  BE07               	btfsc	___awdiv@dividend,7,c
  4836  006712  0608               	decf	___awdiv@dividend+1,f,c
  4837  006714  EC95  F02C         	call	___awdiv	;wreg free
  4838  006718  0E09               	movlw	9
  4839  00671A  2407               	addwf	?___awdiv,w,c
  4840  00671C  6E0F               	movwf	___wmul@multiplier,c
  4841  00671E  0E00               	movlw	0
  4842  006720  2008               	addwfc	?___awdiv+1,w,c
  4843  006722  6E10               	movwf	___wmul@multiplier+1,c
  4844  006724  0E00               	movlw	0
  4845  006726  6E12               	movwf	___wmul@multiplicand+1,c
  4846  006728  0E03               	movlw	3
  4847  00672A  6E11               	movwf	___wmul@multiplicand,c
  4848  00672C  EC88  F02B         	call	___wmul	;wreg free
  4849  006730  0E08               	movlw	low __npowers_
  4850  006732  240F               	addwf	?___wmul,w,c
  4851  006734  6EF6               	movwf	tblptrl,c
  4852  006736  0E7F               	movlw	high __npowers_
  4853  006738  2010               	addwfc	?___wmul+1,w,c
  4854  00673A  6EF7               	movwf	tblptrh,c
  4855  00673C                     	if	0	;There are less than 3 active tblptr bytes
  4856  00673C                     	endif
  4857  00673C  0009               	tblrd		*+
  4858  00673E  CFF5 F030          	movff	tablat,___ftmul@f1
  4859  006742  0009               	tblrd		*+
  4860  006744  CFF5 F031          	movff	tablat,___ftmul@f1+1
  4861  006748  000A               	tblrd		*-
  4862  00674A  CFF5 F032          	movff	tablat,___ftmul@f1+2
  4863  00674E  0E00               	movlw	0
  4864  006750  6E12               	movwf	___wmul@multiplicand+1,c
  4865  006752  0E03               	movlw	3
  4866  006754  6E11               	movwf	___wmul@multiplicand,c
  4867  006756  0E00               	movlw	0
  4868  006758  6E04               	movwf	___awmod@divisor+1,c
  4869  00675A  0E0A               	movlw	10
  4870  00675C  6E03               	movwf	___awmod@divisor,c
  4871  00675E  5045               	movf	scale@scl,w,c
  4872  006760  6E01               	movwf	___awmod@dividend,c
  4873  006762  6A02               	clrf	___awmod@dividend+1,c
  4874  006764  BE01               	btfsc	___awmod@dividend,7,c
  4875  006766  0602               	decf	___awmod@dividend+1,f,c
  4876  006768  EC1C  F02C         	call	___awmod	;wreg free
  4877  00676C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4878  006770  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4879  006774  EC88  F02B         	call	___wmul	;wreg free
  4880  006778  0E08               	movlw	low __npowers_
  4881  00677A  240F               	addwf	?___wmul,w,c
  4882  00677C  6EF6               	movwf	tblptrl,c
  4883  00677E  0E7F               	movlw	high __npowers_
  4884  006780  2010               	addwfc	?___wmul+1,w,c
  4885  006782  6EF7               	movwf	tblptrh,c
  4886  006784                     	if	0	;There are less than 3 active tblptr bytes
  4887  006784                     	endif
  4888  006784  0009               	tblrd		*+
  4889  006786  CFF5 F033          	movff	tablat,___ftmul@f2
  4890  00678A  0009               	tblrd		*+
  4891  00678C  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4892  006790  000A               	tblrd		*-
  4893  006792  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4894  006796  EC63  F02E         	call	___ftmul	;wreg free
  4895  00679A  C030  F03F         	movff	?___ftmul,?_scale
  4896  00679E  C031  F040         	movff	?___ftmul+1,?_scale+1
  4897  0067A2  C032  F041         	movff	?___ftmul+2,?_scale+2
  4898  0067A6  0012               	return	
  4899  0067A8                     l87:
  4900                           
  4901                           ;doprnt.c: 434: return _npowers_[scl];
  4902  0067A8  5045               	movf	scale@scl,w,c
  4903  0067AA  0D03               	mullw	3
  4904  0067AC  0E08               	movlw	low __npowers_
  4905  0067AE  24F3               	addwf	prodl,w,c
  4906  0067B0  6EF6               	movwf	tblptrl,c
  4907  0067B2  0E7F               	movlw	high __npowers_
  4908  0067B4  20F4               	addwfc	prodh,w,c
  4909  0067B6  6EF7               	movwf	tblptrh,c
  4910  0067B8                     	if	0	;There are less than 3 active tblptr bytes
  4911  0067B8                     	endif
  4912  0067B8  0009               	tblrd		*+
  4913  0067BA  CFF5 F03F          	movff	tablat,?_scale
  4914  0067BE  0009               	tblrd		*+
  4915  0067C0  CFF5 F040          	movff	tablat,?_scale+1
  4916  0067C4  000A               	tblrd		*-
  4917  0067C6  CFF5 F041          	movff	tablat,?_scale+2
  4918  0067CA  0012               	return	
  4919  0067CC                     l83:
  4920                           
  4921                           ;doprnt.c: 435: }
  4922                           ;doprnt.c: 436: if(scl>=110)
  4923  0067CC  5045               	movf	scale@scl,w,c
  4924  0067CE  0A80               	xorlw	128
  4925  0067D0  0F12               	addlw	-238
  4926  0067D2  A0D8               	btfss	status,0,c
  4927  0067D4  D091               	goto	l88
  4928                           
  4929                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4930  0067D6  0E00               	movlw	0
  4931  0067D8  6E12               	movwf	___wmul@multiplicand+1,c
  4932  0067DA  0E03               	movlw	3
  4933  0067DC  6E11               	movwf	___wmul@multiplicand,c
  4934  0067DE  0E00               	movlw	0
  4935  0067E0  6E0A               	movwf	___awdiv@divisor+1,c
  4936  0067E2  0E0A               	movlw	10
  4937  0067E4  6E09               	movwf	___awdiv@divisor,c
  4938  0067E6  0E00               	movlw	0
  4939  0067E8  6E04               	movwf	___awmod@divisor+1,c
  4940  0067EA  0E64               	movlw	100
  4941  0067EC  6E03               	movwf	___awmod@divisor,c
  4942  0067EE  5045               	movf	scale@scl,w,c
  4943  0067F0  6E01               	movwf	___awmod@dividend,c
  4944  0067F2  6A02               	clrf	___awmod@dividend+1,c
  4945  0067F4  BE01               	btfsc	___awmod@dividend,7,c
  4946  0067F6  0602               	decf	___awmod@dividend+1,f,c
  4947  0067F8  EC1C  F02C         	call	___awmod	;wreg free
  4948  0067FC  C001  F007         	movff	?___awmod,___awdiv@dividend
  4949  006800  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4950  006804  EC95  F02C         	call	___awdiv	;wreg free
  4951  006808  0E09               	movlw	9
  4952  00680A  2407               	addwf	?___awdiv,w,c
  4953  00680C  6E0F               	movwf	___wmul@multiplier,c
  4954  00680E  0E00               	movlw	0
  4955  006810  2008               	addwfc	?___awdiv+1,w,c
  4956  006812  6E10               	movwf	___wmul@multiplier+1,c
  4957  006814  EC88  F02B         	call	___wmul	;wreg free
  4958  006818  0EE1               	movlw	low __powers_
  4959  00681A  240F               	addwf	?___wmul,w,c
  4960  00681C  6EF6               	movwf	tblptrl,c
  4961  00681E  0E7E               	movlw	high __powers_
  4962  006820  2010               	addwfc	?___wmul+1,w,c
  4963  006822  6EF7               	movwf	tblptrh,c
  4964  006824                     	if	0	;There are less than 3 active tblptr bytes
  4965  006824                     	endif
  4966  006824  0009               	tblrd		*+
  4967  006826  CFF5 F033          	movff	tablat,___ftmul@f2
  4968  00682A  0009               	tblrd		*+
  4969  00682C  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4970  006830  000A               	tblrd		*-
  4971  006832  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4972  006836  0E00               	movlw	0
  4973  006838  6E0A               	movwf	___awdiv@divisor+1,c
  4974  00683A  0E64               	movlw	100
  4975  00683C  6E09               	movwf	___awdiv@divisor,c
  4976  00683E  5045               	movf	scale@scl,w,c
  4977  006840  6E07               	movwf	___awdiv@dividend,c
  4978  006842  6A08               	clrf	___awdiv@dividend+1,c
  4979  006844  BE07               	btfsc	___awdiv@dividend,7,c
  4980  006846  0608               	decf	___awdiv@dividend+1,f,c
  4981  006848  EC95  F02C         	call	___awdiv	;wreg free
  4982  00684C  0E12               	movlw	18
  4983  00684E  2407               	addwf	?___awdiv,w,c
  4984  006850  6E0F               	movwf	___wmul@multiplier,c
  4985  006852  0E00               	movlw	0
  4986  006854  2008               	addwfc	?___awdiv+1,w,c
  4987  006856  6E10               	movwf	___wmul@multiplier+1,c
  4988  006858  0E00               	movlw	0
  4989  00685A  6E12               	movwf	___wmul@multiplicand+1,c
  4990  00685C  0E03               	movlw	3
  4991  00685E  6E11               	movwf	___wmul@multiplicand,c
  4992  006860  EC88  F02B         	call	___wmul	;wreg free
  4993  006864  0EE1               	movlw	low __powers_
  4994  006866  240F               	addwf	?___wmul,w,c
  4995  006868  6EF6               	movwf	tblptrl,c
  4996  00686A  0E7E               	movlw	high __powers_
  4997  00686C  2010               	addwfc	?___wmul+1,w,c
  4998  00686E  6EF7               	movwf	tblptrh,c
  4999  006870                     	if	0	;There are less than 3 active tblptr bytes
  5000  006870                     	endif
  5001  006870  0009               	tblrd		*+
  5002  006872  CFF5 F030          	movff	tablat,___ftmul@f1
  5003  006876  0009               	tblrd		*+
  5004  006878  CFF5 F031          	movff	tablat,___ftmul@f1+1
  5005  00687C  000A               	tblrd		*-
  5006  00687E  CFF5 F032          	movff	tablat,___ftmul@f1+2
  5007  006882  EC63  F02E         	call	___ftmul	;wreg free
  5008  006886  C030  F042         	movff	?___ftmul,_scale$697
  5009  00688A  C031  F043         	movff	?___ftmul+1,_scale$697+1
  5010  00688E  C032  F044         	movff	?___ftmul+2,_scale$697+2
  5011                           
  5012                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5013  006892  C042  F030         	movff	_scale$697,___ftmul@f1
  5014  006896  C043  F031         	movff	_scale$697+1,___ftmul@f1+1
  5015  00689A  C044  F032         	movff	_scale$697+2,___ftmul@f1+2
  5016  00689E  0E00               	movlw	0
  5017  0068A0  6E12               	movwf	___wmul@multiplicand+1,c
  5018  0068A2  0E03               	movlw	3
  5019  0068A4  6E11               	movwf	___wmul@multiplicand,c
  5020  0068A6  0E00               	movlw	0
  5021  0068A8  6E04               	movwf	___awmod@divisor+1,c
  5022  0068AA  0E0A               	movlw	10
  5023  0068AC  6E03               	movwf	___awmod@divisor,c
  5024  0068AE  5045               	movf	scale@scl,w,c
  5025  0068B0  6E01               	movwf	___awmod@dividend,c
  5026  0068B2  6A02               	clrf	___awmod@dividend+1,c
  5027  0068B4  BE01               	btfsc	___awmod@dividend,7,c
  5028  0068B6  0602               	decf	___awmod@dividend+1,f,c
  5029  0068B8  EC1C  F02C         	call	___awmod	;wreg free
  5030  0068BC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  5031  0068C0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  5032  0068C4  EC88  F02B         	call	___wmul	;wreg free
  5033  0068C8  0EE1               	movlw	low __powers_
  5034  0068CA  240F               	addwf	?___wmul,w,c
  5035  0068CC  6EF6               	movwf	tblptrl,c
  5036  0068CE  0E7E               	movlw	high __powers_
  5037  0068D0  2010               	addwfc	?___wmul+1,w,c
  5038  0068D2  6EF7               	movwf	tblptrh,c
  5039  0068D4                     	if	0	;There are less than 3 active tblptr bytes
  5040  0068D4                     	endif
  5041  0068D4  0009               	tblrd		*+
  5042  0068D6  CFF5 F033          	movff	tablat,___ftmul@f2
  5043  0068DA  0009               	tblrd		*+
  5044  0068DC  CFF5 F034          	movff	tablat,___ftmul@f2+1
  5045  0068E0  000A               	tblrd		*-
  5046  0068E2  CFF5 F035          	movff	tablat,___ftmul@f2+2
  5047  0068E6  EC63  F02E         	call	___ftmul	;wreg free
  5048  0068EA  C030  F03F         	movff	?___ftmul,?_scale
  5049  0068EE  C031  F040         	movff	?___ftmul+1,?_scale+1
  5050  0068F2  C032  F041         	movff	?___ftmul+2,?_scale+2
  5051  0068F6  0012               	return	
  5052  0068F8                     l88:
  5053                           
  5054                           ;doprnt.c: 438: else if(scl > 10)
  5055  0068F8  5045               	movf	scale@scl,w,c
  5056  0068FA  0A80               	xorlw	128
  5057  0068FC  0F75               	addlw	-139
  5058  0068FE  A0D8               	btfss	status,0,c
  5059  006900  D053               	goto	l90
  5060                           
  5061                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5062  006902  0E00               	movlw	0
  5063  006904  6E0A               	movwf	___awdiv@divisor+1,c
  5064  006906  0E0A               	movlw	10
  5065  006908  6E09               	movwf	___awdiv@divisor,c
  5066  00690A  5045               	movf	scale@scl,w,c
  5067  00690C  6E07               	movwf	___awdiv@dividend,c
  5068  00690E  6A08               	clrf	___awdiv@dividend+1,c
  5069  006910  BE07               	btfsc	___awdiv@dividend,7,c
  5070  006912  0608               	decf	___awdiv@dividend+1,f,c
  5071  006914  EC95  F02C         	call	___awdiv	;wreg free
  5072  006918  0E09               	movlw	9
  5073  00691A  2407               	addwf	?___awdiv,w,c
  5074  00691C  6E0F               	movwf	___wmul@multiplier,c
  5075  00691E  0E00               	movlw	0
  5076  006920  2008               	addwfc	?___awdiv+1,w,c
  5077  006922  6E10               	movwf	___wmul@multiplier+1,c
  5078  006924  0E00               	movlw	0
  5079  006926  6E12               	movwf	___wmul@multiplicand+1,c
  5080  006928  0E03               	movlw	3
  5081  00692A  6E11               	movwf	___wmul@multiplicand,c
  5082  00692C  EC88  F02B         	call	___wmul	;wreg free
  5083  006930  0EE1               	movlw	low __powers_
  5084  006932  240F               	addwf	?___wmul,w,c
  5085  006934  6EF6               	movwf	tblptrl,c
  5086  006936  0E7E               	movlw	high __powers_
  5087  006938  2010               	addwfc	?___wmul+1,w,c
  5088  00693A  6EF7               	movwf	tblptrh,c
  5089  00693C                     	if	0	;There are less than 3 active tblptr bytes
  5090  00693C                     	endif
  5091  00693C  0009               	tblrd		*+
  5092  00693E  CFF5 F030          	movff	tablat,___ftmul@f1
  5093  006942  0009               	tblrd		*+
  5094  006944  CFF5 F031          	movff	tablat,___ftmul@f1+1
  5095  006948  000A               	tblrd		*-
  5096  00694A  CFF5 F032          	movff	tablat,___ftmul@f1+2
  5097  00694E  0E00               	movlw	0
  5098  006950  6E12               	movwf	___wmul@multiplicand+1,c
  5099  006952  0E03               	movlw	3
  5100  006954  6E11               	movwf	___wmul@multiplicand,c
  5101  006956  0E00               	movlw	0
  5102  006958  6E04               	movwf	___awmod@divisor+1,c
  5103  00695A  0E0A               	movlw	10
  5104  00695C  6E03               	movwf	___awmod@divisor,c
  5105  00695E  5045               	movf	scale@scl,w,c
  5106  006960  6E01               	movwf	___awmod@dividend,c
  5107  006962  6A02               	clrf	___awmod@dividend+1,c
  5108  006964  BE01               	btfsc	___awmod@dividend,7,c
  5109  006966  0602               	decf	___awmod@dividend+1,f,c
  5110  006968  EC1C  F02C         	call	___awmod	;wreg free
  5111  00696C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  5112  006970  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  5113  006974  EC88  F02B         	call	___wmul	;wreg free
  5114  006978  0EE1               	movlw	low __powers_
  5115  00697A  240F               	addwf	?___wmul,w,c
  5116  00697C  6EF6               	movwf	tblptrl,c
  5117  00697E  0E7E               	movlw	high __powers_
  5118  006980  2010               	addwfc	?___wmul+1,w,c
  5119  006982  6EF7               	movwf	tblptrh,c
  5120  006984                     	if	0	;There are less than 3 active tblptr bytes
  5121  006984                     	endif
  5122  006984  0009               	tblrd		*+
  5123  006986  CFF5 F033          	movff	tablat,___ftmul@f2
  5124  00698A  0009               	tblrd		*+
  5125  00698C  CFF5 F034          	movff	tablat,___ftmul@f2+1
  5126  006990  000A               	tblrd		*-
  5127  006992  CFF5 F035          	movff	tablat,___ftmul@f2+2
  5128  006996  EC63  F02E         	call	___ftmul	;wreg free
  5129  00699A  C030  F03F         	movff	?___ftmul,?_scale
  5130  00699E  C031  F040         	movff	?___ftmul+1,?_scale+1
  5131  0069A2  C032  F041         	movff	?___ftmul+2,?_scale+2
  5132  0069A6  0012               	return	
  5133  0069A8                     l90:
  5134                           
  5135                           ;doprnt.c: 440: return _powers_[scl];
  5136  0069A8  5045               	movf	scale@scl,w,c
  5137  0069AA  0D03               	mullw	3
  5138  0069AC  0EE1               	movlw	low __powers_
  5139  0069AE  24F3               	addwf	prodl,w,c
  5140  0069B0  6EF6               	movwf	tblptrl,c
  5141  0069B2  0E7E               	movlw	high __powers_
  5142  0069B4  20F4               	addwfc	prodh,w,c
  5143  0069B6  6EF7               	movwf	tblptrh,c
  5144  0069B8                     	if	0	;There are less than 3 active tblptr bytes
  5145  0069B8                     	endif
  5146  0069B8  0009               	tblrd		*+
  5147  0069BA  CFF5 F03F          	movff	tablat,?_scale
  5148  0069BE  0009               	tblrd		*+
  5149  0069C0  CFF5 F040          	movff	tablat,?_scale+1
  5150  0069C4  000A               	tblrd		*-
  5151  0069C6  CFF5 F041          	movff	tablat,?_scale+2
  5152  0069CA  0012               	return	
  5153  0069CC                     __end_of_scale:
  5154                           	opt stack 0
  5155                           tblptru	equ	0xFF8
  5156                           tblptrh	equ	0xFF7
  5157                           tblptrl	equ	0xFF6
  5158                           tablat	equ	0xFF5
  5159                           prodh	equ	0xFF4
  5160                           prodl	equ	0xFF3
  5161                           intcon	equ	0xFF2
  5162                           wreg	equ	0xFE8
  5163                           postinc2	equ	0xFDE
  5164                           postdec2	equ	0xFDD
  5165                           fsr2h	equ	0xFDA
  5166                           fsr2l	equ	0xFD9
  5167                           status	equ	0xFD8
  5168                           
  5169 ;; *************** function _putch *****************
  5170 ;; Defined at:
  5171 ;;		line 6 in file "//nsccdtfs4/students/W0401926/Assignments/Microcontrollers/files/usart.c"
  5172 ;; Parameters:    Size  Location     Type
  5173 ;;  byte            1    wreg     unsigned char 
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;  byte            1    0[COMRAM] unsigned char 
  5176 ;; Return value:  Size  Location     Type
  5177 ;;                  1    wreg      void 
  5178 ;; Registers used:
  5179 ;;		wreg
  5180 ;; Tracked objects:
  5181 ;;		On entry : 0/0
  5182 ;;		On exit  : 0/0
  5183 ;;		Unchanged: 0/0
  5184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5185 ;;      Params:         0       0       0       0       0       0       0
  5186 ;;      Locals:         1       0       0       0       0       0       0
  5187 ;;      Temps:          0       0       0       0       0       0       0
  5188 ;;      Totals:         1       0       0       0       0       0       0
  5189 ;;Total ram usage:        1 bytes
  5190 ;; Hardware stack levels used:    1
  5191 ;; This function calls:
  5192 ;;		Nothing
  5193 ;; This function is called by:
  5194 ;;		_printf
  5195 ;;		_getche
  5196 ;; This function uses a non-reentrant model
  5197 ;;
  5198                           
  5199                           	psect	text4
  5200  0056AA                     __ptext4:
  5201                           	opt stack 0
  5202  0056AA                     _putch:
  5203                           	opt stack 29
  5204                           
  5205                           ;incstack = 0
  5206                           ;putch@byte stored from wreg
  5207  0056AA  6E01               	movwf	putch@byte,c
  5208  0056AC                     
  5209                           ;usart.c: 10: continue;
  5210                           
  5211                           ;usart.c: 9: while(!TXIF)
  5212  0056AC  A89E               	btfss	3998,4,c	;volatile
  5213  0056AE  D7FE               	goto	l2378
  5214                           
  5215                           ;usart.c: 11: TXREG = byte;
  5216  0056B0  C001  FFAD         	movff	putch@byte,4013	;volatile
  5217  0056B4  0012               	return		;funcret
  5218  0056B6                     __end_of_putch:
  5219                           	opt stack 0
  5220                           tblptru	equ	0xFF8
  5221                           tblptrh	equ	0xFF7
  5222                           tblptrl	equ	0xFF6
  5223                           tablat	equ	0xFF5
  5224                           prodh	equ	0xFF4
  5225                           prodl	equ	0xFF3
  5226                           intcon	equ	0xFF2
  5227                           wreg	equ	0xFE8
  5228                           postinc2	equ	0xFDE
  5229                           postdec2	equ	0xFDD
  5230                           fsr2h	equ	0xFDA
  5231                           fsr2l	equ	0xFD9
  5232                           status	equ	0xFD8
  5233                           
  5234 ;; *************** function _isdigit *****************
  5235 ;; Defined at:
  5236 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isdigit.c"
  5237 ;; Parameters:    Size  Location     Type
  5238 ;;  c               1    wreg     unsigned char 
  5239 ;; Auto vars:     Size  Location     Type
  5240 ;;  c               1    2[COMRAM] unsigned char 
  5241 ;; Return value:  Size  Location     Type
  5242 ;;		None               void
  5243 ;; Registers used:
  5244 ;;		wreg, status,2, status,0
  5245 ;; Tracked objects:
  5246 ;;		On entry : 0/0
  5247 ;;		On exit  : 0/0
  5248 ;;		Unchanged: 0/0
  5249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5250 ;;      Params:         0       0       0       0       0       0       0
  5251 ;;      Locals:         2       0       0       0       0       0       0
  5252 ;;      Temps:          1       0       0       0       0       0       0
  5253 ;;      Totals:         3       0       0       0       0       0       0
  5254 ;;Total ram usage:        3 bytes
  5255 ;; Hardware stack levels used:    1
  5256 ;; This function calls:
  5257 ;;		Nothing
  5258 ;; This function is called by:
  5259 ;;		_printf
  5260 ;; This function uses a non-reentrant model
  5261 ;;
  5262                           
  5263                           	psect	text5
  5264  0056CE                     __ptext5:
  5265                           	opt stack 0
  5266  0056CE                     _isdigit:
  5267                           	opt stack 29
  5268                           
  5269                           ;incstack = 0
  5270                           ;isdigit@c stored from wreg
  5271  0056CE  6E03               	movwf	isdigit@c,c
  5272  0056D0  0E00               	movlw	0
  5273  0056D2  6E02               	movwf	_isdigit$361,c
  5274  0056D4  0E3A               	movlw	58
  5275  0056D6  6003               	cpfslt	isdigit@c,c
  5276  0056D8  D005               	goto	l645
  5277  0056DA  0E2F               	movlw	47
  5278  0056DC  6403               	cpfsgt	isdigit@c,c
  5279  0056DE  D002               	goto	l645
  5280  0056E0  0E01               	movlw	1
  5281  0056E2  6E02               	movwf	_isdigit$361,c
  5282  0056E4                     l645:
  5283  0056E4  C002  F001         	movff	_isdigit$361,??_isdigit
  5284  0056E8  3001               	rrcf	??_isdigit,w,c
  5285  0056EA  0012               	return	
  5286  0056EC                     __end_of_isdigit:
  5287                           	opt stack 0
  5288                           tblptru	equ	0xFF8
  5289                           tblptrh	equ	0xFF7
  5290                           tblptrl	equ	0xFF6
  5291                           tablat	equ	0xFF5
  5292                           prodh	equ	0xFF4
  5293                           prodl	equ	0xFF3
  5294                           intcon	equ	0xFF2
  5295                           wreg	equ	0xFE8
  5296                           postinc2	equ	0xFDE
  5297                           postdec2	equ	0xFDD
  5298                           fsr2h	equ	0xFDA
  5299                           fsr2l	equ	0xFD9
  5300                           status	equ	0xFD8
  5301                           
  5302 ;; *************** function _fround *****************
  5303 ;; Defined at:
  5304 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  5305 ;; Parameters:    Size  Location     Type
  5306 ;;  prec            1    wreg     unsigned char 
  5307 ;; Auto vars:     Size  Location     Type
  5308 ;;  prec            1   71[COMRAM] unsigned char 
  5309 ;; Return value:  Size  Location     Type
  5310 ;;                  3   62[COMRAM] unsigned char 
  5311 ;; Registers used:
  5312 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5313 ;; Tracked objects:
  5314 ;;		On entry : 0/0
  5315 ;;		On exit  : 0/0
  5316 ;;		Unchanged: 0/0
  5317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5318 ;;      Params:         3       0       0       0       0       0       0
  5319 ;;      Locals:         7       0       0       0       0       0       0
  5320 ;;      Temps:          0       0       0       0       0       0       0
  5321 ;;      Totals:        10       0       0       0       0       0       0
  5322 ;;Total ram usage:       10 bytes
  5323 ;; Hardware stack levels used:    1
  5324 ;; Hardware stack levels required when called:    2
  5325 ;; This function calls:
  5326 ;;		___awdiv
  5327 ;;		___awmod
  5328 ;;		___ftmul
  5329 ;;		___wmul
  5330 ;; This function is called by:
  5331 ;;		_printf
  5332 ;; This function uses a non-reentrant model
  5333 ;;
  5334                           
  5335                           	psect	text6
  5336  006372                     __ptext6:
  5337                           	opt stack 0
  5338  006372                     _fround:
  5339                           	opt stack 27
  5340                           
  5341                           ;incstack = 0
  5342                           ;fround@prec stored from wreg
  5343  006372  6E48               	movwf	fround@prec,c
  5344                           
  5345                           ;doprnt.c: 413: if(prec>=110)
  5346  006374  0E6D               	movlw	109
  5347  006376  6448               	cpfsgt	fround@prec,c
  5348  006378  D09F               	goto	l77
  5349                           
  5350                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5351  00637A  0E00               	movlw	0
  5352  00637C  6E12               	movwf	___wmul@multiplicand+1,c
  5353  00637E  0E03               	movlw	3
  5354  006380  6E11               	movwf	___wmul@multiplicand,c
  5355  006382  0E00               	movlw	0
  5356  006384  6E0A               	movwf	___awdiv@divisor+1,c
  5357  006386  0E0A               	movlw	10
  5358  006388  6E09               	movwf	___awdiv@divisor,c
  5359  00638A  0E00               	movlw	0
  5360  00638C  6E04               	movwf	___awmod@divisor+1,c
  5361  00638E  0E64               	movlw	100
  5362  006390  6E03               	movwf	___awmod@divisor,c
  5363  006392  C048  F001         	movff	fround@prec,___awmod@dividend
  5364  006396  6A02               	clrf	___awmod@dividend+1,c
  5365  006398  EC1C  F02C         	call	___awmod	;wreg free
  5366  00639C  C001  F007         	movff	?___awmod,___awdiv@dividend
  5367  0063A0  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  5368  0063A4  EC95  F02C         	call	___awdiv	;wreg free
  5369  0063A8  0E09               	movlw	9
  5370  0063AA  2407               	addwf	?___awdiv,w,c
  5371  0063AC  6E0F               	movwf	___wmul@multiplier,c
  5372  0063AE  0E00               	movlw	0
  5373  0063B0  2008               	addwfc	?___awdiv+1,w,c
  5374  0063B2  6E10               	movwf	___wmul@multiplier+1,c
  5375  0063B4  EC88  F02B         	call	___wmul	;wreg free
  5376  0063B8  0E08               	movlw	low __npowers_
  5377  0063BA  240F               	addwf	?___wmul,w,c
  5378  0063BC  6EF6               	movwf	tblptrl,c
  5379  0063BE  0E7F               	movlw	high __npowers_
  5380  0063C0  2010               	addwfc	?___wmul+1,w,c
  5381  0063C2  6EF7               	movwf	tblptrh,c
  5382  0063C4                     	if	0	;There are less than 3 active tblptr bytes
  5383  0063C4                     	endif
  5384  0063C4  0009               	tblrd		*+
  5385  0063C6  CFF5 F033          	movff	tablat,___ftmul@f2
  5386  0063CA  0009               	tblrd		*+
  5387  0063CC  CFF5 F034          	movff	tablat,___ftmul@f2+1
  5388  0063D0  000A               	tblrd		*-
  5389  0063D2  CFF5 F035          	movff	tablat,___ftmul@f2+2
  5390  0063D6  0E00               	movlw	0
  5391  0063D8  6E0A               	movwf	___awdiv@divisor+1,c
  5392  0063DA  0E64               	movlw	100
  5393  0063DC  6E09               	movwf	___awdiv@divisor,c
  5394  0063DE  C048  F007         	movff	fround@prec,___awdiv@dividend
  5395  0063E2  6A08               	clrf	___awdiv@dividend+1,c
  5396  0063E4  EC95  F02C         	call	___awdiv	;wreg free
  5397  0063E8  0E12               	movlw	18
  5398  0063EA  2407               	addwf	?___awdiv,w,c
  5399  0063EC  6E0F               	movwf	___wmul@multiplier,c
  5400  0063EE  0E00               	movlw	0
  5401  0063F0  2008               	addwfc	?___awdiv+1,w,c
  5402  0063F2  6E10               	movwf	___wmul@multiplier+1,c
  5403  0063F4  0E00               	movlw	0
  5404  0063F6  6E12               	movwf	___wmul@multiplicand+1,c
  5405  0063F8  0E03               	movlw	3
  5406  0063FA  6E11               	movwf	___wmul@multiplicand,c
  5407  0063FC  EC88  F02B         	call	___wmul	;wreg free
  5408  006400  0E08               	movlw	low __npowers_
  5409  006402  240F               	addwf	?___wmul,w,c
  5410  006404  6EF6               	movwf	tblptrl,c
  5411  006406  0E7F               	movlw	high __npowers_
  5412  006408  2010               	addwfc	?___wmul+1,w,c
  5413  00640A  6EF7               	movwf	tblptrh,c
  5414  00640C                     	if	0	;There are less than 3 active tblptr bytes
  5415  00640C                     	endif
  5416  00640C  0009               	tblrd		*+
  5417  00640E  CFF5 F030          	movff	tablat,___ftmul@f1
  5418  006412  0009               	tblrd		*+
  5419  006414  CFF5 F031          	movff	tablat,___ftmul@f1+1
  5420  006418  000A               	tblrd		*-
  5421  00641A  CFF5 F032          	movff	tablat,___ftmul@f1+2
  5422  00641E  EC63  F02E         	call	___ftmul	;wreg free
  5423  006422  C030  F045         	movff	?___ftmul,_fround$695
  5424  006426  C031  F046         	movff	?___ftmul+1,_fround$695+1
  5425  00642A  C032  F047         	movff	?___ftmul+2,_fround$695+2
  5426                           
  5427                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5428  00642E  0E00               	movlw	0
  5429  006430  6E12               	movwf	___wmul@multiplicand+1,c
  5430  006432  0E03               	movlw	3
  5431  006434  6E11               	movwf	___wmul@multiplicand,c
  5432  006436  0E00               	movlw	0
  5433  006438  6E04               	movwf	___awmod@divisor+1,c
  5434  00643A  0E0A               	movlw	10
  5435  00643C  6E03               	movwf	___awmod@divisor,c
  5436  00643E  C048  F001         	movff	fround@prec,___awmod@dividend
  5437  006442  6A02               	clrf	___awmod@dividend+1,c
  5438  006444  EC1C  F02C         	call	___awmod	;wreg free
  5439  006448  C001  F00F         	movff	?___awmod,___wmul@multiplier
  5440  00644C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  5441  006450  EC88  F02B         	call	___wmul	;wreg free
  5442  006454  0E08               	movlw	low __npowers_
  5443  006456  240F               	addwf	?___wmul,w,c
  5444  006458  6EF6               	movwf	tblptrl,c
  5445  00645A  0E7F               	movlw	high __npowers_
  5446  00645C  2010               	addwfc	?___wmul+1,w,c
  5447  00645E  6EF7               	movwf	tblptrh,c
  5448  006460                     	if	0	;There are less than 3 active tblptr bytes
  5449  006460                     	endif
  5450  006460  0009               	tblrd		*+
  5451  006462  CFF5 F033          	movff	tablat,___ftmul@f2
  5452  006466  0009               	tblrd		*+
  5453  006468  CFF5 F034          	movff	tablat,___ftmul@f2+1
  5454  00646C  000A               	tblrd		*-
  5455  00646E  CFF5 F035          	movff	tablat,___ftmul@f2+2
  5456  006472  C045  F030         	movff	_fround$695,___ftmul@f1
  5457  006476  C046  F031         	movff	_fround$695+1,___ftmul@f1+1
  5458  00647A  C047  F032         	movff	_fround$695+2,___ftmul@f1+2
  5459  00647E  EC63  F02E         	call	___ftmul	;wreg free
  5460  006482  C030  F042         	movff	?___ftmul,_fround$696
  5461  006486  C031  F043         	movff	?___ftmul+1,_fround$696+1
  5462  00648A  C032  F044         	movff	?___ftmul+2,_fround$696+2
  5463                           
  5464                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5465  00648E  C042  F030         	movff	_fround$696,___ftmul@f1
  5466  006492  C043  F031         	movff	_fround$696+1,___ftmul@f1+1
  5467  006496  C044  F032         	movff	_fround$696+2,___ftmul@f1+2
  5468  00649A  0E00               	movlw	0
  5469  00649C  6E33               	movwf	___ftmul@f2,c
  5470  00649E  0E00               	movlw	0
  5471  0064A0  6E34               	movwf	___ftmul@f2+1,c
  5472  0064A2  0E3F               	movlw	63
  5473  0064A4  6E35               	movwf	___ftmul@f2+2,c
  5474  0064A6  EC63  F02E         	call	___ftmul	;wreg free
  5475  0064AA  C030  F03F         	movff	?___ftmul,?_fround
  5476  0064AE  C031  F040         	movff	?___ftmul+1,?_fround+1
  5477  0064B2  C032  F041         	movff	?___ftmul+2,?_fround+2
  5478  0064B6  0012               	return	
  5479  0064B8                     l77:
  5480                           
  5481                           ;doprnt.c: 415: else if(prec > 10)
  5482  0064B8  0E0A               	movlw	10
  5483  0064BA  6448               	cpfsgt	fround@prec,c
  5484  0064BC  D063               	goto	l80
  5485                           
  5486                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5487  0064BE  0E00               	movlw	0
  5488  0064C0  6E12               	movwf	___wmul@multiplicand+1,c
  5489  0064C2  0E03               	movlw	3
  5490  0064C4  6E11               	movwf	___wmul@multiplicand,c
  5491  0064C6  0E00               	movlw	0
  5492  0064C8  6E04               	movwf	___awmod@divisor+1,c
  5493  0064CA  0E0A               	movlw	10
  5494  0064CC  6E03               	movwf	___awmod@divisor,c
  5495  0064CE  C048  F001         	movff	fround@prec,___awmod@dividend
  5496  0064D2  6A02               	clrf	___awmod@dividend+1,c
  5497  0064D4  EC1C  F02C         	call	___awmod	;wreg free
  5498  0064D8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  5499  0064DC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  5500  0064E0  EC88  F02B         	call	___wmul	;wreg free
  5501  0064E4  0E08               	movlw	low __npowers_
  5502  0064E6  240F               	addwf	?___wmul,w,c
  5503  0064E8  6EF6               	movwf	tblptrl,c
  5504  0064EA  0E7F               	movlw	high __npowers_
  5505  0064EC  2010               	addwfc	?___wmul+1,w,c
  5506  0064EE  6EF7               	movwf	tblptrh,c
  5507  0064F0                     	if	0	;There are less than 3 active tblptr bytes
  5508  0064F0                     	endif
  5509  0064F0  0009               	tblrd		*+
  5510  0064F2  CFF5 F033          	movff	tablat,___ftmul@f2
  5511  0064F6  0009               	tblrd		*+
  5512  0064F8  CFF5 F034          	movff	tablat,___ftmul@f2+1
  5513  0064FC  000A               	tblrd		*-
  5514  0064FE  CFF5 F035          	movff	tablat,___ftmul@f2+2
  5515  006502  0E00               	movlw	0
  5516  006504  6E0A               	movwf	___awdiv@divisor+1,c
  5517  006506  0E0A               	movlw	10
  5518  006508  6E09               	movwf	___awdiv@divisor,c
  5519  00650A  C048  F007         	movff	fround@prec,___awdiv@dividend
  5520  00650E  6A08               	clrf	___awdiv@dividend+1,c
  5521  006510  EC95  F02C         	call	___awdiv	;wreg free
  5522  006514  0E09               	movlw	9
  5523  006516  2407               	addwf	?___awdiv,w,c
  5524  006518  6E0F               	movwf	___wmul@multiplier,c
  5525  00651A  0E00               	movlw	0
  5526  00651C  2008               	addwfc	?___awdiv+1,w,c
  5527  00651E  6E10               	movwf	___wmul@multiplier+1,c
  5528  006520  0E00               	movlw	0
  5529  006522  6E12               	movwf	___wmul@multiplicand+1,c
  5530  006524  0E03               	movlw	3
  5531  006526  6E11               	movwf	___wmul@multiplicand,c
  5532  006528  EC88  F02B         	call	___wmul	;wreg free
  5533  00652C  0E08               	movlw	low __npowers_
  5534  00652E  240F               	addwf	?___wmul,w,c
  5535  006530  6EF6               	movwf	tblptrl,c
  5536  006532  0E7F               	movlw	high __npowers_
  5537  006534  2010               	addwfc	?___wmul+1,w,c
  5538  006536  6EF7               	movwf	tblptrh,c
  5539  006538                     	if	0	;There are less than 3 active tblptr bytes
  5540  006538                     	endif
  5541  006538  0009               	tblrd		*+
  5542  00653A  CFF5 F030          	movff	tablat,___ftmul@f1
  5543  00653E  0009               	tblrd		*+
  5544  006540  CFF5 F031          	movff	tablat,___ftmul@f1+1
  5545  006544  000A               	tblrd		*-
  5546  006546  CFF5 F032          	movff	tablat,___ftmul@f1+2
  5547  00654A  EC63  F02E         	call	___ftmul	;wreg free
  5548  00654E  C030  F045         	movff	?___ftmul,_fround$695
  5549  006552  C031  F046         	movff	?___ftmul+1,_fround$695+1
  5550  006556  C032  F047         	movff	?___ftmul+2,_fround$695+2
  5551                           
  5552                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5553  00655A  C045  F030         	movff	_fround$695,___ftmul@f1
  5554  00655E  C046  F031         	movff	_fround$695+1,___ftmul@f1+1
  5555  006562  C047  F032         	movff	_fround$695+2,___ftmul@f1+2
  5556  006566  0E00               	movlw	0
  5557  006568  6E33               	movwf	___ftmul@f2,c
  5558  00656A  0E00               	movlw	0
  5559  00656C  6E34               	movwf	___ftmul@f2+1,c
  5560  00656E  0E3F               	movlw	63
  5561  006570  6E35               	movwf	___ftmul@f2+2,c
  5562  006572  EC63  F02E         	call	___ftmul	;wreg free
  5563  006576  C030  F03F         	movff	?___ftmul,?_fround
  5564  00657A  C031  F040         	movff	?___ftmul+1,?_fround+1
  5565  00657E  C032  F041         	movff	?___ftmul+2,?_fround+2
  5566  006582  0012               	return	
  5567  006584                     l80:
  5568                           
  5569                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5570  006584  5048               	movf	fround@prec,w,c
  5571  006586  0D03               	mullw	3
  5572  006588  0E08               	movlw	low __npowers_
  5573  00658A  24F3               	addwf	prodl,w,c
  5574  00658C  6EF6               	movwf	tblptrl,c
  5575  00658E  0E7F               	movlw	high __npowers_
  5576  006590  20F4               	addwfc	prodh,w,c
  5577  006592  6EF7               	movwf	tblptrh,c
  5578  006594                     	if	0	;There are less than 3 active tblptr bytes
  5579  006594                     	endif
  5580  006594  0009               	tblrd		*+
  5581  006596  CFF5 F030          	movff	tablat,___ftmul@f1
  5582  00659A  0009               	tblrd		*+
  5583  00659C  CFF5 F031          	movff	tablat,___ftmul@f1+1
  5584  0065A0  000A               	tblrd		*-
  5585  0065A2  CFF5 F032          	movff	tablat,___ftmul@f1+2
  5586  0065A6  0E00               	movlw	0
  5587  0065A8  6E33               	movwf	___ftmul@f2,c
  5588  0065AA  0E00               	movlw	0
  5589  0065AC  6E34               	movwf	___ftmul@f2+1,c
  5590  0065AE  0E3F               	movlw	63
  5591  0065B0  6E35               	movwf	___ftmul@f2+2,c
  5592  0065B2  EC63  F02E         	call	___ftmul	;wreg free
  5593  0065B6  C030  F03F         	movff	?___ftmul,?_fround
  5594  0065BA  C031  F040         	movff	?___ftmul+1,?_fround+1
  5595  0065BE  C032  F041         	movff	?___ftmul+2,?_fround+2
  5596  0065C2  0012               	return	
  5597  0065C4                     __end_of_fround:
  5598                           	opt stack 0
  5599                           tblptru	equ	0xFF8
  5600                           tblptrh	equ	0xFF7
  5601                           tblptrl	equ	0xFF6
  5602                           tablat	equ	0xFF5
  5603                           prodh	equ	0xFF4
  5604                           prodl	equ	0xFF3
  5605                           intcon	equ	0xFF2
  5606                           wreg	equ	0xFE8
  5607                           postinc2	equ	0xFDE
  5608                           postdec2	equ	0xFDD
  5609                           fsr2h	equ	0xFDA
  5610                           fsr2l	equ	0xFD9
  5611                           status	equ	0xFD8
  5612                           
  5613 ;; *************** function ___wmul *****************
  5614 ;; Defined at:
  5615 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;  multiplier      2   14[COMRAM] unsigned int 
  5618 ;;  multiplicand    2   16[COMRAM] unsigned int 
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;  product         2   18[COMRAM] unsigned int 
  5621 ;; Return value:  Size  Location     Type
  5622 ;;                  2   14[COMRAM] unsigned int 
  5623 ;; Registers used:
  5624 ;;		wreg, status,2, status,0, prodl, prodh
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5630 ;;      Params:         4       0       0       0       0       0       0
  5631 ;;      Locals:         2       0       0       0       0       0       0
  5632 ;;      Temps:          0       0       0       0       0       0       0
  5633 ;;      Totals:         6       0       0       0       0       0       0
  5634 ;;Total ram usage:        6 bytes
  5635 ;; Hardware stack levels used:    1
  5636 ;; This function calls:
  5637 ;;		Nothing
  5638 ;; This function is called by:
  5639 ;;		_fround
  5640 ;;		_scale
  5641 ;;		_printf
  5642 ;; This function uses a non-reentrant model
  5643 ;;
  5644                           
  5645                           	psect	text7
  5646  005710                     __ptext7:
  5647                           	opt stack 0
  5648  005710                     ___wmul:
  5649                           	opt stack 28
  5650                           
  5651                           ;incstack = 0
  5652  005710  500F               	movf	___wmul@multiplier,w,c
  5653  005712  0211               	mulwf	___wmul@multiplicand,c
  5654  005714  CFF3 F013          	movff	prodl,___wmul@product
  5655  005718  CFF4 F014          	movff	prodh,___wmul@product+1
  5656  00571C  500F               	movf	___wmul@multiplier,w,c
  5657  00571E  0212               	mulwf	___wmul@multiplicand+1,c
  5658  005720  50F3               	movf	prodl,w,c
  5659  005722  2614               	addwf	___wmul@product+1,f,c
  5660  005724  5010               	movf	___wmul@multiplier+1,w,c
  5661  005726  0211               	mulwf	___wmul@multiplicand,c
  5662  005728  50F3               	movf	prodl,w,c
  5663  00572A  2614               	addwf	___wmul@product+1,f,c
  5664  00572C  C013  F00F         	movff	___wmul@product,?___wmul
  5665  005730  C014  F010         	movff	___wmul@product+1,?___wmul+1
  5666  005734  0012               	return	
  5667  005736                     __end_of___wmul:
  5668                           	opt stack 0
  5669                           tblptru	equ	0xFF8
  5670                           tblptrh	equ	0xFF7
  5671                           tblptrl	equ	0xFF6
  5672                           tablat	equ	0xFF5
  5673                           prodh	equ	0xFF4
  5674                           prodl	equ	0xFF3
  5675                           intcon	equ	0xFF2
  5676                           wreg	equ	0xFE8
  5677                           postinc2	equ	0xFDE
  5678                           postdec2	equ	0xFDD
  5679                           fsr2h	equ	0xFDA
  5680                           fsr2l	equ	0xFD9
  5681                           status	equ	0xFD8
  5682                           
  5683 ;; *************** function ___ftmul *****************
  5684 ;; Defined at:
  5685 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftmul.c"
  5686 ;; Parameters:    Size  Location     Type
  5687 ;;  f1              3   47[COMRAM] float 
  5688 ;;  f2              3   50[COMRAM] float 
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;  f3_as_produc    3   57[COMRAM] unsigned um
  5691 ;;  sign            1   61[COMRAM] unsigned char 
  5692 ;;  cntr            1   60[COMRAM] unsigned char 
  5693 ;;  exp             1   56[COMRAM] unsigned char 
  5694 ;; Return value:  Size  Location     Type
  5695 ;;                  3   47[COMRAM] float 
  5696 ;; Registers used:
  5697 ;;		wreg, status,2, status,0, cstack
  5698 ;; Tracked objects:
  5699 ;;		On entry : 0/0
  5700 ;;		On exit  : 0/0
  5701 ;;		Unchanged: 0/0
  5702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5703 ;;      Params:         6       0       0       0       0       0       0
  5704 ;;      Locals:         6       0       0       0       0       0       0
  5705 ;;      Temps:          3       0       0       0       0       0       0
  5706 ;;      Totals:        15       0       0       0       0       0       0
  5707 ;;Total ram usage:       15 bytes
  5708 ;; Hardware stack levels used:    1
  5709 ;; Hardware stack levels required when called:    1
  5710 ;; This function calls:
  5711 ;;		___ftpack
  5712 ;; This function is called by:
  5713 ;;		_main
  5714 ;;		_fround
  5715 ;;		_scale
  5716 ;;		_printf
  5717 ;; This function uses a non-reentrant model
  5718 ;;
  5719                           
  5720                           	psect	text8
  5721  005CC6                     __ptext8:
  5722                           	opt stack 0
  5723  005CC6                     ___ftmul:
  5724                           	opt stack 27
  5725                           
  5726                           ;incstack = 0
  5727  005CC6  C032  F036         	movff	___ftmul@f1+2,??___ftmul
  5728  005CCA  6A37               	clrf	(??___ftmul+1)& (0+255),c
  5729  005CCC  6A38               	clrf	(??___ftmul+2)& (0+255),c
  5730  005CCE  3431               	rlcf	___ftmul@f1+1,w,c
  5731  005CD0  3636               	rlcf	??___ftmul& (0+255),f,c
  5732  005CD2  E301               	bnc	u2391
  5733  005CD4  8037               	bsf	(??___ftmul+1)& (0+255),0,c
  5734  005CD6                     u2391:
  5735  005CD6  5036               	movf	??___ftmul,w,c
  5736  005CD8  6E39               	movwf	___ftmul@exp,c
  5737  005CDA  5039               	movf	___ftmul@exp,w,c
  5738  005CDC  A4D8               	btfss	status,2,c
  5739  005CDE  D007               	goto	l609
  5740  005CE0  0E00               	movlw	0
  5741  005CE2  6E30               	movwf	?___ftmul,c
  5742  005CE4  0E00               	movlw	0
  5743  005CE6  6E31               	movwf	?___ftmul+1,c
  5744  005CE8  0E00               	movlw	0
  5745  005CEA  6E32               	movwf	?___ftmul+2,c
  5746  005CEC  0012               	return	
  5747  005CEE                     l609:
  5748  005CEE  C035  F036         	movff	___ftmul@f2+2,??___ftmul
  5749  005CF2  6A37               	clrf	(??___ftmul+1)& (0+255),c
  5750  005CF4  6A38               	clrf	(??___ftmul+2)& (0+255),c
  5751  005CF6  3434               	rlcf	___ftmul@f2+1,w,c
  5752  005CF8  3636               	rlcf	??___ftmul& (0+255),f,c
  5753  005CFA  E301               	bnc	u2411
  5754  005CFC  8037               	bsf	(??___ftmul+1)& (0+255),0,c
  5755  005CFE                     u2411:
  5756  005CFE  5036               	movf	??___ftmul,w,c
  5757  005D00  6E3E               	movwf	___ftmul@sign,c
  5758  005D02  503E               	movf	___ftmul@sign,w,c
  5759  005D04  A4D8               	btfss	status,2,c
  5760  005D06  D007               	goto	l611
  5761  005D08  0E00               	movlw	0
  5762  005D0A  6E30               	movwf	?___ftmul,c
  5763  005D0C  0E00               	movlw	0
  5764  005D0E  6E31               	movwf	?___ftmul+1,c
  5765  005D10  0E00               	movlw	0
  5766  005D12  6E32               	movwf	?___ftmul+2,c
  5767  005D14  0012               	return	
  5768  005D16                     l611:
  5769  005D16  503E               	movf	___ftmul@sign,w,c
  5770  005D18  0F7B               	addlw	123
  5771  005D1A  2639               	addwf	___ftmul@exp,f,c
  5772  005D1C  C032  F03E         	movff	___ftmul@f1+2,___ftmul@sign
  5773  005D20  5035               	movf	___ftmul@f2+2,w,c
  5774  005D22  1A3E               	xorwf	___ftmul@sign,f,c
  5775  005D24  0E80               	movlw	128
  5776  005D26  163E               	andwf	___ftmul@sign,f,c
  5777  005D28  8E31               	bsf	___ftmul@f1+1,7,c
  5778  005D2A  8E34               	bsf	___ftmul@f2+1,7,c
  5779  005D2C  0EFF               	movlw	255
  5780  005D2E  1633               	andwf	___ftmul@f2,f,c
  5781  005D30  0EFF               	movlw	255
  5782  005D32  1634               	andwf	___ftmul@f2+1,f,c
  5783  005D34  0E00               	movlw	0
  5784  005D36  1635               	andwf	___ftmul@f2+2,f,c
  5785  005D38  0E00               	movlw	0
  5786  005D3A  6E3A               	movwf	___ftmul@f3_as_product,c
  5787  005D3C  0E00               	movlw	0
  5788  005D3E  6E3B               	movwf	___ftmul@f3_as_product+1,c
  5789  005D40  0E00               	movlw	0
  5790  005D42  6E3C               	movwf	___ftmul@f3_as_product+2,c
  5791  005D44  0E07               	movlw	7
  5792  005D46  6E3D               	movwf	___ftmul@cntr,c
  5793  005D48  A030               	btfss	___ftmul@f1,0,c
  5794  005D4A  D006               	goto	l613
  5795  005D4C  5033               	movf	___ftmul@f2,w,c
  5796  005D4E  263A               	addwf	___ftmul@f3_as_product,f,c
  5797  005D50  5034               	movf	___ftmul@f2+1,w,c
  5798  005D52  223B               	addwfc	___ftmul@f3_as_product+1,f,c
  5799  005D54  5035               	movf	___ftmul@f2+2,w,c
  5800  005D56  223C               	addwfc	___ftmul@f3_as_product+2,f,c
  5801  005D58                     l613:
  5802  005D58  90D8               	bcf	status,0,c
  5803  005D5A  3232               	rrcf	___ftmul@f1+2,f,c
  5804  005D5C  3231               	rrcf	___ftmul@f1+1,f,c
  5805  005D5E  3230               	rrcf	___ftmul@f1,f,c
  5806  005D60  90D8               	bcf	status,0,c
  5807  005D62  3633               	rlcf	___ftmul@f2,f,c
  5808  005D64  3634               	rlcf	___ftmul@f2+1,f,c
  5809  005D66  3635               	rlcf	___ftmul@f2+2,f,c
  5810  005D68  2E3D               	decfsz	___ftmul@cntr,f,c
  5811  005D6A  D7EE               	goto	l612
  5812  005D6C  0E09               	movlw	9
  5813  005D6E  6E3D               	movwf	___ftmul@cntr,c
  5814  005D70  A030               	btfss	___ftmul@f1,0,c
  5815  005D72  D006               	goto	l616
  5816  005D74  5033               	movf	___ftmul@f2,w,c
  5817  005D76  263A               	addwf	___ftmul@f3_as_product,f,c
  5818  005D78  5034               	movf	___ftmul@f2+1,w,c
  5819  005D7A  223B               	addwfc	___ftmul@f3_as_product+1,f,c
  5820  005D7C  5035               	movf	___ftmul@f2+2,w,c
  5821  005D7E  223C               	addwfc	___ftmul@f3_as_product+2,f,c
  5822  005D80                     l616:
  5823  005D80  90D8               	bcf	status,0,c
  5824  005D82  3232               	rrcf	___ftmul@f1+2,f,c
  5825  005D84  3231               	rrcf	___ftmul@f1+1,f,c
  5826  005D86  3230               	rrcf	___ftmul@f1,f,c
  5827  005D88  90D8               	bcf	status,0,c
  5828  005D8A  323C               	rrcf	___ftmul@f3_as_product+2,f,c
  5829  005D8C  323B               	rrcf	___ftmul@f3_as_product+1,f,c
  5830  005D8E  323A               	rrcf	___ftmul@f3_as_product,f,c
  5831  005D90  2E3D               	decfsz	___ftmul@cntr,f,c
  5832  005D92  D7EE               	goto	l615
  5833  005D94  C03A  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5834  005D98  C03B  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5835  005D9C  C03C  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5836  005DA0  C039  F004         	movff	___ftmul@exp,___ftpack@exp
  5837  005DA4  C03E  F005         	movff	___ftmul@sign,___ftpack@sign
  5838  005DA8  EC1F  F02D         	call	___ftpack	;wreg free
  5839  005DAC  C001  F030         	movff	?___ftpack,?___ftmul
  5840  005DB0  C002  F031         	movff	?___ftpack+1,?___ftmul+1
  5841  005DB4  C003  F032         	movff	?___ftpack+2,?___ftmul+2
  5842  005DB8  0012               	return	
  5843  005DBA                     __end_of___ftmul:
  5844                           	opt stack 0
  5845                           tblptru	equ	0xFF8
  5846                           tblptrh	equ	0xFF7
  5847                           tblptrl	equ	0xFF6
  5848                           tablat	equ	0xFF5
  5849                           prodh	equ	0xFF4
  5850                           prodl	equ	0xFF3
  5851                           intcon	equ	0xFF2
  5852                           wreg	equ	0xFE8
  5853                           postinc2	equ	0xFDE
  5854                           postdec2	equ	0xFDD
  5855                           fsr2h	equ	0xFDA
  5856                           fsr2l	equ	0xFD9
  5857                           status	equ	0xFD8
  5858                           
  5859 ;; *************** function ___awmod *****************
  5860 ;; Defined at:
  5861 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awmod.c"
  5862 ;; Parameters:    Size  Location     Type
  5863 ;;  dividend        2    0[COMRAM] int 
  5864 ;;  divisor         2    2[COMRAM] int 
  5865 ;; Auto vars:     Size  Location     Type
  5866 ;;  sign            1    5[COMRAM] unsigned char 
  5867 ;;  counter         1    4[COMRAM] unsigned char 
  5868 ;; Return value:  Size  Location     Type
  5869 ;;                  2    0[COMRAM] int 
  5870 ;; Registers used:
  5871 ;;		wreg, status,2, status,0
  5872 ;; Tracked objects:
  5873 ;;		On entry : 0/0
  5874 ;;		On exit  : 0/0
  5875 ;;		Unchanged: 0/0
  5876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5877 ;;      Params:         4       0       0       0       0       0       0
  5878 ;;      Locals:         2       0       0       0       0       0       0
  5879 ;;      Temps:          0       0       0       0       0       0       0
  5880 ;;      Totals:         6       0       0       0       0       0       0
  5881 ;;Total ram usage:        6 bytes
  5882 ;; Hardware stack levels used:    1
  5883 ;; This function calls:
  5884 ;;		Nothing
  5885 ;; This function is called by:
  5886 ;;		_fround
  5887 ;;		_scale
  5888 ;;		_printf
  5889 ;; This function uses a non-reentrant model
  5890 ;;
  5891                           
  5892                           	psect	text9
  5893  005838                     __ptext9:
  5894                           	opt stack 0
  5895  005838                     ___awmod:
  5896                           	opt stack 28
  5897                           
  5898                           ;incstack = 0
  5899  005838  0E00               	movlw	0
  5900  00583A  6E06               	movwf	___awmod@sign,c
  5901  00583C  AE02               	btfss	___awmod@dividend+1,7,c
  5902  00583E  D006               	goto	l462
  5903  005840  6C01               	negf	___awmod@dividend,c
  5904  005842  1E02               	comf	___awmod@dividend+1,f,c
  5905  005844  B0D8               	btfsc	status,0,c
  5906  005846  2A02               	incf	___awmod@dividend+1,f,c
  5907  005848  0E01               	movlw	1
  5908  00584A  6E06               	movwf	___awmod@sign,c
  5909  00584C                     l462:
  5910  00584C  AE04               	btfss	___awmod@divisor+1,7,c
  5911  00584E  D004               	goto	l463
  5912  005850  6C03               	negf	___awmod@divisor,c
  5913  005852  1E04               	comf	___awmod@divisor+1,f,c
  5914  005854  B0D8               	btfsc	status,0,c
  5915  005856  2A04               	incf	___awmod@divisor+1,f,c
  5916  005858                     l463:
  5917  005858  5003               	movf	___awmod@divisor,w,c
  5918  00585A  1004               	iorwf	___awmod@divisor+1,w,c
  5919  00585C  B4D8               	btfsc	status,2,c
  5920  00585E  D018               	goto	l470
  5921  005860  0E01               	movlw	1
  5922  005862  6E05               	movwf	___awmod@counter,c
  5923  005864  D004               	goto	l465
  5924  005866  90D8               	bcf	status,0,c
  5925  005868  3603               	rlcf	___awmod@divisor,f,c
  5926  00586A  3604               	rlcf	___awmod@divisor+1,f,c
  5927  00586C  2A05               	incf	___awmod@counter,f,c
  5928  00586E                     l465:
  5929  00586E  AE04               	btfss	___awmod@divisor+1,7,c
  5930  005870  D7FA               	goto	l466
  5931  005872                     u2540:
  5932  005872  5003               	movf	___awmod@divisor,w,c
  5933  005874  5C01               	subwf	___awmod@dividend,w,c
  5934  005876  5004               	movf	___awmod@divisor+1,w,c
  5935  005878  5802               	subwfb	___awmod@dividend+1,w,c
  5936  00587A  A0D8               	btfss	status,0,c
  5937  00587C  D004               	goto	l469
  5938  00587E  5003               	movf	___awmod@divisor,w,c
  5939  005880  5E01               	subwf	___awmod@dividend,f,c
  5940  005882  5004               	movf	___awmod@divisor+1,w,c
  5941  005884  5A02               	subwfb	___awmod@dividend+1,f,c
  5942  005886                     l469:
  5943  005886  90D8               	bcf	status,0,c
  5944  005888  3204               	rrcf	___awmod@divisor+1,f,c
  5945  00588A  3203               	rrcf	___awmod@divisor,f,c
  5946  00588C  2E05               	decfsz	___awmod@counter,f,c
  5947  00588E  D7F1               	goto	u2540
  5948  005890                     l470:
  5949  005890  5006               	movf	___awmod@sign,w,c
  5950  005892  B4D8               	btfsc	status,2,c
  5951  005894  D004               	goto	l471
  5952  005896  6C01               	negf	___awmod@dividend,c
  5953  005898  1E02               	comf	___awmod@dividend+1,f,c
  5954  00589A  B0D8               	btfsc	status,0,c
  5955  00589C  2A02               	incf	___awmod@dividend+1,f,c
  5956  00589E                     l471:
  5957  00589E  C001  F001         	movff	___awmod@dividend,?___awmod
  5958  0058A2  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5959  0058A6  0012               	return	
  5960  0058A8                     __end_of___awmod:
  5961                           	opt stack 0
  5962                           tblptru	equ	0xFF8
  5963                           tblptrh	equ	0xFF7
  5964                           tblptrl	equ	0xFF6
  5965                           tablat	equ	0xFF5
  5966                           prodh	equ	0xFF4
  5967                           prodl	equ	0xFF3
  5968                           intcon	equ	0xFF2
  5969                           wreg	equ	0xFE8
  5970                           postinc2	equ	0xFDE
  5971                           postdec2	equ	0xFDD
  5972                           fsr2h	equ	0xFDA
  5973                           fsr2l	equ	0xFD9
  5974                           status	equ	0xFD8
  5975                           
  5976 ;; *************** function ___awdiv *****************
  5977 ;; Defined at:
  5978 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;  dividend        2    6[COMRAM] int 
  5981 ;;  divisor         2    8[COMRAM] int 
  5982 ;; Auto vars:     Size  Location     Type
  5983 ;;  quotient        2   12[COMRAM] int 
  5984 ;;  sign            1   11[COMRAM] unsigned char 
  5985 ;;  counter         1   10[COMRAM] unsigned char 
  5986 ;; Return value:  Size  Location     Type
  5987 ;;                  2    6[COMRAM] int 
  5988 ;; Registers used:
  5989 ;;		wreg, status,2, status,0
  5990 ;; Tracked objects:
  5991 ;;		On entry : 0/0
  5992 ;;		On exit  : 0/0
  5993 ;;		Unchanged: 0/0
  5994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5995 ;;      Params:         4       0       0       0       0       0       0
  5996 ;;      Locals:         4       0       0       0       0       0       0
  5997 ;;      Temps:          0       0       0       0       0       0       0
  5998 ;;      Totals:         8       0       0       0       0       0       0
  5999 ;;Total ram usage:        8 bytes
  6000 ;; Hardware stack levels used:    1
  6001 ;; This function calls:
  6002 ;;		Nothing
  6003 ;; This function is called by:
  6004 ;;		_fround
  6005 ;;		_scale
  6006 ;;		_printf
  6007 ;; This function uses a non-reentrant model
  6008 ;;
  6009                           
  6010                           	psect	text10
  6011  00592A                     __ptext10:
  6012                           	opt stack 0
  6013  00592A                     ___awdiv:
  6014                           	opt stack 28
  6015                           
  6016                           ;incstack = 0
  6017  00592A  0E00               	movlw	0
  6018  00592C  6E0C               	movwf	___awdiv@sign,c
  6019  00592E  AE0A               	btfss	___awdiv@divisor+1,7,c
  6020  005930  D006               	goto	l449
  6021  005932  6C09               	negf	___awdiv@divisor,c
  6022  005934  1E0A               	comf	___awdiv@divisor+1,f,c
  6023  005936  B0D8               	btfsc	status,0,c
  6024  005938  2A0A               	incf	___awdiv@divisor+1,f,c
  6025  00593A  0E01               	movlw	1
  6026  00593C  6E0C               	movwf	___awdiv@sign,c
  6027  00593E                     l449:
  6028  00593E  AE08               	btfss	___awdiv@dividend+1,7,c
  6029  005940  D006               	goto	l450
  6030  005942  6C07               	negf	___awdiv@dividend,c
  6031  005944  1E08               	comf	___awdiv@dividend+1,f,c
  6032  005946  B0D8               	btfsc	status,0,c
  6033  005948  2A08               	incf	___awdiv@dividend+1,f,c
  6034  00594A  0E01               	movlw	1
  6035  00594C  1A0C               	xorwf	___awdiv@sign,f,c
  6036  00594E                     l450:
  6037  00594E  0E00               	movlw	0
  6038  005950  6E0E               	movwf	___awdiv@quotient+1,c
  6039  005952  0E00               	movlw	0
  6040  005954  6E0D               	movwf	___awdiv@quotient,c
  6041  005956  5009               	movf	___awdiv@divisor,w,c
  6042  005958  100A               	iorwf	___awdiv@divisor+1,w,c
  6043  00595A  B4D8               	btfsc	status,2,c
  6044  00595C  D01C               	goto	l457
  6045  00595E  0E01               	movlw	1
  6046  005960  6E0B               	movwf	___awdiv@counter,c
  6047  005962  D004               	goto	l452
  6048  005964  90D8               	bcf	status,0,c
  6049  005966  3609               	rlcf	___awdiv@divisor,f,c
  6050  005968  360A               	rlcf	___awdiv@divisor+1,f,c
  6051  00596A  2A0B               	incf	___awdiv@counter,f,c
  6052  00596C                     l452:
  6053  00596C  AE0A               	btfss	___awdiv@divisor+1,7,c
  6054  00596E  D7FA               	goto	l453
  6055  005970                     u2480:
  6056  005970  90D8               	bcf	status,0,c
  6057  005972  360D               	rlcf	___awdiv@quotient,f,c
  6058  005974  360E               	rlcf	___awdiv@quotient+1,f,c
  6059  005976  5009               	movf	___awdiv@divisor,w,c
  6060  005978  5C07               	subwf	___awdiv@dividend,w,c
  6061  00597A  500A               	movf	___awdiv@divisor+1,w,c
  6062  00597C  5808               	subwfb	___awdiv@dividend+1,w,c
  6063  00597E  A0D8               	btfss	status,0,c
  6064  005980  D005               	goto	l456
  6065  005982  5009               	movf	___awdiv@divisor,w,c
  6066  005984  5E07               	subwf	___awdiv@dividend,f,c
  6067  005986  500A               	movf	___awdiv@divisor+1,w,c
  6068  005988  5A08               	subwfb	___awdiv@dividend+1,f,c
  6069  00598A  800D               	bsf	___awdiv@quotient,0,c
  6070  00598C                     l456:
  6071  00598C  90D8               	bcf	status,0,c
  6072  00598E  320A               	rrcf	___awdiv@divisor+1,f,c
  6073  005990  3209               	rrcf	___awdiv@divisor,f,c
  6074  005992  2E0B               	decfsz	___awdiv@counter,f,c
  6075  005994  D7ED               	goto	u2480
  6076  005996                     l457:
  6077  005996  500C               	movf	___awdiv@sign,w,c
  6078  005998  B4D8               	btfsc	status,2,c
  6079  00599A  D004               	goto	l458
  6080  00599C  6C0D               	negf	___awdiv@quotient,c
  6081  00599E  1E0E               	comf	___awdiv@quotient+1,f,c
  6082  0059A0  B0D8               	btfsc	status,0,c
  6083  0059A2  2A0E               	incf	___awdiv@quotient+1,f,c
  6084  0059A4                     l458:
  6085  0059A4  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  6086  0059A8  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  6087  0059AC  0012               	return	
  6088  0059AE                     __end_of___awdiv:
  6089                           	opt stack 0
  6090                           tblptru	equ	0xFF8
  6091                           tblptrh	equ	0xFF7
  6092                           tblptrl	equ	0xFF6
  6093                           tablat	equ	0xFF5
  6094                           prodh	equ	0xFF4
  6095                           prodl	equ	0xFF3
  6096                           intcon	equ	0xFF2
  6097                           wreg	equ	0xFE8
  6098                           postinc2	equ	0xFDE
  6099                           postdec2	equ	0xFDD
  6100                           fsr2h	equ	0xFDA
  6101                           fsr2l	equ	0xFD9
  6102                           status	equ	0xFD8
  6103                           
  6104 ;; *************** function __tdiv_to_l_ *****************
  6105 ;; Defined at:
  6106 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdivl.c"
  6107 ;; Parameters:    Size  Location     Type
  6108 ;;  f1              3    0[COMRAM] float 
  6109 ;;  f2              3    3[COMRAM] float 
  6110 ;; Auto vars:     Size  Location     Type
  6111 ;;  quot            4    9[COMRAM] unsigned long 
  6112 ;;  exp1            1   14[COMRAM] unsigned char 
  6113 ;;  cntr            1   13[COMRAM] unsigned char 
  6114 ;; Return value:  Size  Location     Type
  6115 ;;                  4    0[COMRAM] unsigned long 
  6116 ;; Registers used:
  6117 ;;		wreg, status,2, status,0
  6118 ;; Tracked objects:
  6119 ;;		On entry : 0/0
  6120 ;;		On exit  : 0/0
  6121 ;;		Unchanged: 0/0
  6122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6123 ;;      Params:         6       0       0       0       0       0       0
  6124 ;;      Locals:         6       0       0       0       0       0       0
  6125 ;;      Temps:          3       0       0       0       0       0       0
  6126 ;;      Totals:        15       0       0       0       0       0       0
  6127 ;;Total ram usage:       15 bytes
  6128 ;; Hardware stack levels used:    1
  6129 ;; This function calls:
  6130 ;;		Nothing
  6131 ;; This function is called by:
  6132 ;;		_printf
  6133 ;; This function uses a non-reentrant model
  6134 ;;
  6135                           
  6136                           	psect	text11
  6137  005EE2                     __ptext11:
  6138                           	opt stack 0
  6139  005EE2                     __tdiv_to_l_:
  6140                           	opt stack 29
  6141                           
  6142                           ;incstack = 0
  6143  005EE2  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6144  005EE6  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6145  005EE8  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6146  005EEA  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  6147  005EEC  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6148  005EEE  E301               	bnc	u2671
  6149  005EF0  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6150  005EF2                     u2671:
  6151  005EF2  5007               	movf	??__tdiv_to_l_,w,c
  6152  005EF4  6E0F               	movwf	__tdiv_to_l_@exp1,c
  6153  005EF6  500F               	movf	__tdiv_to_l_@exp1,w,c
  6154  005EF8  A4D8               	btfss	status,2,c
  6155  005EFA  D009               	goto	l585
  6156  005EFC  0E00               	movlw	0
  6157  005EFE  6E01               	movwf	?__tdiv_to_l_,c
  6158  005F00  0E00               	movlw	0
  6159  005F02  6E02               	movwf	?__tdiv_to_l_+1,c
  6160  005F04  0E00               	movlw	0
  6161  005F06  6E03               	movwf	?__tdiv_to_l_+2,c
  6162  005F08  0E00               	movlw	0
  6163  005F0A  6E04               	movwf	?__tdiv_to_l_+3,c
  6164  005F0C  0012               	return	
  6165  005F0E                     l585:
  6166  005F0E  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6167  005F12  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6168  005F14  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6169  005F16  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  6170  005F18  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6171  005F1A  E301               	bnc	u2691
  6172  005F1C  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6173  005F1E                     u2691:
  6174  005F1E  5007               	movf	??__tdiv_to_l_,w,c
  6175  005F20  6E0E               	movwf	__tdiv_to_l_@cntr,c
  6176  005F22  500E               	movf	__tdiv_to_l_@cntr,w,c
  6177  005F24  A4D8               	btfss	status,2,c
  6178  005F26  D009               	goto	l587
  6179  005F28  0E00               	movlw	0
  6180  005F2A  6E01               	movwf	?__tdiv_to_l_,c
  6181  005F2C  0E00               	movlw	0
  6182  005F2E  6E02               	movwf	?__tdiv_to_l_+1,c
  6183  005F30  0E00               	movlw	0
  6184  005F32  6E03               	movwf	?__tdiv_to_l_+2,c
  6185  005F34  0E00               	movlw	0
  6186  005F36  6E04               	movwf	?__tdiv_to_l_+3,c
  6187  005F38  0012               	return	
  6188  005F3A                     l587:
  6189  005F3A  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  6190  005F3C  0EFF               	movlw	255
  6191  005F3E  1601               	andwf	__tdiv_to_l_@f1,f,c
  6192  005F40  0EFF               	movlw	255
  6193  005F42  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  6194  005F44  0E00               	movlw	0
  6195  005F46  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  6196  005F48  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  6197  005F4A  0EFF               	movlw	255
  6198  005F4C  1604               	andwf	__tdiv_to_l_@f2,f,c
  6199  005F4E  0EFF               	movlw	255
  6200  005F50  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  6201  005F52  0E00               	movlw	0
  6202  005F54  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  6203  005F56  0E00               	movlw	0
  6204  005F58  6E0A               	movwf	__tdiv_to_l_@quot,c
  6205  005F5A  0E00               	movlw	0
  6206  005F5C  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  6207  005F5E  0E00               	movlw	0
  6208  005F60  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  6209  005F62  0E00               	movlw	0
  6210  005F64  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  6211  005F66  0E7F               	movlw	127
  6212  005F68  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  6213  005F6A  500E               	movf	__tdiv_to_l_@cntr,w,c
  6214  005F6C  0F98               	addlw	152
  6215  005F6E  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  6216  005F70  0E18               	movlw	24
  6217  005F72  6E0E               	movwf	__tdiv_to_l_@cntr,c
  6218  005F74                     l588:
  6219  005F74  90D8               	bcf	status,0,c
  6220  005F76  360A               	rlcf	__tdiv_to_l_@quot,f,c
  6221  005F78  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  6222  005F7A  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  6223  005F7C  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  6224  005F7E  5004               	movf	__tdiv_to_l_@f2,w,c
  6225  005F80  5C01               	subwf	__tdiv_to_l_@f1,w,c
  6226  005F82  5005               	movf	__tdiv_to_l_@f2+1,w,c
  6227  005F84  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  6228  005F86  5006               	movf	__tdiv_to_l_@f2+2,w,c
  6229  005F88  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  6230  005F8A  A0D8               	btfss	status,0,c
  6231  005F8C  D007               	goto	l589
  6232  005F8E  5004               	movf	__tdiv_to_l_@f2,w,c
  6233  005F90  5E01               	subwf	__tdiv_to_l_@f1,f,c
  6234  005F92  5005               	movf	__tdiv_to_l_@f2+1,w,c
  6235  005F94  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  6236  005F96  5006               	movf	__tdiv_to_l_@f2+2,w,c
  6237  005F98  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  6238  005F9A  800A               	bsf	__tdiv_to_l_@quot,0,c
  6239  005F9C                     l589:
  6240  005F9C  90D8               	bcf	status,0,c
  6241  005F9E  3601               	rlcf	__tdiv_to_l_@f1,f,c
  6242  005FA0  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  6243  005FA2  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  6244  005FA4  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  6245  005FA6  D7E6               	goto	l588
  6246  005FA8  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  6247  005FAA  D016               	goto	l591
  6248  005FAC  500F               	movf	__tdiv_to_l_@exp1,w,c
  6249  005FAE  0A80               	xorlw	128
  6250  005FB0  0F97               	addlw	151
  6251  005FB2  B0D8               	btfsc	status,0,c
  6252  005FB4  D009               	goto	l592
  6253  005FB6  0E00               	movlw	0
  6254  005FB8  6E01               	movwf	?__tdiv_to_l_,c
  6255  005FBA  0E00               	movlw	0
  6256  005FBC  6E02               	movwf	?__tdiv_to_l_+1,c
  6257  005FBE  0E00               	movlw	0
  6258  005FC0  6E03               	movwf	?__tdiv_to_l_+2,c
  6259  005FC2  0E00               	movlw	0
  6260  005FC4  6E04               	movwf	?__tdiv_to_l_+3,c
  6261  005FC6  0012               	return	
  6262  005FC8                     l592:
  6263  005FC8  90D8               	bcf	status,0,c
  6264  005FCA  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  6265  005FCC  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  6266  005FCE  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  6267  005FD0  320A               	rrcf	__tdiv_to_l_@quot,f,c
  6268  005FD2  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  6269  005FD4  D7F9               	goto	l592
  6270  005FD6  D015               	goto	u2750
  6271  005FD8                     l591:
  6272  005FD8  0E17               	movlw	23
  6273  005FDA  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  6274  005FDC  D00F               	goto	l597
  6275  005FDE  0E00               	movlw	0
  6276  005FE0  6E01               	movwf	?__tdiv_to_l_,c
  6277  005FE2  0E00               	movlw	0
  6278  005FE4  6E02               	movwf	?__tdiv_to_l_+1,c
  6279  005FE6  0E00               	movlw	0
  6280  005FE8  6E03               	movwf	?__tdiv_to_l_+2,c
  6281  005FEA  0E00               	movlw	0
  6282  005FEC  6E04               	movwf	?__tdiv_to_l_+3,c
  6283  005FEE  0012               	return	
  6284  005FF0  90D8               	bcf	status,0,c
  6285  005FF2  360A               	rlcf	__tdiv_to_l_@quot,f,c
  6286  005FF4  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  6287  005FF6  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  6288  005FF8  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  6289  005FFA  060F               	decf	__tdiv_to_l_@exp1,f,c
  6290  005FFC                     l597:
  6291  005FFC  500F               	movf	__tdiv_to_l_@exp1,w,c
  6292  005FFE  A4D8               	btfss	status,2,c
  6293  006000  D7F7               	goto	l598
  6294  006002                     u2750:
  6295  006002  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6296  006006  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6297  00600A  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6298  00600E  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6299  006012  0012               	return		;funcret
  6300  006014                     __end_of__tdiv_to_l_:
  6301                           	opt stack 0
  6302                           tblptru	equ	0xFF8
  6303                           tblptrh	equ	0xFF7
  6304                           tblptrl	equ	0xFF6
  6305                           tablat	equ	0xFF5
  6306                           prodh	equ	0xFF4
  6307                           prodl	equ	0xFF3
  6308                           intcon	equ	0xFF2
  6309                           wreg	equ	0xFE8
  6310                           postinc2	equ	0xFDE
  6311                           postdec2	equ	0xFDD
  6312                           fsr2h	equ	0xFDA
  6313                           fsr2l	equ	0xFD9
  6314                           status	equ	0xFD8
  6315                           
  6316 ;; *************** function __div_to_l_ *****************
  6317 ;; Defined at:
  6318 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fldivl.c"
  6319 ;; Parameters:    Size  Location     Type
  6320 ;;  f1              3    0[COMRAM] unsigned long 
  6321 ;;  f2              3    3[COMRAM] unsigned long 
  6322 ;; Auto vars:     Size  Location     Type
  6323 ;;  quot            4    6[COMRAM] unsigned long 
  6324 ;;  exp1            1   11[COMRAM] unsigned char 
  6325 ;;  cntr            1   10[COMRAM] unsigned char 
  6326 ;; Return value:  Size  Location     Type
  6327 ;;                  4    0[COMRAM] unsigned long 
  6328 ;; Registers used:
  6329 ;;		wreg, status,2, status,0
  6330 ;; Tracked objects:
  6331 ;;		On entry : 0/0
  6332 ;;		On exit  : 0/0
  6333 ;;		Unchanged: 0/0
  6334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6335 ;;      Params:         6       0       0       0       0       0       0
  6336 ;;      Locals:         6       0       0       0       0       0       0
  6337 ;;      Temps:          0       0       0       0       0       0       0
  6338 ;;      Totals:        12       0       0       0       0       0       0
  6339 ;;Total ram usage:       12 bytes
  6340 ;; Hardware stack levels used:    1
  6341 ;; This function calls:
  6342 ;;		Nothing
  6343 ;; This function is called by:
  6344 ;;		_printf
  6345 ;; This function uses a non-reentrant model
  6346 ;;
  6347                           
  6348                           	psect	text12
  6349  005DBA                     __ptext12:
  6350                           	opt stack 0
  6351  005DBA                     __div_to_l_:
  6352                           	opt stack 29
  6353                           
  6354                           ;incstack = 0
  6355  005DBA  3403               	rlcf	__div_to_l_@f1+2,w,c
  6356  005DBC  3404               	rlcf	__div_to_l_@f1+3,w,c
  6357  005DBE  6E0C               	movwf	__div_to_l_@exp1,c
  6358  005DC0  500C               	movf	__div_to_l_@exp1,w,c
  6359  005DC2  A4D8               	btfss	status,2,c
  6360  005DC4  D009               	goto	l481
  6361  005DC6  0E00               	movlw	0
  6362  005DC8  6E01               	movwf	?__div_to_l_,c
  6363  005DCA  0E00               	movlw	0
  6364  005DCC  6E02               	movwf	?__div_to_l_+1,c
  6365  005DCE  0E00               	movlw	0
  6366  005DD0  6E03               	movwf	?__div_to_l_+2,c
  6367  005DD2  0E00               	movlw	0
  6368  005DD4  6E04               	movwf	?__div_to_l_+3,c
  6369  005DD6  0012               	return	
  6370  005DD8                     l481:
  6371  005DD8  3406               	rlcf	__div_to_l_@f2+2,w,c
  6372  005DDA  3407               	rlcf	__div_to_l_@f2+3,w,c
  6373  005DDC  6E0B               	movwf	__div_to_l_@cntr,c
  6374  005DDE  500B               	movf	__div_to_l_@cntr,w,c
  6375  005DE0  A4D8               	btfss	status,2,c
  6376  005DE2  D009               	goto	l483
  6377  005DE4  0E00               	movlw	0
  6378  005DE6  6E01               	movwf	?__div_to_l_,c
  6379  005DE8  0E00               	movlw	0
  6380  005DEA  6E02               	movwf	?__div_to_l_+1,c
  6381  005DEC  0E00               	movlw	0
  6382  005DEE  6E03               	movwf	?__div_to_l_+2,c
  6383  005DF0  0E00               	movlw	0
  6384  005DF2  6E04               	movwf	?__div_to_l_+3,c
  6385  005DF4  0012               	return	
  6386  005DF6                     l483:
  6387  005DF6  8E03               	bsf	__div_to_l_@f1+2,7,c
  6388  005DF8  0EFF               	movlw	255
  6389  005DFA  1601               	andwf	__div_to_l_@f1,f,c
  6390  005DFC  0EFF               	movlw	255
  6391  005DFE  1602               	andwf	__div_to_l_@f1+1,f,c
  6392  005E00  0EFF               	movlw	255
  6393  005E02  1603               	andwf	__div_to_l_@f1+2,f,c
  6394  005E04  0E00               	movlw	0
  6395  005E06  1604               	andwf	__div_to_l_@f1+3,f,c
  6396  005E08  8E06               	bsf	__div_to_l_@f2+2,7,c
  6397  005E0A  0EFF               	movlw	255
  6398  005E0C  1604               	andwf	__div_to_l_@f2,f,c
  6399  005E0E  0EFF               	movlw	255
  6400  005E10  1605               	andwf	__div_to_l_@f2+1,f,c
  6401  005E12  0EFF               	movlw	255
  6402  005E14  1606               	andwf	__div_to_l_@f2+2,f,c
  6403  005E16  0E00               	movlw	0
  6404  005E18  1607               	andwf	__div_to_l_@f2+3,f,c
  6405  005E1A  0E00               	movlw	0
  6406  005E1C  6E07               	movwf	__div_to_l_@quot,c
  6407  005E1E  0E00               	movlw	0
  6408  005E20  6E08               	movwf	__div_to_l_@quot+1,c
  6409  005E22  0E00               	movlw	0
  6410  005E24  6E09               	movwf	__div_to_l_@quot+2,c
  6411  005E26  0E00               	movlw	0
  6412  005E28  6E0A               	movwf	__div_to_l_@quot+3,c
  6413  005E2A  0E7F               	movlw	127
  6414  005E2C  5E0C               	subwf	__div_to_l_@exp1,f,c
  6415  005E2E  500B               	movf	__div_to_l_@cntr,w,c
  6416  005E30  0FA0               	addlw	160
  6417  005E32  5E0C               	subwf	__div_to_l_@exp1,f,c
  6418  005E34  0E20               	movlw	32
  6419  005E36  6E0B               	movwf	__div_to_l_@cntr,c
  6420  005E38  90D8               	bcf	status,0,c
  6421  005E3A  3607               	rlcf	__div_to_l_@quot,f,c
  6422  005E3C  3608               	rlcf	__div_to_l_@quot+1,f,c
  6423  005E3E  3609               	rlcf	__div_to_l_@quot+2,f,c
  6424  005E40  360A               	rlcf	__div_to_l_@quot+3,f,c
  6425  005E42  5004               	movf	__div_to_l_@f2,w,c
  6426  005E44  5C01               	subwf	__div_to_l_@f1,w,c
  6427  005E46  5005               	movf	__div_to_l_@f2+1,w,c
  6428  005E48  5802               	subwfb	__div_to_l_@f1+1,w,c
  6429  005E4A  5006               	movf	__div_to_l_@f2+2,w,c
  6430  005E4C  5803               	subwfb	__div_to_l_@f1+2,w,c
  6431  005E4E  5007               	movf	__div_to_l_@f2+3,w,c
  6432  005E50  5804               	subwfb	__div_to_l_@f1+3,w,c
  6433  005E52  A0D8               	btfss	status,0,c
  6434  005E54  D009               	goto	l485
  6435  005E56  5004               	movf	__div_to_l_@f2,w,c
  6436  005E58  5E01               	subwf	__div_to_l_@f1,f,c
  6437  005E5A  5005               	movf	__div_to_l_@f2+1,w,c
  6438  005E5C  5A02               	subwfb	__div_to_l_@f1+1,f,c
  6439  005E5E  5006               	movf	__div_to_l_@f2+2,w,c
  6440  005E60  5A03               	subwfb	__div_to_l_@f1+2,f,c
  6441  005E62  5007               	movf	__div_to_l_@f2+3,w,c
  6442  005E64  5A04               	subwfb	__div_to_l_@f1+3,f,c
  6443  005E66  8007               	bsf	__div_to_l_@quot,0,c
  6444  005E68                     l485:
  6445  005E68  90D8               	bcf	status,0,c
  6446  005E6A  3601               	rlcf	__div_to_l_@f1,f,c
  6447  005E6C  3602               	rlcf	__div_to_l_@f1+1,f,c
  6448  005E6E  3603               	rlcf	__div_to_l_@f1+2,f,c
  6449  005E70  3604               	rlcf	__div_to_l_@f1+3,f,c
  6450  005E72  2E0B               	decfsz	__div_to_l_@cntr,f,c
  6451  005E74  D7E1               	goto	l484
  6452  005E76  AE0C               	btfss	__div_to_l_@exp1,7,c
  6453  005E78  D016               	goto	l487
  6454  005E7A  500C               	movf	__div_to_l_@exp1,w,c
  6455  005E7C  0A80               	xorlw	128
  6456  005E7E  0F9F               	addlw	159
  6457  005E80  B0D8               	btfsc	status,0,c
  6458  005E82  D009               	goto	l488
  6459  005E84  0E00               	movlw	0
  6460  005E86  6E01               	movwf	?__div_to_l_,c
  6461  005E88  0E00               	movlw	0
  6462  005E8A  6E02               	movwf	?__div_to_l_+1,c
  6463  005E8C  0E00               	movlw	0
  6464  005E8E  6E03               	movwf	?__div_to_l_+2,c
  6465  005E90  0E00               	movlw	0
  6466  005E92  6E04               	movwf	?__div_to_l_+3,c
  6467  005E94  0012               	return	
  6468  005E96                     l488:
  6469  005E96  90D8               	bcf	status,0,c
  6470  005E98  320A               	rrcf	__div_to_l_@quot+3,f,c
  6471  005E9A  3209               	rrcf	__div_to_l_@quot+2,f,c
  6472  005E9C  3208               	rrcf	__div_to_l_@quot+1,f,c
  6473  005E9E  3207               	rrcf	__div_to_l_@quot,f,c
  6474  005EA0  3E0C               	incfsz	__div_to_l_@exp1,f,c
  6475  005EA2  D7F9               	goto	l488
  6476  005EA4  D015               	goto	u2820
  6477  005EA6                     l487:
  6478  005EA6  0E1F               	movlw	31
  6479  005EA8  640C               	cpfsgt	__div_to_l_@exp1,c
  6480  005EAA  D00F               	goto	l493
  6481  005EAC  0E00               	movlw	0
  6482  005EAE  6E01               	movwf	?__div_to_l_,c
  6483  005EB0  0E00               	movlw	0
  6484  005EB2  6E02               	movwf	?__div_to_l_+1,c
  6485  005EB4  0E00               	movlw	0
  6486  005EB6  6E03               	movwf	?__div_to_l_+2,c
  6487  005EB8  0E00               	movlw	0
  6488  005EBA  6E04               	movwf	?__div_to_l_+3,c
  6489  005EBC  0012               	return	
  6490  005EBE  90D8               	bcf	status,0,c
  6491  005EC0  3607               	rlcf	__div_to_l_@quot,f,c
  6492  005EC2  3608               	rlcf	__div_to_l_@quot+1,f,c
  6493  005EC4  3609               	rlcf	__div_to_l_@quot+2,f,c
  6494  005EC6  360A               	rlcf	__div_to_l_@quot+3,f,c
  6495  005EC8  060C               	decf	__div_to_l_@exp1,f,c
  6496  005ECA                     l493:
  6497  005ECA  500C               	movf	__div_to_l_@exp1,w,c
  6498  005ECC  A4D8               	btfss	status,2,c
  6499  005ECE  D7F7               	goto	l494
  6500  005ED0                     u2820:
  6501  005ED0  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  6502  005ED4  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6503  005ED8  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6504  005EDC  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6505  005EE0  0012               	return		;funcret
  6506  005EE2                     __end_of__div_to_l_:
  6507                           	opt stack 0
  6508                           tblptru	equ	0xFF8
  6509                           tblptrh	equ	0xFF7
  6510                           tblptrl	equ	0xFF6
  6511                           tablat	equ	0xFF5
  6512                           prodh	equ	0xFF4
  6513                           prodl	equ	0xFF3
  6514                           intcon	equ	0xFF2
  6515                           wreg	equ	0xFE8
  6516                           postinc2	equ	0xFDE
  6517                           postdec2	equ	0xFDD
  6518                           fsr2h	equ	0xFDA
  6519                           fsr2l	equ	0xFD9
  6520                           status	equ	0xFD8
  6521                           
  6522 ;; *************** function ___lltoft *****************
  6523 ;; Defined at:
  6524 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lltoft.c"
  6525 ;; Parameters:    Size  Location     Type
  6526 ;;  c               4   35[COMRAM] unsigned long 
  6527 ;; Auto vars:     Size  Location     Type
  6528 ;;  exp             1   43[COMRAM] unsigned char 
  6529 ;; Return value:  Size  Location     Type
  6530 ;;                  3   35[COMRAM] float 
  6531 ;; Registers used:
  6532 ;;		wreg, status,2, status,0, cstack
  6533 ;; Tracked objects:
  6534 ;;		On entry : 0/0
  6535 ;;		On exit  : 0/0
  6536 ;;		Unchanged: 0/0
  6537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6538 ;;      Params:         4       0       0       0       0       0       0
  6539 ;;      Locals:         1       0       0       0       0       0       0
  6540 ;;      Temps:          4       0       0       0       0       0       0
  6541 ;;      Totals:         9       0       0       0       0       0       0
  6542 ;;Total ram usage:        9 bytes
  6543 ;; Hardware stack levels used:    1
  6544 ;; Hardware stack levels required when called:    1
  6545 ;; This function calls:
  6546 ;;		___ftpack
  6547 ;; This function is called by:
  6548 ;;		_printf
  6549 ;; This function uses a non-reentrant model
  6550 ;;
  6551                           
  6552                           	psect	text13
  6553  005776                     __ptext13:
  6554                           	opt stack 0
  6555  005776                     ___lltoft:
  6556                           	opt stack 28
  6557                           
  6558                           ;incstack = 0
  6559  005776  0E8E               	movlw	142
  6560  005778  6E2C               	movwf	___lltoft@exp,c
  6561  00577A  D006               	goto	l692
  6562  00577C  90D8               	bcf	status,0,c
  6563  00577E  3227               	rrcf	___lltoft@c+3,f,c
  6564  005780  3226               	rrcf	___lltoft@c+2,f,c
  6565  005782  3225               	rrcf	___lltoft@c+1,f,c
  6566  005784  3224               	rrcf	___lltoft@c,f,c
  6567  005786  2A2C               	incf	___lltoft@exp,f,c
  6568  005788                     l692:
  6569  005788  0E00               	movlw	0
  6570  00578A  1424               	andwf	___lltoft@c,w,c
  6571  00578C  6E28               	movwf	??___lltoft& (0+255),c
  6572  00578E  0E00               	movlw	0
  6573  005790  1425               	andwf	___lltoft@c+1,w,c
  6574  005792  6E29               	movwf	(??___lltoft+1)& (0+255),c
  6575  005794  0E00               	movlw	0
  6576  005796  1426               	andwf	___lltoft@c+2,w,c
  6577  005798  6E2A               	movwf	(??___lltoft+2)& (0+255),c
  6578  00579A  0EFF               	movlw	255
  6579  00579C  1427               	andwf	___lltoft@c+3,w,c
  6580  00579E  6E2B               	movwf	(??___lltoft+3)& (0+255),c
  6581  0057A0  5028               	movf	??___lltoft,w,c
  6582  0057A2  1029               	iorwf	??___lltoft+1,w,c
  6583  0057A4  102A               	iorwf	??___lltoft+2,w,c
  6584  0057A6  102B               	iorwf	??___lltoft+3,w,c
  6585  0057A8  A4D8               	btfss	status,2,c
  6586  0057AA  D7E8               	goto	l693
  6587  0057AC  C024  F001         	movff	___lltoft@c,___ftpack@arg
  6588  0057B0  C025  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  6589  0057B4  C026  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  6590  0057B8  C02C  F004         	movff	___lltoft@exp,___ftpack@exp
  6591  0057BC  0E00               	movlw	0
  6592  0057BE  6E05               	movwf	___ftpack@sign,c
  6593  0057C0  EC1F  F02D         	call	___ftpack	;wreg free
  6594  0057C4  C001  F024         	movff	?___ftpack,?___lltoft
  6595  0057C8  C002  F025         	movff	?___ftpack+1,?___lltoft+1
  6596  0057CC  C003  F026         	movff	?___ftpack+2,?___lltoft+2
  6597  0057D0  0012               	return	
  6598  0057D2                     __end_of___lltoft:
  6599                           	opt stack 0
  6600                           tblptru	equ	0xFF8
  6601                           tblptrh	equ	0xFF7
  6602                           tblptrl	equ	0xFF6
  6603                           tablat	equ	0xFF5
  6604                           prodh	equ	0xFF4
  6605                           prodl	equ	0xFF3
  6606                           intcon	equ	0xFF2
  6607                           wreg	equ	0xFE8
  6608                           postinc2	equ	0xFDE
  6609                           postdec2	equ	0xFDD
  6610                           fsr2h	equ	0xFDA
  6611                           fsr2l	equ	0xFD9
  6612                           status	equ	0xFD8
  6613                           
  6614 ;; *************** function ___llmod *****************
  6615 ;; Defined at:
  6616 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\llmod.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;  dividend        4   13[COMRAM] unsigned long 
  6619 ;;  divisor         4   17[COMRAM] unsigned long 
  6620 ;; Auto vars:     Size  Location     Type
  6621 ;;  counter         1   21[COMRAM] unsigned char 
  6622 ;; Return value:  Size  Location     Type
  6623 ;;                  4   13[COMRAM] unsigned long 
  6624 ;; Registers used:
  6625 ;;		wreg, status,2, status,0
  6626 ;; Tracked objects:
  6627 ;;		On entry : 0/0
  6628 ;;		On exit  : 0/0
  6629 ;;		Unchanged: 0/0
  6630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6631 ;;      Params:         8       0       0       0       0       0       0
  6632 ;;      Locals:         1       0       0       0       0       0       0
  6633 ;;      Temps:          0       0       0       0       0       0       0
  6634 ;;      Totals:         9       0       0       0       0       0       0
  6635 ;;Total ram usage:        9 bytes
  6636 ;; Hardware stack levels used:    1
  6637 ;; This function calls:
  6638 ;;		Nothing
  6639 ;; This function is called by:
  6640 ;;		_printf
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           	psect	text14
  6645  0057D2                     __ptext14:
  6646                           	opt stack 0
  6647  0057D2                     ___llmod:
  6648                           	opt stack 29
  6649                           
  6650                           ;incstack = 0
  6651  0057D2  5012               	movf	___llmod@divisor,w,c
  6652  0057D4  1013               	iorwf	___llmod@divisor+1,w,c
  6653  0057D6  1014               	iorwf	___llmod@divisor+2,w,c
  6654  0057D8  1015               	iorwf	___llmod@divisor+3,w,c
  6655  0057DA  B4D8               	btfsc	status,2,c
  6656  0057DC  D024               	goto	l686
  6657  0057DE  0E01               	movlw	1
  6658  0057E0  6E16               	movwf	___llmod@counter,c
  6659  0057E2  D006               	goto	l681
  6660  0057E4  90D8               	bcf	status,0,c
  6661  0057E6  3612               	rlcf	___llmod@divisor,f,c
  6662  0057E8  3613               	rlcf	___llmod@divisor+1,f,c
  6663  0057EA  3614               	rlcf	___llmod@divisor+2,f,c
  6664  0057EC  3615               	rlcf	___llmod@divisor+3,f,c
  6665  0057EE  2A16               	incf	___llmod@counter,f,c
  6666  0057F0                     l681:
  6667  0057F0  AE15               	btfss	___llmod@divisor+3,7,c
  6668  0057F2  D7F8               	goto	l682
  6669  0057F4                     u3050:
  6670  0057F4  5012               	movf	___llmod@divisor,w,c
  6671  0057F6  5C0E               	subwf	___llmod@dividend,w,c
  6672  0057F8  5013               	movf	___llmod@divisor+1,w,c
  6673  0057FA  580F               	subwfb	___llmod@dividend+1,w,c
  6674  0057FC  5014               	movf	___llmod@divisor+2,w,c
  6675  0057FE  5810               	subwfb	___llmod@dividend+2,w,c
  6676  005800  5015               	movf	___llmod@divisor+3,w,c
  6677  005802  5811               	subwfb	___llmod@dividend+3,w,c
  6678  005804  A0D8               	btfss	status,0,c
  6679  005806  D008               	goto	l685
  6680  005808  5012               	movf	___llmod@divisor,w,c
  6681  00580A  5E0E               	subwf	___llmod@dividend,f,c
  6682  00580C  5013               	movf	___llmod@divisor+1,w,c
  6683  00580E  5A0F               	subwfb	___llmod@dividend+1,f,c
  6684  005810  5014               	movf	___llmod@divisor+2,w,c
  6685  005812  5A10               	subwfb	___llmod@dividend+2,f,c
  6686  005814  5015               	movf	___llmod@divisor+3,w,c
  6687  005816  5A11               	subwfb	___llmod@dividend+3,f,c
  6688  005818                     l685:
  6689  005818  90D8               	bcf	status,0,c
  6690  00581A  3215               	rrcf	___llmod@divisor+3,f,c
  6691  00581C  3214               	rrcf	___llmod@divisor+2,f,c
  6692  00581E  3213               	rrcf	___llmod@divisor+1,f,c
  6693  005820  3212               	rrcf	___llmod@divisor,f,c
  6694  005822  2E16               	decfsz	___llmod@counter,f,c
  6695  005824  D7E7               	goto	u3050
  6696  005826                     l686:
  6697  005826  C00E  F00E         	movff	___llmod@dividend,?___llmod
  6698  00582A  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  6699  00582E  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  6700  005832  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  6701  005836  0012               	return		;funcret
  6702  005838                     __end_of___llmod:
  6703                           	opt stack 0
  6704                           tblptru	equ	0xFF8
  6705                           tblptrh	equ	0xFF7
  6706                           tblptrl	equ	0xFF6
  6707                           tablat	equ	0xFF5
  6708                           prodh	equ	0xFF4
  6709                           prodl	equ	0xFF3
  6710                           intcon	equ	0xFF2
  6711                           wreg	equ	0xFE8
  6712                           postinc2	equ	0xFDE
  6713                           postdec2	equ	0xFDD
  6714                           fsr2h	equ	0xFDA
  6715                           fsr2l	equ	0xFD9
  6716                           status	equ	0xFD8
  6717                           
  6718 ;; *************** function ___lldiv *****************
  6719 ;; Defined at:
  6720 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
  6721 ;; Parameters:    Size  Location     Type
  6722 ;;  dividend        4    0[COMRAM] unsigned long 
  6723 ;;  divisor         4    4[COMRAM] unsigned long 
  6724 ;; Auto vars:     Size  Location     Type
  6725 ;;  quotient        4    8[COMRAM] unsigned long 
  6726 ;;  counter         1   12[COMRAM] unsigned char 
  6727 ;; Return value:  Size  Location     Type
  6728 ;;                  4    0[COMRAM] unsigned long 
  6729 ;; Registers used:
  6730 ;;		wreg, status,2, status,0
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6736 ;;      Params:         8       0       0       0       0       0       0
  6737 ;;      Locals:         5       0       0       0       0       0       0
  6738 ;;      Temps:          0       0       0       0       0       0       0
  6739 ;;      Totals:        13       0       0       0       0       0       0
  6740 ;;Total ram usage:       13 bytes
  6741 ;; Hardware stack levels used:    1
  6742 ;; This function calls:
  6743 ;;		Nothing
  6744 ;; This function is called by:
  6745 ;;		_printf
  6746 ;; This function uses a non-reentrant model
  6747 ;;
  6748                           
  6749                           	psect	text15
  6750  0058A8                     __ptext15:
  6751                           	opt stack 0
  6752  0058A8                     ___lldiv:
  6753                           	opt stack 29
  6754                           
  6755                           ;incstack = 0
  6756  0058A8  0E00               	movlw	0
  6757  0058AA  6E09               	movwf	___lldiv@quotient,c
  6758  0058AC  0E00               	movlw	0
  6759  0058AE  6E0A               	movwf	___lldiv@quotient+1,c
  6760  0058B0  0E00               	movlw	0
  6761  0058B2  6E0B               	movwf	___lldiv@quotient+2,c
  6762  0058B4  0E00               	movlw	0
  6763  0058B6  6E0C               	movwf	___lldiv@quotient+3,c
  6764  0058B8  5005               	movf	___lldiv@divisor,w,c
  6765  0058BA  1006               	iorwf	___lldiv@divisor+1,w,c
  6766  0058BC  1007               	iorwf	___lldiv@divisor+2,w,c
  6767  0058BE  1008               	iorwf	___lldiv@divisor+3,w,c
  6768  0058C0  B4D8               	btfsc	status,2,c
  6769  0058C2  D02A               	goto	l676
  6770  0058C4  0E01               	movlw	1
  6771  0058C6  6E0D               	movwf	___lldiv@counter,c
  6772  0058C8  D006               	goto	l671
  6773  0058CA  90D8               	bcf	status,0,c
  6774  0058CC  3605               	rlcf	___lldiv@divisor,f,c
  6775  0058CE  3606               	rlcf	___lldiv@divisor+1,f,c
  6776  0058D0  3607               	rlcf	___lldiv@divisor+2,f,c
  6777  0058D2  3608               	rlcf	___lldiv@divisor+3,f,c
  6778  0058D4  2A0D               	incf	___lldiv@counter,f,c
  6779  0058D6                     l671:
  6780  0058D6  AE08               	btfss	___lldiv@divisor+3,7,c
  6781  0058D8  D7F8               	goto	l672
  6782  0058DA                     u3020:
  6783  0058DA  90D8               	bcf	status,0,c
  6784  0058DC  3609               	rlcf	___lldiv@quotient,f,c
  6785  0058DE  360A               	rlcf	___lldiv@quotient+1,f,c
  6786  0058E0  360B               	rlcf	___lldiv@quotient+2,f,c
  6787  0058E2  360C               	rlcf	___lldiv@quotient+3,f,c
  6788  0058E4  5005               	movf	___lldiv@divisor,w,c
  6789  0058E6  5C01               	subwf	___lldiv@dividend,w,c
  6790  0058E8  5006               	movf	___lldiv@divisor+1,w,c
  6791  0058EA  5802               	subwfb	___lldiv@dividend+1,w,c
  6792  0058EC  5007               	movf	___lldiv@divisor+2,w,c
  6793  0058EE  5803               	subwfb	___lldiv@dividend+2,w,c
  6794  0058F0  5008               	movf	___lldiv@divisor+3,w,c
  6795  0058F2  5804               	subwfb	___lldiv@dividend+3,w,c
  6796  0058F4  A0D8               	btfss	status,0,c
  6797  0058F6  D009               	goto	l675
  6798  0058F8  5005               	movf	___lldiv@divisor,w,c
  6799  0058FA  5E01               	subwf	___lldiv@dividend,f,c
  6800  0058FC  5006               	movf	___lldiv@divisor+1,w,c
  6801  0058FE  5A02               	subwfb	___lldiv@dividend+1,f,c
  6802  005900  5007               	movf	___lldiv@divisor+2,w,c
  6803  005902  5A03               	subwfb	___lldiv@dividend+2,f,c
  6804  005904  5008               	movf	___lldiv@divisor+3,w,c
  6805  005906  5A04               	subwfb	___lldiv@dividend+3,f,c
  6806  005908  8009               	bsf	___lldiv@quotient,0,c
  6807  00590A                     l675:
  6808  00590A  90D8               	bcf	status,0,c
  6809  00590C  3208               	rrcf	___lldiv@divisor+3,f,c
  6810  00590E  3207               	rrcf	___lldiv@divisor+2,f,c
  6811  005910  3206               	rrcf	___lldiv@divisor+1,f,c
  6812  005912  3205               	rrcf	___lldiv@divisor,f,c
  6813  005914  2E0D               	decfsz	___lldiv@counter,f,c
  6814  005916  D7E1               	goto	u3020
  6815  005918                     l676:
  6816  005918  C009  F001         	movff	___lldiv@quotient,?___lldiv
  6817  00591C  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  6818  005920  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  6819  005924  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  6820  005928  0012               	return		;funcret
  6821  00592A                     __end_of___lldiv:
  6822                           	opt stack 0
  6823                           tblptru	equ	0xFF8
  6824                           tblptrh	equ	0xFF7
  6825                           tblptrl	equ	0xFF6
  6826                           tablat	equ	0xFF5
  6827                           prodh	equ	0xFF4
  6828                           prodl	equ	0xFF3
  6829                           intcon	equ	0xFF2
  6830                           wreg	equ	0xFE8
  6831                           postinc2	equ	0xFDE
  6832                           postdec2	equ	0xFDD
  6833                           fsr2h	equ	0xFDA
  6834                           fsr2l	equ	0xFD9
  6835                           status	equ	0xFD8
  6836                           
  6837 ;; *************** function ___fttol *****************
  6838 ;; Defined at:
  6839 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fttol.c"
  6840 ;; Parameters:    Size  Location     Type
  6841 ;;  f1              3   20[COMRAM] float 
  6842 ;; Auto vars:     Size  Location     Type
  6843 ;;  lval            4   30[COMRAM] unsigned long 
  6844 ;;  exp1            1   34[COMRAM] unsigned char 
  6845 ;;  sign1           1   29[COMRAM] unsigned char 
  6846 ;; Return value:  Size  Location     Type
  6847 ;;                  4   20[COMRAM] long 
  6848 ;; Registers used:
  6849 ;;		wreg, status,2, status,0
  6850 ;; Tracked objects:
  6851 ;;		On entry : 0/0
  6852 ;;		On exit  : 0/0
  6853 ;;		Unchanged: 0/0
  6854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6855 ;;      Params:         4       0       0       0       0       0       0
  6856 ;;      Locals:         6       0       0       0       0       0       0
  6857 ;;      Temps:          5       0       0       0       0       0       0
  6858 ;;      Totals:        15       0       0       0       0       0       0
  6859 ;;Total ram usage:       15 bytes
  6860 ;; Hardware stack levels used:    1
  6861 ;; This function calls:
  6862 ;;		Nothing
  6863 ;; This function is called by:
  6864 ;;		_main
  6865 ;;		_printf
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           	psect	text16
  6870  005BD2                     __ptext16:
  6871                           	opt stack 0
  6872  005BD2                     ___fttol:
  6873                           	opt stack 29
  6874                           
  6875                           ;incstack = 0
  6876  005BD2  C017  F019         	movff	___fttol@f1+2,??___fttol
  6877  005BD6  6A1A               	clrf	(??___fttol+1)& (0+255),c
  6878  005BD8  6A1B               	clrf	(??___fttol+2)& (0+255),c
  6879  005BDA  3416               	rlcf	___fttol@f1+1,w,c
  6880  005BDC  3619               	rlcf	??___fttol& (0+255),f,c
  6881  005BDE  E301               	bnc	u2931
  6882  005BE0  801A               	bsf	(??___fttol+1)& (0+255),0,c
  6883  005BE2                     u2931:
  6884  005BE2  5019               	movf	??___fttol,w,c
  6885  005BE4  6E23               	movwf	___fttol@exp1,c
  6886  005BE6  5023               	movf	___fttol@exp1,w,c
  6887  005BE8  A4D8               	btfss	status,2,c
  6888  005BEA  D009               	goto	l630
  6889  005BEC  0E00               	movlw	0
  6890  005BEE  6E15               	movwf	?___fttol,c
  6891  005BF0  0E00               	movlw	0
  6892  005BF2  6E16               	movwf	?___fttol+1,c
  6893  005BF4  0E00               	movlw	0
  6894  005BF6  6E17               	movwf	?___fttol+2,c
  6895  005BF8  0E00               	movlw	0
  6896  005BFA  6E18               	movwf	?___fttol+3,c
  6897  005BFC  0012               	return	
  6898  005BFE                     l630:
  6899  005BFE  0E17               	movlw	23
  6900  005C00  6E19               	movwf	??___fttol& (0+255),c
  6901  005C02  C015  F01A         	movff	___fttol@f1,??___fttol+1
  6902  005C06  C016  F01B         	movff	___fttol@f1+1,??___fttol+2
  6903  005C0A  C017  F01C         	movff	___fttol@f1+2,??___fttol+3
  6904  005C0E  2819               	incf	??___fttol,w,c
  6905  005C10  6E1D               	movwf	(??___fttol+4)& (0+255),c
  6906  005C12  D004               	goto	u2950
  6907  005C14                     u2955:
  6908  005C14  90D8               	bcf	status,0,c
  6909  005C16  321C               	rrcf	??___fttol+3,f,c
  6910  005C18  321B               	rrcf	??___fttol+2,f,c
  6911  005C1A  321A               	rrcf	??___fttol+1,f,c
  6912  005C1C                     u2950:
  6913  005C1C  2E1D               	decfsz	(??___fttol+4)& (0+255),f,c
  6914  005C1E  D7FA               	goto	u2955
  6915  005C20  501A               	movf	??___fttol+1,w,c
  6916  005C22  6E1E               	movwf	___fttol@sign1,c
  6917  005C24  8E16               	bsf	___fttol@f1+1,7,c
  6918  005C26  0EFF               	movlw	255
  6919  005C28  1615               	andwf	___fttol@f1,f,c
  6920  005C2A  0EFF               	movlw	255
  6921  005C2C  1616               	andwf	___fttol@f1+1,f,c
  6922  005C2E  0E00               	movlw	0
  6923  005C30  1617               	andwf	___fttol@f1+2,f,c
  6924  005C32  5015               	movf	___fttol@f1,w,c
  6925  005C34  6E1F               	movwf	___fttol@lval,c
  6926  005C36  5016               	movf	___fttol@f1+1,w,c
  6927  005C38  6E20               	movwf	___fttol@lval+1,c
  6928  005C3A  5017               	movf	___fttol@f1+2,w,c
  6929  005C3C  6E21               	movwf	___fttol@lval+2,c
  6930  005C3E  6A22               	clrf	___fttol@lval+3,c
  6931  005C40  0E8E               	movlw	142
  6932  005C42  5E23               	subwf	___fttol@exp1,f,c
  6933  005C44  AE23               	btfss	___fttol@exp1,7,c
  6934  005C46  D016               	goto	l632
  6935  005C48  5023               	movf	___fttol@exp1,w,c
  6936  005C4A  0A80               	xorlw	128
  6937  005C4C  0F8F               	addlw	143
  6938  005C4E  B0D8               	btfsc	status,0,c
  6939  005C50  D009               	goto	l633
  6940  005C52  0E00               	movlw	0
  6941  005C54  6E15               	movwf	?___fttol,c
  6942  005C56  0E00               	movlw	0
  6943  005C58  6E16               	movwf	?___fttol+1,c
  6944  005C5A  0E00               	movlw	0
  6945  005C5C  6E17               	movwf	?___fttol+2,c
  6946  005C5E  0E00               	movlw	0
  6947  005C60  6E18               	movwf	?___fttol+3,c
  6948  005C62  0012               	return	
  6949  005C64                     l633:
  6950  005C64  90D8               	bcf	status,0,c
  6951  005C66  3222               	rrcf	___fttol@lval+3,f,c
  6952  005C68  3221               	rrcf	___fttol@lval+2,f,c
  6953  005C6A  3220               	rrcf	___fttol@lval+1,f,c
  6954  005C6C  321F               	rrcf	___fttol@lval,f,c
  6955  005C6E  3E23               	incfsz	___fttol@exp1,f,c
  6956  005C70  D7F9               	goto	l633
  6957  005C72  D015               	goto	u2990
  6958  005C74                     l632:
  6959  005C74  0E17               	movlw	23
  6960  005C76  6423               	cpfsgt	___fttol@exp1,c
  6961  005C78  D00F               	goto	l638
  6962  005C7A  0E00               	movlw	0
  6963  005C7C  6E15               	movwf	?___fttol,c
  6964  005C7E  0E00               	movlw	0
  6965  005C80  6E16               	movwf	?___fttol+1,c
  6966  005C82  0E00               	movlw	0
  6967  005C84  6E17               	movwf	?___fttol+2,c
  6968  005C86  0E00               	movlw	0
  6969  005C88  6E18               	movwf	?___fttol+3,c
  6970  005C8A  0012               	return	
  6971  005C8C  90D8               	bcf	status,0,c
  6972  005C8E  361F               	rlcf	___fttol@lval,f,c
  6973  005C90  3620               	rlcf	___fttol@lval+1,f,c
  6974  005C92  3621               	rlcf	___fttol@lval+2,f,c
  6975  005C94  3622               	rlcf	___fttol@lval+3,f,c
  6976  005C96  0623               	decf	___fttol@exp1,f,c
  6977  005C98                     l638:
  6978  005C98  5023               	movf	___fttol@exp1,w,c
  6979  005C9A  A4D8               	btfss	status,2,c
  6980  005C9C  D7F7               	goto	l639
  6981  005C9E                     u2990:
  6982  005C9E  501E               	movf	___fttol@sign1,w,c
  6983  005CA0  B4D8               	btfsc	status,2,c
  6984  005CA2  D008               	goto	l641
  6985  005CA4  1E22               	comf	___fttol@lval+3,f,c
  6986  005CA6  1E21               	comf	___fttol@lval+2,f,c
  6987  005CA8  1E20               	comf	___fttol@lval+1,f,c
  6988  005CAA  6C1F               	negf	___fttol@lval,c
  6989  005CAC  0E00               	movlw	0
  6990  005CAE  2220               	addwfc	___fttol@lval+1,f,c
  6991  005CB0  2221               	addwfc	___fttol@lval+2,f,c
  6992  005CB2  2222               	addwfc	___fttol@lval+3,f,c
  6993  005CB4                     l641:
  6994  005CB4  C01F  F015         	movff	___fttol@lval,?___fttol
  6995  005CB8  C020  F016         	movff	___fttol@lval+1,?___fttol+1
  6996  005CBC  C021  F017         	movff	___fttol@lval+2,?___fttol+2
  6997  005CC0  C022  F018         	movff	___fttol@lval+3,?___fttol+3
  6998  005CC4  0012               	return	
  6999  005CC6                     __end_of___fttol:
  7000                           	opt stack 0
  7001                           tblptru	equ	0xFF8
  7002                           tblptrh	equ	0xFF7
  7003                           tblptrl	equ	0xFF6
  7004                           tablat	equ	0xFF5
  7005                           prodh	equ	0xFF4
  7006                           prodl	equ	0xFF3
  7007                           intcon	equ	0xFF2
  7008                           wreg	equ	0xFE8
  7009                           postinc2	equ	0xFDE
  7010                           postdec2	equ	0xFDD
  7011                           fsr2h	equ	0xFDA
  7012                           fsr2l	equ	0xFD9
  7013                           status	equ	0xFD8
  7014                           
  7015 ;; *************** function ___ftsub *****************
  7016 ;; Defined at:
  7017 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftsub.c"
  7018 ;; Parameters:    Size  Location     Type
  7019 ;;  f1              3   84[COMRAM] float 
  7020 ;;  f2              3   87[COMRAM] float 
  7021 ;; Auto vars:     Size  Location     Type
  7022 ;;		None
  7023 ;; Return value:  Size  Location     Type
  7024 ;;                  3   84[COMRAM] float 
  7025 ;; Registers used:
  7026 ;;		wreg, status,2, status,0, cstack
  7027 ;; Tracked objects:
  7028 ;;		On entry : 0/0
  7029 ;;		On exit  : 0/0
  7030 ;;		Unchanged: 0/0
  7031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7032 ;;      Params:         6       0       0       0       0       0       0
  7033 ;;      Locals:         0       0       0       0       0       0       0
  7034 ;;      Temps:          0       0       0       0       0       0       0
  7035 ;;      Totals:         6       0       0       0       0       0       0
  7036 ;;Total ram usage:        6 bytes
  7037 ;; Hardware stack levels used:    1
  7038 ;; Hardware stack levels required when called:    2
  7039 ;; This function calls:
  7040 ;;		___ftadd
  7041 ;; This function is called by:
  7042 ;;		_printf
  7043 ;; This function uses a non-reentrant model
  7044 ;;
  7045                           
  7046                           	psect	text17
  7047  005736                     __ptext17:
  7048                           	opt stack 0
  7049  005736                     ___ftsub:
  7050                           	opt stack 27
  7051                           
  7052                           ;incstack = 0
  7053  005736  5058               	movf	___ftsub@f2,w,c
  7054  005738  1059               	iorwf	___ftsub@f2+1,w,c
  7055  00573A  105A               	iorwf	___ftsub@f2+2,w,c
  7056  00573C  B4D8               	btfsc	status,2,c
  7057  00573E  D006               	goto	l626
  7058  005740  0E00               	movlw	0
  7059  005742  1A58               	xorwf	___ftsub@f2,f,c
  7060  005744  0E00               	movlw	0
  7061  005746  1A59               	xorwf	___ftsub@f2+1,f,c
  7062  005748  0E80               	movlw	128
  7063  00574A  1A5A               	xorwf	___ftsub@f2+2,f,c
  7064  00574C                     l626:
  7065  00574C  C055  F049         	movff	___ftsub@f1,___ftadd@f1
  7066  005750  C056  F04A         	movff	___ftsub@f1+1,___ftadd@f1+1
  7067  005754  C057  F04B         	movff	___ftsub@f1+2,___ftadd@f1+2
  7068  005758  C058  F04C         	movff	___ftsub@f2,___ftadd@f2
  7069  00575C  C059  F04D         	movff	___ftsub@f2+1,___ftadd@f2+1
  7070  005760  C05A  F04E         	movff	___ftsub@f2+2,___ftadd@f2+2
  7071  005764  EC0A  F030         	call	___ftadd	;wreg free
  7072  005768  C049  F055         	movff	?___ftadd,?___ftsub
  7073  00576C  C04A  F056         	movff	?___ftadd+1,?___ftsub+1
  7074  005770  C04B  F057         	movff	?___ftadd+2,?___ftsub+2
  7075  005774  0012               	return	
  7076  005776                     __end_of___ftsub:
  7077                           	opt stack 0
  7078                           tblptru	equ	0xFF8
  7079                           tblptrh	equ	0xFF7
  7080                           tblptrl	equ	0xFF6
  7081                           tablat	equ	0xFF5
  7082                           prodh	equ	0xFF4
  7083                           prodl	equ	0xFF3
  7084                           intcon	equ	0xFF2
  7085                           wreg	equ	0xFE8
  7086                           postinc2	equ	0xFDE
  7087                           postdec2	equ	0xFDD
  7088                           fsr2h	equ	0xFDA
  7089                           fsr2l	equ	0xFD9
  7090                           status	equ	0xFD8
  7091                           
  7092 ;; *************** function ___ftadd *****************
  7093 ;; Defined at:
  7094 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftadd.c"
  7095 ;; Parameters:    Size  Location     Type
  7096 ;;  f1              3   72[COMRAM] float 
  7097 ;;  f2              3   75[COMRAM] float 
  7098 ;; Auto vars:     Size  Location     Type
  7099 ;;  exp1            1   83[COMRAM] unsigned char 
  7100 ;;  exp2            1   82[COMRAM] unsigned char 
  7101 ;;  sign            1   81[COMRAM] unsigned char 
  7102 ;; Return value:  Size  Location     Type
  7103 ;;                  3   72[COMRAM] float 
  7104 ;; Registers used:
  7105 ;;		wreg, status,2, status,0, cstack
  7106 ;; Tracked objects:
  7107 ;;		On entry : 0/0
  7108 ;;		On exit  : 0/0
  7109 ;;		Unchanged: 0/0
  7110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7111 ;;      Params:         6       0       0       0       0       0       0
  7112 ;;      Locals:         3       0       0       0       0       0       0
  7113 ;;      Temps:          3       0       0       0       0       0       0
  7114 ;;      Totals:        12       0       0       0       0       0       0
  7115 ;;Total ram usage:       12 bytes
  7116 ;; Hardware stack levels used:    1
  7117 ;; Hardware stack levels required when called:    1
  7118 ;; This function calls:
  7119 ;;		___ftpack
  7120 ;; This function is called by:
  7121 ;;		_printf
  7122 ;;		___ftsub
  7123 ;; This function uses a non-reentrant model
  7124 ;;
  7125                           
  7126                           	psect	text18
  7127  006014                     __ptext18:
  7128                           	opt stack 0
  7129  006014                     ___ftadd:
  7130                           	opt stack 27
  7131                           
  7132                           ;incstack = 0
  7133  006014  C04B  F04F         	movff	___ftadd@f1+2,??___ftadd
  7134  006018  6A50               	clrf	(??___ftadd+1)& (0+255),c
  7135  00601A  6A51               	clrf	(??___ftadd+2)& (0+255),c
  7136  00601C  344A               	rlcf	___ftadd@f1+1,w,c
  7137  00601E  364F               	rlcf	??___ftadd& (0+255),f,c
  7138  006020  E301               	bnc	u2181
  7139  006022  8050               	bsf	(??___ftadd+1)& (0+255),0,c
  7140  006024                     u2181:
  7141  006024  504F               	movf	??___ftadd,w,c
  7142  006026  6E54               	movwf	___ftadd@exp1,c
  7143  006028  C04E  F04F         	movff	___ftadd@f2+2,??___ftadd
  7144  00602C  6A50               	clrf	(??___ftadd+1)& (0+255),c
  7145  00602E  6A51               	clrf	(??___ftadd+2)& (0+255),c
  7146  006030  344D               	rlcf	___ftadd@f2+1,w,c
  7147  006032  364F               	rlcf	??___ftadd& (0+255),f,c
  7148  006034  E301               	bnc	u2191
  7149  006036  8050               	bsf	(??___ftadd+1)& (0+255),0,c
  7150  006038                     u2191:
  7151  006038  504F               	movf	??___ftadd,w,c
  7152  00603A  6E53               	movwf	___ftadd@exp2,c
  7153  00603C  5054               	movf	___ftadd@exp1,w,c
  7154  00603E  B4D8               	btfsc	status,2,c
  7155  006040  D00B               	goto	u2220
  7156  006042  5053               	movf	___ftadd@exp2,w,c
  7157  006044  5C54               	subwf	___ftadd@exp1,w,c
  7158  006046  B0D8               	btfsc	status,0,c
  7159  006048  D00E               	goto	l544
  7160  00604A  5054               	movf	___ftadd@exp1,w,c
  7161  00604C  0800               	sublw	0
  7162  00604E  2453               	addwf	___ftadd@exp2,w,c
  7163  006050  6E4F               	movwf	??___ftadd& (0+255),c
  7164  006052  0E18               	movlw	24
  7165  006054  644F               	cpfsgt	??___ftadd,c
  7166  006056  D007               	goto	l544
  7167  006058                     u2220:
  7168  006058  C04C  F049         	movff	___ftadd@f2,?___ftadd
  7169  00605C  C04D  F04A         	movff	___ftadd@f2+1,?___ftadd+1
  7170  006060  C04E  F04B         	movff	___ftadd@f2+2,?___ftadd+2
  7171  006064  0012               	return	
  7172  006066                     l544:
  7173  006066  5053               	movf	___ftadd@exp2,w,c
  7174  006068  B4D8               	btfsc	status,2,c
  7175  00606A  D00B               	goto	u2250
  7176  00606C  5054               	movf	___ftadd@exp1,w,c
  7177  00606E  5C53               	subwf	___ftadd@exp2,w,c
  7178  006070  B0D8               	btfsc	status,0,c
  7179  006072  D00E               	goto	l548
  7180  006074  5053               	movf	___ftadd@exp2,w,c
  7181  006076  0800               	sublw	0
  7182  006078  2454               	addwf	___ftadd@exp1,w,c
  7183  00607A  6E4F               	movwf	??___ftadd& (0+255),c
  7184  00607C  0E18               	movlw	24
  7185  00607E  644F               	cpfsgt	??___ftadd,c
  7186  006080  D007               	goto	l548
  7187  006082                     u2250:
  7188  006082  C049  F049         	movff	___ftadd@f1,?___ftadd
  7189  006086  C04A  F04A         	movff	___ftadd@f1+1,?___ftadd+1
  7190  00608A  C04B  F04B         	movff	___ftadd@f1+2,?___ftadd+2
  7191  00608E  0012               	return	
  7192  006090                     l548:
  7193  006090  0E06               	movlw	6
  7194  006092  6E52               	movwf	___ftadd@sign,c
  7195  006094  BE4B               	btfsc	___ftadd@f1+2,7,c
  7196  006096  8E52               	bsf	___ftadd@sign,7,c
  7197  006098  BE4E               	btfsc	___ftadd@f2+2,7,c
  7198  00609A  8C52               	bsf	___ftadd@sign,6,c
  7199  00609C  8E4A               	bsf	___ftadd@f1+1,7,c
  7200  00609E  0EFF               	movlw	255
  7201  0060A0  1649               	andwf	___ftadd@f1,f,c
  7202  0060A2  0EFF               	movlw	255
  7203  0060A4  164A               	andwf	___ftadd@f1+1,f,c
  7204  0060A6  0E00               	movlw	0
  7205  0060A8  164B               	andwf	___ftadd@f1+2,f,c
  7206  0060AA  8E4D               	bsf	___ftadd@f2+1,7,c
  7207  0060AC  0EFF               	movlw	255
  7208  0060AE  164C               	andwf	___ftadd@f2,f,c
  7209  0060B0  0EFF               	movlw	255
  7210  0060B2  164D               	andwf	___ftadd@f2+1,f,c
  7211  0060B4  0E00               	movlw	0
  7212  0060B6  164E               	andwf	___ftadd@f2+2,f,c
  7213  0060B8  5053               	movf	___ftadd@exp2,w,c
  7214  0060BA  5C54               	subwf	___ftadd@exp1,w,c
  7215  0060BC  B0D8               	btfsc	status,0,c
  7216  0060BE  D01B               	goto	l553
  7217  0060C0                     u2280:
  7218  0060C0  90D8               	bcf	status,0,c
  7219  0060C2  364C               	rlcf	___ftadd@f2,f,c
  7220  0060C4  364D               	rlcf	___ftadd@f2+1,f,c
  7221  0060C6  364E               	rlcf	___ftadd@f2+2,f,c
  7222  0060C8  0653               	decf	___ftadd@exp2,f,c
  7223  0060CA  5054               	movf	___ftadd@exp1,w,c
  7224  0060CC  1853               	xorwf	___ftadd@exp2,w,c
  7225  0060CE  B4D8               	btfsc	status,2,c
  7226  0060D0  D00D               	goto	l558
  7227  0060D2  0652               	decf	___ftadd@sign,f,c
  7228  0060D4  C052  F04F         	movff	___ftadd@sign,??___ftadd
  7229  0060D8  0E07               	movlw	7
  7230  0060DA  164F               	andwf	??___ftadd,f,c
  7231  0060DC  B4D8               	btfsc	status,2,c
  7232  0060DE  D006               	goto	l558
  7233  0060E0  D7EF               	goto	u2280
  7234  0060E2  90D8               	bcf	status,0,c
  7235  0060E4  324B               	rrcf	___ftadd@f1+2,f,c
  7236  0060E6  324A               	rrcf	___ftadd@f1+1,f,c
  7237  0060E8  3249               	rrcf	___ftadd@f1,f,c
  7238  0060EA  2A54               	incf	___ftadd@exp1,f,c
  7239  0060EC                     l558:
  7240  0060EC  5053               	movf	___ftadd@exp2,w,c
  7241  0060EE  1854               	xorwf	___ftadd@exp1,w,c
  7242  0060F0  B4D8               	btfsc	status,2,c
  7243  0060F2  D01F               	goto	u2350
  7244  0060F4  D7F6               	goto	l559
  7245  0060F6                     l553:
  7246  0060F6  5054               	movf	___ftadd@exp1,w,c
  7247  0060F8  5C53               	subwf	___ftadd@exp2,w,c
  7248  0060FA  B0D8               	btfsc	status,0,c
  7249  0060FC  D01A               	goto	u2350
  7250  0060FE                     u2320:
  7251  0060FE  90D8               	bcf	status,0,c
  7252  006100  3649               	rlcf	___ftadd@f1,f,c
  7253  006102  364A               	rlcf	___ftadd@f1+1,f,c
  7254  006104  364B               	rlcf	___ftadd@f1+2,f,c
  7255  006106  0654               	decf	___ftadd@exp1,f,c
  7256  006108  5054               	movf	___ftadd@exp1,w,c
  7257  00610A  1853               	xorwf	___ftadd@exp2,w,c
  7258  00610C  B4D8               	btfsc	status,2,c
  7259  00610E  D00D               	goto	l567
  7260  006110  0652               	decf	___ftadd@sign,f,c
  7261  006112  C052  F04F         	movff	___ftadd@sign,??___ftadd
  7262  006116  0E07               	movlw	7
  7263  006118  164F               	andwf	??___ftadd,f,c
  7264  00611A  B4D8               	btfsc	status,2,c
  7265  00611C  D006               	goto	l567
  7266  00611E  D7EF               	goto	u2320
  7267  006120  90D8               	bcf	status,0,c
  7268  006122  324E               	rrcf	___ftadd@f2+2,f,c
  7269  006124  324D               	rrcf	___ftadd@f2+1,f,c
  7270  006126  324C               	rrcf	___ftadd@f2,f,c
  7271  006128  2A53               	incf	___ftadd@exp2,f,c
  7272  00612A                     l567:
  7273  00612A  5053               	movf	___ftadd@exp2,w,c
  7274  00612C  1854               	xorwf	___ftadd@exp1,w,c
  7275  00612E  A4D8               	btfss	status,2,c
  7276  006130  D7F7               	goto	l568
  7277  006132                     u2350:
  7278  006132  AE52               	btfss	___ftadd@sign,7,c
  7279  006134  D00C               	goto	l570
  7280  006136  0EFF               	movlw	255
  7281  006138  1A49               	xorwf	___ftadd@f1,f,c
  7282  00613A  0EFF               	movlw	255
  7283  00613C  1A4A               	xorwf	___ftadd@f1+1,f,c
  7284  00613E  0EFF               	movlw	255
  7285  006140  1A4B               	xorwf	___ftadd@f1+2,f,c
  7286  006142  0E01               	movlw	1
  7287  006144  2649               	addwf	___ftadd@f1,f,c
  7288  006146  0E00               	movlw	0
  7289  006148  224A               	addwfc	___ftadd@f1+1,f,c
  7290  00614A  0E00               	movlw	0
  7291  00614C  224B               	addwfc	___ftadd@f1+2,f,c
  7292  00614E                     l570:
  7293  00614E  AC52               	btfss	___ftadd@sign,6,c
  7294  006150  D00C               	goto	l571
  7295  006152  0EFF               	movlw	255
  7296  006154  1A4C               	xorwf	___ftadd@f2,f,c
  7297  006156  0EFF               	movlw	255
  7298  006158  1A4D               	xorwf	___ftadd@f2+1,f,c
  7299  00615A  0EFF               	movlw	255
  7300  00615C  1A4E               	xorwf	___ftadd@f2+2,f,c
  7301  00615E  0E01               	movlw	1
  7302  006160  264C               	addwf	___ftadd@f2,f,c
  7303  006162  0E00               	movlw	0
  7304  006164  224D               	addwfc	___ftadd@f2+1,f,c
  7305  006166  0E00               	movlw	0
  7306  006168  224E               	addwfc	___ftadd@f2+2,f,c
  7307  00616A                     l571:
  7308  00616A  0E00               	movlw	0
  7309  00616C  6E52               	movwf	___ftadd@sign,c
  7310  00616E  5049               	movf	___ftadd@f1,w,c
  7311  006170  264C               	addwf	___ftadd@f2,f,c
  7312  006172  504A               	movf	___ftadd@f1+1,w,c
  7313  006174  224D               	addwfc	___ftadd@f2+1,f,c
  7314  006176  504B               	movf	___ftadd@f1+2,w,c
  7315  006178  224E               	addwfc	___ftadd@f2+2,f,c
  7316  00617A  AE4E               	btfss	___ftadd@f2+2,7,c
  7317  00617C  D00E               	goto	l572
  7318  00617E  0EFF               	movlw	255
  7319  006180  1A4C               	xorwf	___ftadd@f2,f,c
  7320  006182  0EFF               	movlw	255
  7321  006184  1A4D               	xorwf	___ftadd@f2+1,f,c
  7322  006186  0EFF               	movlw	255
  7323  006188  1A4E               	xorwf	___ftadd@f2+2,f,c
  7324  00618A  0E01               	movlw	1
  7325  00618C  264C               	addwf	___ftadd@f2,f,c
  7326  00618E  0E00               	movlw	0
  7327  006190  224D               	addwfc	___ftadd@f2+1,f,c
  7328  006192  0E00               	movlw	0
  7329  006194  224E               	addwfc	___ftadd@f2+2,f,c
  7330  006196  0E01               	movlw	1
  7331  006198  6E52               	movwf	___ftadd@sign,c
  7332  00619A                     l572:
  7333  00619A  C04C  F001         	movff	___ftadd@f2,___ftpack@arg
  7334  00619E  C04D  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  7335  0061A2  C04E  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  7336  0061A6  C054  F004         	movff	___ftadd@exp1,___ftpack@exp
  7337  0061AA  C052  F005         	movff	___ftadd@sign,___ftpack@sign
  7338  0061AE  EC1F  F02D         	call	___ftpack	;wreg free
  7339  0061B2  C001  F049         	movff	?___ftpack,?___ftadd
  7340  0061B6  C002  F04A         	movff	?___ftpack+1,?___ftadd+1
  7341  0061BA  C003  F04B         	movff	?___ftpack+2,?___ftadd+2
  7342  0061BE  0012               	return	
  7343  0061C0                     __end_of___ftadd:
  7344                           	opt stack 0
  7345                           tblptru	equ	0xFF8
  7346                           tblptrh	equ	0xFF7
  7347                           tblptrl	equ	0xFF6
  7348                           tablat	equ	0xFF5
  7349                           prodh	equ	0xFF4
  7350                           prodl	equ	0xFF3
  7351                           intcon	equ	0xFF2
  7352                           wreg	equ	0xFE8
  7353                           postinc2	equ	0xFDE
  7354                           postdec2	equ	0xFDD
  7355                           fsr2h	equ	0xFDA
  7356                           fsr2l	equ	0xFD9
  7357                           status	equ	0xFD8
  7358                           
  7359 ;; *************** function ___ftneg *****************
  7360 ;; Defined at:
  7361 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftneg.c"
  7362 ;; Parameters:    Size  Location     Type
  7363 ;;  f1              3   44[COMRAM] float 
  7364 ;; Auto vars:     Size  Location     Type
  7365 ;;		None
  7366 ;; Return value:  Size  Location     Type
  7367 ;;                  3   44[COMRAM] float 
  7368 ;; Registers used:
  7369 ;;		wreg, status,2, status,0
  7370 ;; Tracked objects:
  7371 ;;		On entry : 0/0
  7372 ;;		On exit  : 0/0
  7373 ;;		Unchanged: 0/0
  7374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7375 ;;      Params:         3       0       0       0       0       0       0
  7376 ;;      Locals:         0       0       0       0       0       0       0
  7377 ;;      Temps:          0       0       0       0       0       0       0
  7378 ;;      Totals:         3       0       0       0       0       0       0
  7379 ;;Total ram usage:        3 bytes
  7380 ;; Hardware stack levels used:    1
  7381 ;; This function calls:
  7382 ;;		Nothing
  7383 ;; This function is called by:
  7384 ;;		_printf
  7385 ;; This function uses a non-reentrant model
  7386 ;;
  7387                           
  7388                           	psect	text19
  7389  0056EC                     __ptext19:
  7390                           	opt stack 0
  7391  0056EC                     ___ftneg:
  7392                           	opt stack 29
  7393                           
  7394                           ;incstack = 0
  7395  0056EC  502D               	movf	___ftneg@f1,w,c
  7396  0056EE  102E               	iorwf	___ftneg@f1+1,w,c
  7397  0056F0  102F               	iorwf	___ftneg@f1+2,w,c
  7398  0056F2  B4D8               	btfsc	status,2,c
  7399  0056F4  D006               	goto	l620
  7400  0056F6  0E00               	movlw	0
  7401  0056F8  1A2D               	xorwf	___ftneg@f1,f,c
  7402  0056FA  0E00               	movlw	0
  7403  0056FC  1A2E               	xorwf	___ftneg@f1+1,f,c
  7404  0056FE  0E80               	movlw	128
  7405  005700  1A2F               	xorwf	___ftneg@f1+2,f,c
  7406  005702                     l620:
  7407  005702  C02D  F02D         	movff	___ftneg@f1,?___ftneg
  7408  005706  C02E  F02E         	movff	___ftneg@f1+1,?___ftneg+1
  7409  00570A  C02F  F02F         	movff	___ftneg@f1+2,?___ftneg+2
  7410  00570E  0012               	return		;funcret
  7411  005710                     __end_of___ftneg:
  7412                           	opt stack 0
  7413                           tblptru	equ	0xFF8
  7414                           tblptrh	equ	0xFF7
  7415                           tblptrl	equ	0xFF6
  7416                           tablat	equ	0xFF5
  7417                           prodh	equ	0xFF4
  7418                           prodl	equ	0xFF3
  7419                           intcon	equ	0xFF2
  7420                           wreg	equ	0xFE8
  7421                           postinc2	equ	0xFDE
  7422                           postdec2	equ	0xFDD
  7423                           fsr2h	equ	0xFDA
  7424                           fsr2l	equ	0xFD9
  7425                           status	equ	0xFD8
  7426                           
  7427 ;; *************** function ___ftge *****************
  7428 ;; Defined at:
  7429 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftge.c"
  7430 ;; Parameters:    Size  Location     Type
  7431 ;;  ff1             3   84[COMRAM] float 
  7432 ;;  ff2             3   87[COMRAM] float 
  7433 ;; Auto vars:     Size  Location     Type
  7434 ;;		None
  7435 ;; Return value:  Size  Location     Type
  7436 ;;		None               void
  7437 ;; Registers used:
  7438 ;;		wreg, status,2, status,0
  7439 ;; Tracked objects:
  7440 ;;		On entry : 0/0
  7441 ;;		On exit  : 0/0
  7442 ;;		Unchanged: 0/0
  7443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7444 ;;      Params:         6       0       0       0       0       0       0
  7445 ;;      Locals:         0       0       0       0       0       0       0
  7446 ;;      Temps:          3       0       0       0       0       0       0
  7447 ;;      Totals:         9       0       0       0       0       0       0
  7448 ;;Total ram usage:        9 bytes
  7449 ;; Hardware stack levels used:    1
  7450 ;; This function calls:
  7451 ;;		Nothing
  7452 ;; This function is called by:
  7453 ;;		_printf
  7454 ;; This function uses a non-reentrant model
  7455 ;;
  7456                           
  7457                           	psect	text20
  7458  0059AE                     __ptext20:
  7459                           	opt stack 0
  7460  0059AE                     ___ftge:
  7461                           	opt stack 29
  7462                           
  7463                           ;incstack = 0
  7464  0059AE  AE57               	btfss	___ftge@ff1+2,7,c
  7465  0059B0  D016               	goto	l602
  7466  0059B2  C055  F05B         	movff	___ftge@ff1,??___ftge
  7467  0059B6  C056  F05C         	movff	___ftge@ff1+1,??___ftge+1
  7468  0059BA  C057  F05D         	movff	___ftge@ff1+2,??___ftge+2
  7469  0059BE  1E5B               	comf	??___ftge,f,c
  7470  0059C0  1E5C               	comf	??___ftge+1,f,c
  7471  0059C2  1E5D               	comf	??___ftge+2,f,c
  7472  0059C4  2A5B               	incf	??___ftge,f,c
  7473  0059C6  0E00               	movlw	0
  7474  0059C8  225C               	addwfc	??___ftge+1,f,c
  7475  0059CA  225D               	addwfc	??___ftge+2,f,c
  7476  0059CC  0E00               	movlw	0
  7477  0059CE  245B               	addwf	??___ftge,w,c
  7478  0059D0  6E55               	movwf	___ftge@ff1,c
  7479  0059D2  0E00               	movlw	0
  7480  0059D4  205C               	addwfc	??___ftge+1,w,c
  7481  0059D6  6E56               	movwf	___ftge@ff1+1,c
  7482  0059D8  0E80               	movlw	128
  7483  0059DA  205D               	addwfc	??___ftge+2,w,c
  7484  0059DC  6E57               	movwf	___ftge@ff1+2,c
  7485  0059DE                     l602:
  7486  0059DE  AE5A               	btfss	___ftge@ff2+2,7,c
  7487  0059E0  D016               	goto	l603
  7488  0059E2  C058  F05B         	movff	___ftge@ff2,??___ftge
  7489  0059E6  C059  F05C         	movff	___ftge@ff2+1,??___ftge+1
  7490  0059EA  C05A  F05D         	movff	___ftge@ff2+2,??___ftge+2
  7491  0059EE  1E5B               	comf	??___ftge,f,c
  7492  0059F0  1E5C               	comf	??___ftge+1,f,c
  7493  0059F2  1E5D               	comf	??___ftge+2,f,c
  7494  0059F4  2A5B               	incf	??___ftge,f,c
  7495  0059F6  0E00               	movlw	0
  7496  0059F8  225C               	addwfc	??___ftge+1,f,c
  7497  0059FA  225D               	addwfc	??___ftge+2,f,c
  7498  0059FC  0E00               	movlw	0
  7499  0059FE  245B               	addwf	??___ftge,w,c
  7500  005A00  6E58               	movwf	___ftge@ff2,c
  7501  005A02  0E00               	movlw	0
  7502  005A04  205C               	addwfc	??___ftge+1,w,c
  7503  005A06  6E59               	movwf	___ftge@ff2+1,c
  7504  005A08  0E80               	movlw	128
  7505  005A0A  205D               	addwfc	??___ftge+2,w,c
  7506  005A0C  6E5A               	movwf	___ftge@ff2+2,c
  7507  005A0E                     l603:
  7508  005A0E  0E00               	movlw	0
  7509  005A10  1A55               	xorwf	___ftge@ff1,f,c
  7510  005A12  0E00               	movlw	0
  7511  005A14  1A56               	xorwf	___ftge@ff1+1,f,c
  7512  005A16  0E80               	movlw	128
  7513  005A18  1A57               	xorwf	___ftge@ff1+2,f,c
  7514  005A1A  0E00               	movlw	0
  7515  005A1C  1A58               	xorwf	___ftge@ff2,f,c
  7516  005A1E  0E00               	movlw	0
  7517  005A20  1A59               	xorwf	___ftge@ff2+1,f,c
  7518  005A22  0E80               	movlw	128
  7519  005A24  1A5A               	xorwf	___ftge@ff2+2,f,c
  7520  005A26  5058               	movf	___ftge@ff2,w,c
  7521  005A28  5C55               	subwf	___ftge@ff1,w,c
  7522  005A2A  5059               	movf	___ftge@ff2+1,w,c
  7523  005A2C  5856               	subwfb	___ftge@ff1+1,w,c
  7524  005A2E  505A               	movf	___ftge@ff2+2,w,c
  7525  005A30  5857               	subwfb	___ftge@ff1+2,w,c
  7526  005A32  B0D8               	btfsc	status,0,c
  7527  005A34  D002               	goto	l2134
  7528  005A36  90D8               	bcf	status,0,c
  7529  005A38  0012               	return	
  7530  005A3A                     l2134:
  7531  005A3A  80D8               	bsf	status,0,c
  7532  005A3C  0012               	return	
  7533  005A3E                     __end_of___ftge:
  7534                           	opt stack 0
  7535                           tblptru	equ	0xFF8
  7536                           tblptrh	equ	0xFF7
  7537                           tblptrl	equ	0xFF6
  7538                           tablat	equ	0xFF5
  7539                           prodh	equ	0xFF4
  7540                           prodl	equ	0xFF3
  7541                           intcon	equ	0xFF2
  7542                           wreg	equ	0xFE8
  7543                           postinc2	equ	0xFDE
  7544                           postdec2	equ	0xFDD
  7545                           fsr2h	equ	0xFDA
  7546                           fsr2l	equ	0xFD9
  7547                           status	equ	0xFD8
  7548                           
  7549 ;; *************** function ___ftdiv *****************
  7550 ;; Defined at:
  7551 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdiv.c"
  7552 ;; Parameters:    Size  Location     Type
  7553 ;;  f1              3   69[COMRAM] float 
  7554 ;;  f2              3   72[COMRAM] float 
  7555 ;; Auto vars:     Size  Location     Type
  7556 ;;  f3              3   79[COMRAM] float 
  7557 ;;  sign            1   83[COMRAM] unsigned char 
  7558 ;;  exp             1   82[COMRAM] unsigned char 
  7559 ;;  cntr            1   78[COMRAM] unsigned char 
  7560 ;; Return value:  Size  Location     Type
  7561 ;;                  3   69[COMRAM] float 
  7562 ;; Registers used:
  7563 ;;		wreg, status,2, status,0, cstack
  7564 ;; Tracked objects:
  7565 ;;		On entry : 0/0
  7566 ;;		On exit  : 0/0
  7567 ;;		Unchanged: 0/0
  7568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7569 ;;      Params:         6       0       0       0       0       0       0
  7570 ;;      Locals:         6       0       0       0       0       0       0
  7571 ;;      Temps:          3       0       0       0       0       0       0
  7572 ;;      Totals:        15       0       0       0       0       0       0
  7573 ;;Total ram usage:       15 bytes
  7574 ;; Hardware stack levels used:    1
  7575 ;; Hardware stack levels required when called:    1
  7576 ;; This function calls:
  7577 ;;		___ftpack
  7578 ;; This function is called by:
  7579 ;;		_printf
  7580 ;; This function uses a non-reentrant model
  7581 ;;
  7582                           
  7583                           	psect	text21
  7584  005AEC                     __ptext21:
  7585                           	opt stack 0
  7586  005AEC                     ___ftdiv:
  7587                           	opt stack 28
  7588                           
  7589                           ;incstack = 0
  7590  005AEC  C048  F04C         	movff	___ftdiv@f1+2,??___ftdiv
  7591  005AF0  6A4D               	clrf	(??___ftdiv+1)& (0+255),c
  7592  005AF2  6A4E               	clrf	(??___ftdiv+2)& (0+255),c
  7593  005AF4  3447               	rlcf	___ftdiv@f1+1,w,c
  7594  005AF6  364C               	rlcf	??___ftdiv& (0+255),f,c
  7595  005AF8  E301               	bnc	u2831
  7596  005AFA  804D               	bsf	(??___ftdiv+1)& (0+255),0,c
  7597  005AFC                     u2831:
  7598  005AFC  504C               	movf	??___ftdiv,w,c
  7599  005AFE  6E53               	movwf	___ftdiv@exp,c
  7600  005B00  5053               	movf	___ftdiv@exp,w,c
  7601  005B02  A4D8               	btfss	status,2,c
  7602  005B04  D007               	goto	l577
  7603  005B06  0E00               	movlw	0
  7604  005B08  6E46               	movwf	?___ftdiv,c
  7605  005B0A  0E00               	movlw	0
  7606  005B0C  6E47               	movwf	?___ftdiv+1,c
  7607  005B0E  0E00               	movlw	0
  7608  005B10  6E48               	movwf	?___ftdiv+2,c
  7609  005B12  0012               	return	
  7610  005B14                     l577:
  7611  005B14  C04B  F04C         	movff	___ftdiv@f2+2,??___ftdiv
  7612  005B18  6A4D               	clrf	(??___ftdiv+1)& (0+255),c
  7613  005B1A  6A4E               	clrf	(??___ftdiv+2)& (0+255),c
  7614  005B1C  344A               	rlcf	___ftdiv@f2+1,w,c
  7615  005B1E  364C               	rlcf	??___ftdiv& (0+255),f,c
  7616  005B20  E301               	bnc	u2851
  7617  005B22  804D               	bsf	(??___ftdiv+1)& (0+255),0,c
  7618  005B24                     u2851:
  7619  005B24  504C               	movf	??___ftdiv,w,c
  7620  005B26  6E54               	movwf	___ftdiv@sign,c
  7621  005B28  5054               	movf	___ftdiv@sign,w,c
  7622  005B2A  A4D8               	btfss	status,2,c
  7623  005B2C  D007               	goto	l579
  7624  005B2E  0E00               	movlw	0
  7625  005B30  6E46               	movwf	?___ftdiv,c
  7626  005B32  0E00               	movlw	0
  7627  005B34  6E47               	movwf	?___ftdiv+1,c
  7628  005B36  0E00               	movlw	0
  7629  005B38  6E48               	movwf	?___ftdiv+2,c
  7630  005B3A  0012               	return	
  7631  005B3C                     l579:
  7632  005B3C  0E00               	movlw	0
  7633  005B3E  6E50               	movwf	___ftdiv@f3,c
  7634  005B40  0E00               	movlw	0
  7635  005B42  6E51               	movwf	___ftdiv@f3+1,c
  7636  005B44  0E00               	movlw	0
  7637  005B46  6E52               	movwf	___ftdiv@f3+2,c
  7638  005B48  5054               	movf	___ftdiv@sign,w,c
  7639  005B4A  0F89               	addlw	137
  7640  005B4C  5E53               	subwf	___ftdiv@exp,f,c
  7641  005B4E  C048  F054         	movff	___ftdiv@f1+2,___ftdiv@sign
  7642  005B52  504B               	movf	___ftdiv@f2+2,w,c
  7643  005B54  1A54               	xorwf	___ftdiv@sign,f,c
  7644  005B56  0E80               	movlw	128
  7645  005B58  1654               	andwf	___ftdiv@sign,f,c
  7646  005B5A  8E47               	bsf	___ftdiv@f1+1,7,c
  7647  005B5C  0EFF               	movlw	255
  7648  005B5E  1646               	andwf	___ftdiv@f1,f,c
  7649  005B60  0EFF               	movlw	255
  7650  005B62  1647               	andwf	___ftdiv@f1+1,f,c
  7651  005B64  0E00               	movlw	0
  7652  005B66  1648               	andwf	___ftdiv@f1+2,f,c
  7653  005B68  8E4A               	bsf	___ftdiv@f2+1,7,c
  7654  005B6A  0EFF               	movlw	255
  7655  005B6C  1649               	andwf	___ftdiv@f2,f,c
  7656  005B6E  0EFF               	movlw	255
  7657  005B70  164A               	andwf	___ftdiv@f2+1,f,c
  7658  005B72  0E00               	movlw	0
  7659  005B74  164B               	andwf	___ftdiv@f2+2,f,c
  7660  005B76  0E18               	movlw	24
  7661  005B78  6E4F               	movwf	___ftdiv@cntr,c
  7662  005B7A  90D8               	bcf	status,0,c
  7663  005B7C  3650               	rlcf	___ftdiv@f3,f,c
  7664  005B7E  3651               	rlcf	___ftdiv@f3+1,f,c
  7665  005B80  3652               	rlcf	___ftdiv@f3+2,f,c
  7666  005B82  5049               	movf	___ftdiv@f2,w,c
  7667  005B84  5C46               	subwf	___ftdiv@f1,w,c
  7668  005B86  504A               	movf	___ftdiv@f2+1,w,c
  7669  005B88  5847               	subwfb	___ftdiv@f1+1,w,c
  7670  005B8A  504B               	movf	___ftdiv@f2+2,w,c
  7671  005B8C  5848               	subwfb	___ftdiv@f1+2,w,c
  7672  005B8E  A0D8               	btfss	status,0,c
  7673  005B90  D007               	goto	l581
  7674  005B92  5049               	movf	___ftdiv@f2,w,c
  7675  005B94  5E46               	subwf	___ftdiv@f1,f,c
  7676  005B96  504A               	movf	___ftdiv@f2+1,w,c
  7677  005B98  5A47               	subwfb	___ftdiv@f1+1,f,c
  7678  005B9A  504B               	movf	___ftdiv@f2+2,w,c
  7679  005B9C  5A48               	subwfb	___ftdiv@f1+2,f,c
  7680  005B9E  8050               	bsf	___ftdiv@f3,0,c
  7681  005BA0                     l581:
  7682  005BA0  90D8               	bcf	status,0,c
  7683  005BA2  3646               	rlcf	___ftdiv@f1,f,c
  7684  005BA4  3647               	rlcf	___ftdiv@f1+1,f,c
  7685  005BA6  3648               	rlcf	___ftdiv@f1+2,f,c
  7686  005BA8  2E4F               	decfsz	___ftdiv@cntr,f,c
  7687  005BAA  D7E7               	goto	l580
  7688  005BAC  C050  F001         	movff	___ftdiv@f3,___ftpack@arg
  7689  005BB0  C051  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7690  005BB4  C052  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7691  005BB8  C053  F004         	movff	___ftdiv@exp,___ftpack@exp
  7692  005BBC  C054  F005         	movff	___ftdiv@sign,___ftpack@sign
  7693  005BC0  EC1F  F02D         	call	___ftpack	;wreg free
  7694  005BC4  C001  F046         	movff	?___ftpack,?___ftdiv
  7695  005BC8  C002  F047         	movff	?___ftpack+1,?___ftdiv+1
  7696  005BCC  C003  F048         	movff	?___ftpack+2,?___ftdiv+2
  7697  005BD0  0012               	return	
  7698  005BD2                     __end_of___ftdiv:
  7699                           	opt stack 0
  7700                           tblptru	equ	0xFF8
  7701                           tblptrh	equ	0xFF7
  7702                           tblptrl	equ	0xFF6
  7703                           tablat	equ	0xFF5
  7704                           prodh	equ	0xFF4
  7705                           prodl	equ	0xFF3
  7706                           intcon	equ	0xFF2
  7707                           wreg	equ	0xFE8
  7708                           postinc2	equ	0xFDE
  7709                           postdec2	equ	0xFDD
  7710                           fsr2h	equ	0xFDA
  7711                           fsr2l	equ	0xFD9
  7712                           status	equ	0xFD8
  7713                           
  7714 ;; *************** function ___ftpack *****************
  7715 ;; Defined at:
  7716 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\float.c"
  7717 ;; Parameters:    Size  Location     Type
  7718 ;;  arg             3    0[COMRAM] unsigned um
  7719 ;;  exp             1    3[COMRAM] unsigned char 
  7720 ;;  sign            1    4[COMRAM] unsigned char 
  7721 ;; Auto vars:     Size  Location     Type
  7722 ;;		None
  7723 ;; Return value:  Size  Location     Type
  7724 ;;                  3    0[COMRAM] float 
  7725 ;; Registers used:
  7726 ;;		wreg, status,2, status,0
  7727 ;; Tracked objects:
  7728 ;;		On entry : 0/0
  7729 ;;		On exit  : 0/0
  7730 ;;		Unchanged: 0/0
  7731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7732 ;;      Params:         5       0       0       0       0       0       0
  7733 ;;      Locals:         0       0       0       0       0       0       0
  7734 ;;      Temps:          3       0       0       0       0       0       0
  7735 ;;      Totals:         8       0       0       0       0       0       0
  7736 ;;Total ram usage:        8 bytes
  7737 ;; Hardware stack levels used:    1
  7738 ;; This function calls:
  7739 ;;		Nothing
  7740 ;; This function is called by:
  7741 ;;		___ftadd
  7742 ;;		___ftdiv
  7743 ;;		___ftmul
  7744 ;;		___lltoft
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           	psect	text22
  7749  005A3E                     __ptext22:
  7750                           	opt stack 0
  7751  005A3E                     ___ftpack:
  7752                           	opt stack 27
  7753                           
  7754                           ;incstack = 0
  7755  005A3E  5004               	movf	___ftpack@exp,w,c
  7756  005A40  B4D8               	btfsc	status,2,c
  7757  005A42  D005               	goto	u2110
  7758  005A44  5001               	movf	___ftpack@arg,w,c
  7759  005A46  1002               	iorwf	___ftpack@arg+1,w,c
  7760  005A48  1003               	iorwf	___ftpack@arg+2,w,c
  7761  005A4A  A4D8               	btfss	status,2,c
  7762  005A4C  D00C               	goto	l513
  7763  005A4E                     u2110:
  7764  005A4E  0E00               	movlw	0
  7765  005A50  6E01               	movwf	?___ftpack,c
  7766  005A52  0E00               	movlw	0
  7767  005A54  6E02               	movwf	?___ftpack+1,c
  7768  005A56  0E00               	movlw	0
  7769  005A58  6E03               	movwf	?___ftpack+2,c
  7770  005A5A  0012               	return	
  7771  005A5C  2A04               	incf	___ftpack@exp,f,c
  7772  005A5E  90D8               	bcf	status,0,c
  7773  005A60  3203               	rrcf	___ftpack@arg+2,f,c
  7774  005A62  3202               	rrcf	___ftpack@arg+1,f,c
  7775  005A64  3201               	rrcf	___ftpack@arg,f,c
  7776  005A66                     l513:
  7777  005A66  0E00               	movlw	0
  7778  005A68  1401               	andwf	___ftpack@arg,w,c
  7779  005A6A  6E06               	movwf	??___ftpack& (0+255),c
  7780  005A6C  0E00               	movlw	0
  7781  005A6E  1402               	andwf	___ftpack@arg+1,w,c
  7782  005A70  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7783  005A72  0EFE               	movlw	254
  7784  005A74  1403               	andwf	___ftpack@arg+2,w,c
  7785  005A76  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7786  005A78  5006               	movf	??___ftpack,w,c
  7787  005A7A  1007               	iorwf	??___ftpack+1,w,c
  7788  005A7C  1008               	iorwf	??___ftpack+2,w,c
  7789  005A7E  B4D8               	btfsc	status,2,c
  7790  005A80  D00C               	goto	l516
  7791  005A82  D7EC               	goto	l514
  7792  005A84  2A04               	incf	___ftpack@exp,f,c
  7793  005A86  0E01               	movlw	1
  7794  005A88  2601               	addwf	___ftpack@arg,f,c
  7795  005A8A  0E00               	movlw	0
  7796  005A8C  2202               	addwfc	___ftpack@arg+1,f,c
  7797  005A8E  0E00               	movlw	0
  7798  005A90  2203               	addwfc	___ftpack@arg+2,f,c
  7799  005A92  90D8               	bcf	status,0,c
  7800  005A94  3203               	rrcf	___ftpack@arg+2,f,c
  7801  005A96  3202               	rrcf	___ftpack@arg+1,f,c
  7802  005A98  3201               	rrcf	___ftpack@arg,f,c
  7803  005A9A                     l516:
  7804  005A9A  0E00               	movlw	0
  7805  005A9C  1401               	andwf	___ftpack@arg,w,c
  7806  005A9E  6E06               	movwf	??___ftpack& (0+255),c
  7807  005AA0  0E00               	movlw	0
  7808  005AA2  1402               	andwf	___ftpack@arg+1,w,c
  7809  005AA4  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7810  005AA6  0EFF               	movlw	255
  7811  005AA8  1403               	andwf	___ftpack@arg+2,w,c
  7812  005AAA  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7813  005AAC  5006               	movf	??___ftpack,w,c
  7814  005AAE  1007               	iorwf	??___ftpack+1,w,c
  7815  005AB0  1008               	iorwf	??___ftpack+2,w,c
  7816  005AB2  B4D8               	btfsc	status,2,c
  7817  005AB4  D006               	goto	l519
  7818  005AB6  D7E6               	goto	l517
  7819  005AB8  0604               	decf	___ftpack@exp,f,c
  7820  005ABA  90D8               	bcf	status,0,c
  7821  005ABC  3601               	rlcf	___ftpack@arg,f,c
  7822  005ABE  3602               	rlcf	___ftpack@arg+1,f,c
  7823  005AC0  3603               	rlcf	___ftpack@arg+2,f,c
  7824  005AC2                     l519:
  7825  005AC2  BE02               	btfsc	___ftpack@arg+1,7,c
  7826  005AC4  D003               	goto	u2150
  7827  005AC6  0E02               	movlw	2
  7828  005AC8  6004               	cpfslt	___ftpack@exp,c
  7829  005ACA  D7F6               	goto	l520
  7830  005ACC                     u2150:
  7831  005ACC  A004               	btfss	___ftpack@exp,0,c
  7832  005ACE  9E02               	bcf	___ftpack@arg+1,7,c
  7833  005AD0  90D8               	bcf	status,0,c
  7834  005AD2  3204               	rrcf	___ftpack@exp,f,c
  7835  005AD4  5004               	movf	___ftpack@exp,w,c
  7836  005AD6  1203               	iorwf	___ftpack@arg+2,f,c
  7837  005AD8  5005               	movf	___ftpack@sign,w,c
  7838  005ADA  A4D8               	btfss	status,2,c
  7839  005ADC  8E03               	bsf	___ftpack@arg+2,7,c
  7840  005ADE  C001  F001         	movff	___ftpack@arg,?___ftpack
  7841  005AE2  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7842  005AE6  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7843  005AEA  0012               	return	
  7844  005AEC                     __end_of___ftpack:
  7845                           	opt stack 0
  7846                           tblptru	equ	0xFF8
  7847                           tblptrh	equ	0xFF7
  7848                           tblptrl	equ	0xFF6
  7849                           tablat	equ	0xFF5
  7850                           prodh	equ	0xFF4
  7851                           prodl	equ	0xFF3
  7852                           intcon	equ	0xFF2
  7853                           wreg	equ	0xFE8
  7854                           postinc2	equ	0xFDE
  7855                           postdec2	equ	0xFDD
  7856                           fsr2h	equ	0xFDA
  7857                           fsr2l	equ	0xFD9
  7858                           status	equ	0xFD8
  7859                           tblptru	equ	0xFF8
  7860                           tblptrh	equ	0xFF7
  7861                           tblptrl	equ	0xFF6
  7862                           tablat	equ	0xFF5
  7863                           prodh	equ	0xFF4
  7864                           prodl	equ	0xFF3
  7865                           intcon	equ	0xFF2
  7866                           wreg	equ	0xFE8
  7867                           postinc2	equ	0xFDE
  7868                           postdec2	equ	0xFDD
  7869                           fsr2h	equ	0xFDA
  7870                           fsr2l	equ	0xFD9
  7871                           status	equ	0xFD8
  7872                           
  7873                           	psect	rparam
  7874  0000                     tblptru	equ	0xFF8
  7875                           tblptrh	equ	0xFF7
  7876                           tblptrl	equ	0xFF6
  7877                           tablat	equ	0xFF5
  7878                           prodh	equ	0xFF4
  7879                           prodl	equ	0xFF3
  7880                           intcon	equ	0xFF2
  7881                           wreg	equ	0xFE8
  7882                           postinc2	equ	0xFDE
  7883                           postdec2	equ	0xFDD
  7884                           fsr2h	equ	0xFDA
  7885                           fsr2l	equ	0xFD9
  7886                           status	equ	0xFD8


Data Sizes:
    Strings     207
    Constant    118
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     93      93
    BANK0           160     63      63
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 55
		 -> STR_15(CODE[2]), STR_14(CODE[28]), STR_13(CODE[2]), STR_12(CODE[2]), 
		 -> STR_11(CODE[47]), STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[2]), 
		 -> STR_7(CODE[12]), STR_6(CODE[2]), STR_5(CODE[55]), STR_4(CODE[2]), 
		 -> STR_3(CODE[25]), STR_2(CODE[2]), STR_1(CODE[38]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    _printf->___ftge
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftneg
    ___awdiv->___awmod
    ___lltoft->___fttol
    ___llmod->___lldiv
    ___fttol->___wmul
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftneg->___lltoft
    ___ftge->___ftadd
    ___ftdiv->_scale

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0   71672
                                             47 BANK0     16    16      0
                            ___ftmul
                            ___fttol
                             _printf
                           _setUSART
 ---------------------------------------------------------------------------------
 (1) _setUSART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printf                                              53    46      7   64693
                                              0 BANK0     47    40      7
                            ___awdiv
                            ___awmod
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   12826
                                             62 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   12628
                                             62 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2895
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5654
                                             47 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                            ___fttol (ARG)
                           ___lltoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1816
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1972
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2763
                                             35 COMRAM     9     5      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8    1375
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8    1226
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1164
                                             20 COMRAM    15    11      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4689
                                             84 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4344
                                             72 COMRAM    12     6      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                            ___fttol (ARG)
                           ___lltoft (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     273
                                             44 COMRAM     3     0      3
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     744
                                             84 COMRAM     9     3      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3176
                                             69 COMRAM    15     9      6
                           ___ftpack
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2466
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftneg (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___fttol (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lltoft (ARG)
       ___ftpack
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___fttol
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _printf
     ___awdiv
       ___awmod (ARG)
     ___awmod
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___ftsub
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___fttol
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _setUSART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     5D      5D       1       97.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3F      3F       5       39.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BITBANK5           100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Tue Jan 23 11:36:50 2018

                     l50 6370                       l80 6584                       l90 69A8  
                     l83 67CC                       l84 66F8                       l77 64B8  
                     l94 69DC                       l87 67A8                       l95 69F2  
                     l88 68F8                       l97 6A24                       l98 6A08  
           ___awdiv@sign 000C      ___wmul@multiplicand 0011             ___ftadd@exp1 0054  
           ___ftadd@exp2 0053             ___ftadd@sign 0052                      l100 6A0E  
                    l101 6A14                      l110 6B48                      l102 6A1A  
                    l111 6B0C                      l120 6B78                      l201 769E  
                    l121 6B7E                      l105 6A52                      l202 777A  
                    l130 6CE2                      l114 6B88                      l122 6B82  
                    l211 77E0                      l131 6D4A                      l107 6A70  
                    l220 78C0                      l221 78B2                      l205 771C  
                    l141 6DEC                      l133 6D70                      l117 6B6E  
                    l109 6B5E                      l126 7B9E                      l230 7998  
                    l150 7010                      l142 6E04                      l134 6D8C  
                    l118 6BD2                      l231 790C                      l223 78FE  
                    l215 7882                      l151 706E                      l143 6E08  
                    l135 6D90                      l127 6BEE                      l119 6B74  
                    l160 7174                      l152 7032                      l136 744A  
                    l128 6C34                      l241 7B40                      l233 79B4  
                    l225 78EA                      l145 6EE6                      l250 7BE2  
                    l242 7A66                      l234 79A6                      l218 78AA  
                    l162 718A                      l146 6F76                      l251 7C08  
                    l171 71D4                      l163 717C                      l260 7D18  
                    l244 7B5C                      l236 79E6                      l180 7388  
                    l156 710E                      l148 6FE4                      l261 7D22  
                    l245 7B4E                      l237 79EA                      l165 71C8  
                    l157 714C                      l262 7D5A                      l238 7A14  
                    l190 747A                      l182 73B0                      l263 7D64  
                    l255 7C7C                      l183 73B6                      l175 737A  
                    l167 71B4                      l520 5AB8                      l184 73CE  
                    l176 72B6                      l513 5A66                      l257 7CAC  
                    l185 73D4                      l177 72E6                      l514 5A5C  
                    l602 59DE                      l450 594E                      l274 7E4E  
                    l258 7CE0                      l194 7540                      l603 5A0E  
                    l611 5D16                      l275 7DC8                      l267 7DBA  
                    l195 761A                      l179 7396                      l516 5A9A  
                    l620 5702                      l452 596C                      l612 5D48  
                    l196 75DE                      l517 5A84                      l453 5964  
                    l613 5D58                      l269 7DA6                      l189 7658  
                    l630 5BFE                      l470 5890                      l462 584C  
                    l519 5AC2                      l471 589E                      l463 5858  
                    l615 5D70                      l544 6066                      l632 5C74  
                    l456 598C                      l616 5D80                      l553 60F6  
                    l641 5CB4                      l633 5C64                      l481 5DD8  
                    l457 5996                      l449 593E                      l465 586E  
                    l609 5CEE                      l570 614E                      l626 574C  
                    l458 59A4                      l466 5866                      l571 616A  
                    l483 5DF6                      l580 5B7A                      l572 619A  
                    l548 6090                      l484 5E38                      l581 5BA0  
                    l493 5ECA                      l485 5E68                      l469 5886  
                    l645 56E4                      l558 60EC                      l638 5C98  
                    l494 5EBE                      l567 612A                      l559 60E2  
                    l639 5C8C                      l671 58D6                      l487 5EA6  
                    l591 5FD8                      l568 6120                      l672 58CA  
                    l488 5E96                      l592 5FC8                      l577 5B14  
                    l681 57F0                      l585 5F0E                      l682 57E4  
                    l579 5B3C                      l675 590A                      l587 5F3A  
                    l676 5918                      l692 5788                      l588 5F74  
                    l685 5818                      l693 577C                      l597 5FFC  
                    l589 5F9C                      l686 5826                      l598 5FF0  
                    _RX9 007D5E             ___awmod@sign 0006                      wreg 000FE8  
           __CFG_LVP$OFF 000000             ___ftdiv@cntr 004F             ___ftdiv@sign 0054  
                   l3002 742C                     l2134 5A3A                     l3102 78B2  
                   l3014 74A0                     l3126 79A6                     l3054 76F6  
                   l3046 769E                     l3074 77E6                     l3252 7E7E  
                   l3244 7DC8                     l3164 7B82                     l2378 56AC  
                   l3186 7C0E                     l2938 717C                     STR_1 7F95  
                   STR_2 7FFC                     STR_3 7FD7                     STR_4 7FFC  
                   STR_5 7F2F                     STR_6 7FFC                     STR_7 7FF0  
                   STR_8 7FFC                     STR_9 7FFC                     _BRGH 007D62  
                   _CREN 007D5C                     u2110 5A4E                     u2220 6058  
                   u3020 58DA                     u2150 5ACC                     u3110 6AE4  
                   u2320 60FE                     u2250 6082                     u3050 57F4  
                   u2411 5CFE                     u3220 6D84                     u2181 6024  
                   u2350 6132                     u2191 6038                     u2280 60C0  
                   u3410 7144                     u3250 6DB2                     u2540 5872  
                   u3260 6DD2                     u3180 6C7A                     u4150 7E7E  
                   u2391 5CD6                     u2480 5970                     u4160 7E98  
                   u4080 7D76                     u3440 719E                     u3360 7006  
                   u3185 6C6E                     u4090 7D90                     u3530 73A2  
                   u3290 6DFC             printf@tmpval 007B                     u2820 5ED0  
                   u3380 70B2                     u2750 6002                     u3710 76F6  
                   u3630 74E6                     u2831 5AFC                     u2671 5EF2  
                   u3800 78D4                     u3640 7510                     u3570 742C  
                   u3490 729A                     u2851 5B24                     u2931 5BE2  
                   u2691 5F1E                     u2950 5C1C                     u3750 782C  
                   u3670 766E                     u3920 7B82                     u3680 76B4  
                   u3850 79C8                     u3770 787A                     u2955 5C14  
                   u3860 79DE                     _RCIF 007CF5                     u2990 5C9E  
                   u3880 7A0E                     u3990 7C54                     _SPEN 007D5F  
                   _TXIF 007CF4                     _TXEN 007D65                     _SYNC 007D64  
                   _main 61C0             ___ftpack@arg 0001             ___ftpack@exp 0004  
                   fsr2h 000FDA                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3                     start 0000             ___ftmul@cntr 003D  
           ___param_bank 000000             ___ftmul@sign 003E             ___fttol@exp1 0023  
           ___fttol@lval 001F                    ?_main 0001          __end_of___awdiv 59AE  
        __end_of___ftadd 61C0                    STR_10 7FFC                    STR_11 7F66  
                  STR_12 7FFC                    STR_13 7FFC                    STR_14 7FBB  
                  STR_15 7FFC                    _BRG16 007DC3          __end_of___awmod 58A8  
        __end_of___ftdiv 5BD2          __end_of___ftneg 5710          __end_of___lldiv 592A  
        __end_of___ftmul 5DBA          ___awdiv@divisor 0009          __end_of___llmod 5838  
        __end_of___ftsub 5776          __end_of___fttol 5CC6          ___awdiv@counter 000B  
                  _RCREG 000FAE                    _SPBRG 000FAF                    _TXREG 000FAD  
           ___lltoft@exp 002C          __end_of_dpowers 7EE1                    _scale 65C4  
        __end_of_isdigit 56EC            ___ftpack@sign 0005                    _putch 56AA  
                  main@a 0098                    main@b 009A                    main@l 0092  
                  main@w 0095                    tablat 000FF5                    status 000FD8  
        __initialization 56A0             __end_of_main 6372                   ??_main 005E  
          ___fttol@sign1 001E            __activetblptr 000002     __size_of__tdiv_to_l_ 0132  
       ___llmod@dividend 000E                   ?_scale 003F         ___awdiv@dividend 0007  
                 ?_putch 0001         __end_of___ftpack 5AEC         __end_of___lltoft 57D2  
         __CFG_WDTEN$OFF 000000                   _INTCON 000FF2         __end_of__powers_ 7F08  
                 ___ftge 59AE                   ___wmul 5710                ??___awdiv 000B  
              ??___ftadd 004F                ??___awmod 0005                ??___ftdiv 004C  
              ??___ftneg 0030                ??___lldiv 0009                ??___ftmul 0036  
              ??___llmod 0016                ??___ftsub 005B                ??___fttol 0019  
                 _fround 6372         ___awdiv@quotient 000D          ___awmod@divisor 0003  
       __end_of_setUSART 56CE          ___awmod@counter 0005                   _printf 69CC  
                 main@Vp 008F    ___ftmul@f3_as_product 003A                ??_isdigit 0001  
           __mediumconst 7EB8                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0060  __end_of__initialization 56A0  
             ___ftadd@f1 0049               ___ftadd@f2 004C               ___ftge@ff1 0055  
             ___ftge@ff2 0058            ___rparam_used 000001               ___ftdiv@f1 0046  
             ___ftdiv@f2 0049               ___ftdiv@f3 0050               ___ftneg@f1 002D  
             ___ftmul@f1 0030               ___ftmul@f2 0033               ___ftsub@f1 0055  
             ___ftsub@f2 0058               ___fttol@f1 0015           __pcstackCOMRAM 0001  
             ___lltoft@c 0024            __end_of_scale 69CC            __end_of_putch 56B6  
             __div_to_l_ 5DBA          __div_to_l_@exp1 000C          __div_to_l_@cntr 000B  
                ??_scale 0042          __div_to_l_@quot 0007                  ??_putch 0001  
          __div_to_l_@f1 0001            __div_to_l_@f2 0004                  ?___ftge 0055  
                ?___wmul 000F                  ?_fround 003F                ?___ftpack 0001  
                ?_printf 0060                ?___lltoft 0024                ?_setUSART 0001  
      __end_of__npowers_ 7F2F                  __Hparam 0000                  __Lparam 0000  
        __size_of___ftge 0090                  ___awdiv 592A                  ___ftadd 6014  
                ___awmod 5838                  ___ftdiv 5AEC                  ___ftneg 56EC  
                ___lldiv 58A8          __size_of___wmul 0026                  ___ftmul 5CC6  
                ___llmod 57D2                  ___ftsub 5736                  ___fttol 5BD2  
             _fround$695 0045               _fround$696 0042                  __pcinit 56A0  
             ??___ftpack 0006          __size_of_fround 0252                  __ramtop 0600  
             ??___lltoft 0028                  __ptext0 61C0                  __ptext1 56B6  
                __ptext2 69CC                  __ptext3 65C4                  __ptext4 56AA  
                __ptext5 56CE                  __ptext6 6372                  __ptext7 5710  
                __ptext8 5CC6                  __ptext9 5838          __size_of_printf 14EC  
            ?__div_to_l_ 0001                  _dpowers 7EB9                  _isdigit 56CE  
       ___awmod@dividend 0001                  main@res 009C     end_of_initialization 56A0  
          __Lmediumconst 7EB8               ??_setUSART 0001          ___lldiv@divisor 0005  
        ___lldiv@counter 000D                  printf@c 008E                  printf@f 0060  
                postdec2 000FDD                  postinc2 000FDE           __tdiv_to_l_@f1 0001  
         __tdiv_to_l_@f2 0004               _printf$131 0070               _printf$134 0072  
             _printf$135 0074               _printf$698 006D            ??__tdiv_to_l_ 0007  
            ___ftdiv@exp 0053              printf@width 007F      __size_of__div_to_l_ 0128  
            ___ftmul@exp 0039           __end_of___ftge 5A3E           __end_of___wmul 5736  
         __end_of_fround 65C4           __end_of_printf 7EB8      start_initialization 56A0  
    __end_of__tdiv_to_l_ 6014          ___llmod@divisor 0012          ___llmod@counter 0016  
               ??___ftge 005B                 ??___wmul 0013                 ??_fround 0042  
               ??_printf 0067               fround@prec 0048        __size_of___ftpack 00AE  
      __size_of___lltoft 005C            __pcstackBANK0 0060        __size_of_setUSART 0018  
          __pmediumconst 7EB8                 ?___awdiv 0007                 ?___ftadd 0049  
               ?___awmod 0001                 ?___ftdiv 0046                 ?___ftneg 002D  
               ?___lldiv 0001                 ?___ftmul 0030                 ?___llmod 000E  
               ?___ftsub 0055                __npowers_ 7F08                 ?___fttol 0015  
            __tdiv_to_l_ 5EE2             ??__div_to_l_ 0007                 ?_isdigit 0001  
              _scale$697 0042           __size_of_scale 0408           __size_of_putch 000C  
         ___wmul@product 0013       __end_of__div_to_l_ 5EE2        ___wmul@multiplier 000F  
             printf@flag 008C               printf@fval 0087               printf@prec 008A  
             printf@temp 0076                 __Hrparam 0000                 __Lrparam 0000  
       __size_of___awdiv 0084         __size_of___ftadd 01AC         __size_of___awmod 0070  
       __size_of___ftdiv 00E6         __size_of___ftneg 0024         __size_of___lldiv 0082  
       __size_of___ftmul 00F4         __size_of___llmod 0066         __size_of___ftsub 0040  
       __size_of___fttol 00F4                 ___ftpack 5A3E                 ___lltoft 5776  
            _isdigit$361 0002         __size_of_isdigit 001E                 __ptext10 592A  
               __ptext11 5EE2                 __ptext20 59AE                 __ptext12 5DBA  
               __ptext21 5AEC                 __ptext13 5776                 __ptext22 5A3E  
               __ptext14 57D2                 __ptext15 58A8                 __ptext16 5BD2  
               __ptext17 5736                 __ptext18 6014                 __ptext19 56EC  
               __powers_ 7EE1            __size_of_main 01B2                 _setUSART 56B6  
              printf@exp 0081                printf@val 0083                putch@byte 0001  
               isdigit@c 0003                 scale@scl 0045         __tdiv_to_l_@exp1 000F  
       __tdiv_to_l_@cntr 000E         __tdiv_to_l_@quot 000A         ___lldiv@dividend 0001  
               printf@ap 0079             ?__tdiv_to_l_ 0001         ___lldiv@quotient 0009  
      __CFG_FOSC$INTIO67 000000  
